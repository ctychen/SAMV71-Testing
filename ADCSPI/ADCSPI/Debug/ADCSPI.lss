
ADCSPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015a0  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000024  20400000  004015a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c0  20400024  004015c4  00020024  2**2
                  ALLOC
  3 .heap         00000204  204000e4  00401684  00020024  2**0
                  ALLOC
  4 .stack        00000400  204002e8  00401888  00020024  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001102c  00000000  00000000  000200ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000027e9  00000000  00000000  000310d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00007bcc  00000000  00000000  000338c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000968  00000000  00000000  0003b48c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000008c8  00000000  00000000  0003bdf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003d635  00000000  00000000  0003c6bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00010dfd  00000000  00000000  00079cf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0014300c  00000000  00000000  0008aaee  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000018fc  00000000  00000000  001cdafc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e8 06 40 20 e5 01 40 00 e1 01 40 00 e1 01 40 00     ..@ ..@...@...@.
  400010:	e1 01 40 00 e1 01 40 00 e1 01 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	e1 01 40 00 e1 01 40 00 00 00 00 00 e1 01 40 00     ..@...@.......@.
  40003c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40004c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40005c:	e1 01 40 00 e1 01 40 00 00 00 00 00 e1 01 40 00     ..@...@.......@.
  40006c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 15 13 40 00     ..@...@...@...@.
  40007c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40008c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40009c:	29 0f 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ).@...@...@...@.
  4000ac:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000bc:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000cc:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000dc:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000ec:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000fc:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40010c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ......@...@...@.
  40012c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40013c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40014c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40015c:	e1 01 40 00 e1 01 40 00 e1 01 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400024 	.word	0x20400024
  400184:	00000000 	.word	0x00000000
  400188:	004015a0 	.word	0x004015a0

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	004015a0 	.word	0x004015a0
  4001c8:	20400028 	.word	0x20400028
  4001cc:	004015a0 	.word	0x004015a0
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b01      	ldr	r3, [pc, #4]	; (4001dc <atmel_start_init+0x8>)
  4001d8:	4798      	blx	r3
  4001da:	bd08      	pop	{r3, pc}
  4001dc:	00400409 	.word	0x00400409

004001e0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4001e0:	e7fe      	b.n	4001e0 <Dummy_Handler>
	...

004001e4 <Reset_Handler>:
{
  4001e4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4001e6:	4b10      	ldr	r3, [pc, #64]	; (400228 <Reset_Handler+0x44>)
  4001e8:	4a10      	ldr	r2, [pc, #64]	; (40022c <Reset_Handler+0x48>)
  4001ea:	429a      	cmp	r2, r3
  4001ec:	d009      	beq.n	400202 <Reset_Handler+0x1e>
  4001ee:	4b0e      	ldr	r3, [pc, #56]	; (400228 <Reset_Handler+0x44>)
  4001f0:	4a0e      	ldr	r2, [pc, #56]	; (40022c <Reset_Handler+0x48>)
  4001f2:	e003      	b.n	4001fc <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  4001f4:	6811      	ldr	r1, [r2, #0]
  4001f6:	6019      	str	r1, [r3, #0]
  4001f8:	3304      	adds	r3, #4
  4001fa:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  4001fc:	490c      	ldr	r1, [pc, #48]	; (400230 <Reset_Handler+0x4c>)
  4001fe:	428b      	cmp	r3, r1
  400200:	d3f8      	bcc.n	4001f4 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  400202:	4b0c      	ldr	r3, [pc, #48]	; (400234 <Reset_Handler+0x50>)
  400204:	e002      	b.n	40020c <Reset_Handler+0x28>
                *pDest++ = 0;
  400206:	2200      	movs	r2, #0
  400208:	601a      	str	r2, [r3, #0]
  40020a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  40020c:	4a0a      	ldr	r2, [pc, #40]	; (400238 <Reset_Handler+0x54>)
  40020e:	4293      	cmp	r3, r2
  400210:	d3f9      	bcc.n	400206 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400212:	4a0a      	ldr	r2, [pc, #40]	; (40023c <Reset_Handler+0x58>)
  400214:	4b0a      	ldr	r3, [pc, #40]	; (400240 <Reset_Handler+0x5c>)
  400216:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40021a:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  40021c:	4b09      	ldr	r3, [pc, #36]	; (400244 <Reset_Handler+0x60>)
  40021e:	4798      	blx	r3
        main();
  400220:	4b09      	ldr	r3, [pc, #36]	; (400248 <Reset_Handler+0x64>)
  400222:	4798      	blx	r3
  400224:	e7fe      	b.n	400224 <Reset_Handler+0x40>
  400226:	bf00      	nop
  400228:	20400000 	.word	0x20400000
  40022c:	004015a0 	.word	0x004015a0
  400230:	20400024 	.word	0x20400024
  400234:	20400024 	.word	0x20400024
  400238:	204000e4 	.word	0x204000e4
  40023c:	e000ed00 	.word	0xe000ed00
  400240:	00400000 	.word	0x00400000
  400244:	004013ed 	.word	0x004013ed
  400248:	00401389 	.word	0x00401389

0040024c <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
  40024c:	b508      	push	{r3, lr}
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40024e:	4b08      	ldr	r3, [pc, #32]	; (400270 <TIMER_0_init+0x24>)
  400250:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400252:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  400256:	d103      	bne.n	400260 <TIMER_0_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400258:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40025c:	4b04      	ldr	r3, [pc, #16]	; (400270 <TIMER_0_init+0x24>)
  40025e:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	TIMER_0_PORT_init();
	timer_init(&TIMER_0, TC0, _tc_get_timer());
  400260:	4b04      	ldr	r3, [pc, #16]	; (400274 <TIMER_0_init+0x28>)
  400262:	4798      	blx	r3
  400264:	4602      	mov	r2, r0
  400266:	4904      	ldr	r1, [pc, #16]	; (400278 <TIMER_0_init+0x2c>)
  400268:	4804      	ldr	r0, [pc, #16]	; (40027c <TIMER_0_init+0x30>)
  40026a:	4b05      	ldr	r3, [pc, #20]	; (400280 <TIMER_0_init+0x34>)
  40026c:	4798      	blx	r3
  40026e:	bd08      	pop	{r3, pc}
  400270:	400e0600 	.word	0x400e0600
  400274:	00400f25 	.word	0x00400f25
  400278:	4000c000 	.word	0x4000c000
  40027c:	204000c8 	.word	0x204000c8
  400280:	004006f1 	.word	0x004006f1

00400284 <SPI_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400284:	4b11      	ldr	r3, [pc, #68]	; (4002cc <SPI_0_PORT_init+0x48>)
  400286:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400288:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  40028c:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40028e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400290:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  400294:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400296:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  40029a:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40029c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40029e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  4002a2:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4002a4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4002a6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  4002aa:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4002ac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4002b0:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4002b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4002b4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  4002b8:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4002ba:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4002bc:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
  4002c0:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4002c2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4002c6:	605a      	str	r2, [r3, #4]
  4002c8:	4770      	bx	lr
  4002ca:	bf00      	nop
  4002cc:	400e1400 	.word	0x400e1400

004002d0 <SPI_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4002d0:	4b04      	ldr	r3, [pc, #16]	; (4002e4 <SPI_0_CLOCK_init+0x14>)
  4002d2:	699b      	ldr	r3, [r3, #24]
  4002d4:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  4002d8:	d103      	bne.n	4002e2 <SPI_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4002da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4002de:	4b01      	ldr	r3, [pc, #4]	; (4002e4 <SPI_0_CLOCK_init+0x14>)
  4002e0:	611a      	str	r2, [r3, #16]
  4002e2:	4770      	bx	lr
  4002e4:	400e0600 	.word	0x400e0600

004002e8 <SPI_0_init>:
{
  4002e8:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
  4002ea:	4b08      	ldr	r3, [pc, #32]	; (40030c <SPI_0_init+0x24>)
  4002ec:	4798      	blx	r3
	spi_m_sync_set_func_ptr(&SPI_0, _spi_get_spi_m_sync());
  4002ee:	4b08      	ldr	r3, [pc, #32]	; (400310 <SPI_0_init+0x28>)
  4002f0:	4798      	blx	r3
  4002f2:	4c08      	ldr	r4, [pc, #32]	; (400314 <SPI_0_init+0x2c>)
  4002f4:	4601      	mov	r1, r0
  4002f6:	4620      	mov	r0, r4
  4002f8:	4b07      	ldr	r3, [pc, #28]	; (400318 <SPI_0_init+0x30>)
  4002fa:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SPI0);
  4002fc:	4907      	ldr	r1, [pc, #28]	; (40031c <SPI_0_init+0x34>)
  4002fe:	4620      	mov	r0, r4
  400300:	4b07      	ldr	r3, [pc, #28]	; (400320 <SPI_0_init+0x38>)
  400302:	4798      	blx	r3
	SPI_0_PORT_init();
  400304:	4b07      	ldr	r3, [pc, #28]	; (400324 <SPI_0_init+0x3c>)
  400306:	4798      	blx	r3
  400308:	bd10      	pop	{r4, pc}
  40030a:	bf00      	nop
  40030c:	004002d1 	.word	0x004002d1
  400310:	00400e01 	.word	0x00400e01
  400314:	20400060 	.word	0x20400060
  400318:	004004bd 	.word	0x004004bd
  40031c:	40008000 	.word	0x40008000
  400320:	004004dd 	.word	0x004004dd
  400324:	00400285 	.word	0x00400285

00400328 <RAND_0_CLOCK_init>:
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400328:	4b05      	ldr	r3, [pc, #20]	; (400340 <RAND_0_CLOCK_init+0x18>)
  40032a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  40032e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  400332:	d104      	bne.n	40033e <RAND_0_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400334:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400338:	4b01      	ldr	r3, [pc, #4]	; (400340 <RAND_0_CLOCK_init+0x18>)
  40033a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  40033e:	4770      	bx	lr
  400340:	400e0600 	.word	0x400e0600

00400344 <RAND_0_init>:
{
	_pmc_enable_periph_clock(ID_TRNG);
}

void RAND_0_init(void)
{
  400344:	b508      	push	{r3, lr}
	RAND_0_CLOCK_init();
  400346:	4b03      	ldr	r3, [pc, #12]	; (400354 <RAND_0_init+0x10>)
  400348:	4798      	blx	r3
	rand_sync_init(&RAND_0, TRNG);
  40034a:	4903      	ldr	r1, [pc, #12]	; (400358 <RAND_0_init+0x14>)
  40034c:	4803      	ldr	r0, [pc, #12]	; (40035c <RAND_0_init+0x18>)
  40034e:	4b04      	ldr	r3, [pc, #16]	; (400360 <RAND_0_init+0x1c>)
  400350:	4798      	blx	r3
  400352:	bd08      	pop	{r3, pc}
  400354:	00400329 	.word	0x00400329
  400358:	40070000 	.word	0x40070000
  40035c:	20400058 	.word	0x20400058
  400360:	00400491 	.word	0x00400491

00400364 <USART_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400364:	4b04      	ldr	r3, [pc, #16]	; (400378 <USART_0_CLOCK_init+0x14>)
  400366:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400368:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  40036c:	d103      	bne.n	400376 <USART_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40036e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  400372:	4b01      	ldr	r3, [pc, #4]	; (400378 <USART_0_CLOCK_init+0x14>)
  400374:	611a      	str	r2, [r3, #16]
  400376:	4770      	bx	lr
  400378:	400e0600 	.word	0x400e0600

0040037c <USART_0_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40037c:	4b0f      	ldr	r3, [pc, #60]	; (4003bc <USART_0_PORT_init+0x40>)
  40037e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400380:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400384:	671a      	str	r2, [r3, #112]	; 0x70
  400386:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400388:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  40038c:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  40038e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400392:	605a      	str	r2, [r3, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  400394:	4a0a      	ldr	r2, [pc, #40]	; (4003c0 <USART_0_PORT_init+0x44>)
  400396:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  40039a:	f043 0310 	orr.w	r3, r3, #16
  40039e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4003a2:	4b08      	ldr	r3, [pc, #32]	; (4003c4 <USART_0_PORT_init+0x48>)
  4003a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4003a6:	f042 0210 	orr.w	r2, r2, #16
  4003aa:	671a      	str	r2, [r3, #112]	; 0x70
  4003ac:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4003ae:	f042 0210 	orr.w	r2, r2, #16
  4003b2:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4003b4:	2210      	movs	r2, #16
  4003b6:	605a      	str	r2, [r3, #4]
  4003b8:	4770      	bx	lr
  4003ba:	bf00      	nop
  4003bc:	400e0e00 	.word	0x400e0e00
  4003c0:	40088000 	.word	0x40088000
  4003c4:	400e1000 	.word	0x400e1000

004003c8 <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
  4003c8:	b510      	push	{r4, lr}
  4003ca:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
  4003cc:	4b07      	ldr	r3, [pc, #28]	; (4003ec <USART_0_init+0x24>)
  4003ce:	4798      	blx	r3
	USART_0_PORT_init();
  4003d0:	4b07      	ldr	r3, [pc, #28]	; (4003f0 <USART_0_init+0x28>)
  4003d2:	4798      	blx	r3
	usart_async_init(&USART_0, USART1, USART_0_buffer, USART_0_BUFFER_SIZE, _usart_get_usart_async());
  4003d4:	4b07      	ldr	r3, [pc, #28]	; (4003f4 <USART_0_init+0x2c>)
  4003d6:	4798      	blx	r3
  4003d8:	9000      	str	r0, [sp, #0]
  4003da:	2310      	movs	r3, #16
  4003dc:	4a06      	ldr	r2, [pc, #24]	; (4003f8 <USART_0_init+0x30>)
  4003de:	4907      	ldr	r1, [pc, #28]	; (4003fc <USART_0_init+0x34>)
  4003e0:	4807      	ldr	r0, [pc, #28]	; (400400 <USART_0_init+0x38>)
  4003e2:	4c08      	ldr	r4, [pc, #32]	; (400404 <USART_0_init+0x3c>)
  4003e4:	47a0      	blx	r4
}
  4003e6:	b002      	add	sp, #8
  4003e8:	bd10      	pop	{r4, pc}
  4003ea:	bf00      	nop
  4003ec:	00400365 	.word	0x00400365
  4003f0:	0040037d 	.word	0x0040037d
  4003f4:	00401311 	.word	0x00401311
  4003f8:	20400040 	.word	0x20400040
  4003fc:	40028000 	.word	0x40028000
  400400:	20400078 	.word	0x20400078
  400404:	00400881 	.word	0x00400881

00400408 <system_init>:

void system_init(void)
{
  400408:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  40040a:	4b08      	ldr	r3, [pc, #32]	; (40042c <system_init+0x24>)
  40040c:	4798      	blx	r3
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  40040e:	4a08      	ldr	r2, [pc, #32]	; (400430 <system_init+0x28>)
  400410:	6853      	ldr	r3, [r2, #4]
  400412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  400416:	6053      	str	r3, [r2, #4]
	init_mcu();

	/* Disable Watchdog */
	hri_wdt_set_MR_WDDIS_bit(WDT);

	SPI_0_init();
  400418:	4b06      	ldr	r3, [pc, #24]	; (400434 <system_init+0x2c>)
  40041a:	4798      	blx	r3
	TIMER_0_init();
  40041c:	4b06      	ldr	r3, [pc, #24]	; (400438 <system_init+0x30>)
  40041e:	4798      	blx	r3

	RAND_0_init();
  400420:	4b06      	ldr	r3, [pc, #24]	; (40043c <system_init+0x34>)
  400422:	4798      	blx	r3
	USART_0_init();
  400424:	4b06      	ldr	r3, [pc, #24]	; (400440 <system_init+0x38>)
  400426:	4798      	blx	r3
  400428:	bd08      	pop	{r3, pc}
  40042a:	bf00      	nop
  40042c:	00400b01 	.word	0x00400b01
  400430:	400e1850 	.word	0x400e1850
  400434:	004002e9 	.word	0x004002e9
  400438:	0040024d 	.word	0x0040024d
  40043c:	00400345 	.word	0x00400345
  400440:	004003c9 	.word	0x004003c9

00400444 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400444:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  400448:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  40044a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  40044c:	f3bf 8f5f 	dmb	sy
  400450:	4770      	bx	lr

00400452 <atomic_leave_critical>:
  400452:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  400456:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  400458:	f383 8810 	msr	PRIMASK, r3
  40045c:	4770      	bx	lr
	...

00400460 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400460:	b570      	push	{r4, r5, r6, lr}
  400462:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400464:	4604      	mov	r4, r0
  400466:	460d      	mov	r5, r1
  400468:	2800      	cmp	r0, #0
  40046a:	bf18      	it	ne
  40046c:	2900      	cmpne	r1, #0
  40046e:	bf14      	ite	ne
  400470:	2001      	movne	r0, #1
  400472:	2000      	moveq	r0, #0
  400474:	223d      	movs	r2, #61	; 0x3d
  400476:	4904      	ldr	r1, [pc, #16]	; (400488 <io_read+0x28>)
  400478:	4b04      	ldr	r3, [pc, #16]	; (40048c <io_read+0x2c>)
  40047a:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  40047c:	6863      	ldr	r3, [r4, #4]
  40047e:	4632      	mov	r2, r6
  400480:	4629      	mov	r1, r5
  400482:	4620      	mov	r0, r4
  400484:	4798      	blx	r3
}
  400486:	bd70      	pop	{r4, r5, r6, pc}
  400488:	00401434 	.word	0x00401434
  40048c:	004009b5 	.word	0x004009b5

00400490 <rand_sync_init>:
#include "hal_rand_sync.h"

#define HAL_RNG_SYNC_VERSION 0x00000001u

int32_t rand_sync_init(struct rand_sync_desc *const desc, void *const hw)
{
  400490:	b538      	push	{r3, r4, r5, lr}
  400492:	460d      	mov	r5, r1
	ASSERT(desc);
  400494:	4604      	mov	r4, r0
  400496:	2229      	movs	r2, #41	; 0x29
  400498:	4905      	ldr	r1, [pc, #20]	; (4004b0 <rand_sync_init+0x20>)
  40049a:	3000      	adds	r0, #0
  40049c:	bf18      	it	ne
  40049e:	2001      	movne	r0, #1
  4004a0:	4b04      	ldr	r3, [pc, #16]	; (4004b4 <rand_sync_init+0x24>)
  4004a2:	4798      	blx	r3

	return _rand_sync_init(&desc->dev, hw);
  4004a4:	4629      	mov	r1, r5
  4004a6:	4620      	mov	r0, r4
  4004a8:	4b03      	ldr	r3, [pc, #12]	; (4004b8 <rand_sync_init+0x28>)
  4004aa:	4798      	blx	r3
}
  4004ac:	bd38      	pop	{r3, r4, r5, pc}
  4004ae:	bf00      	nop
  4004b0:	00401448 	.word	0x00401448
  4004b4:	004009b5 	.word	0x004009b5
  4004b8:	00400f3d 	.word	0x00400f3d

004004bc <spi_m_sync_set_func_ptr>:

/**
 *  \brief Initialize the SPI HAL instance function pointer for HPL APIs.
 */
void spi_m_sync_set_func_ptr(struct spi_m_sync_descriptor *spi, void *const func)
{
  4004bc:	b538      	push	{r3, r4, r5, lr}
  4004be:	460d      	mov	r5, r1
	ASSERT(spi);
  4004c0:	4604      	mov	r4, r0
  4004c2:	2239      	movs	r2, #57	; 0x39
  4004c4:	4903      	ldr	r1, [pc, #12]	; (4004d4 <spi_m_sync_set_func_ptr+0x18>)
  4004c6:	3000      	adds	r0, #0
  4004c8:	bf18      	it	ne
  4004ca:	2001      	movne	r0, #1
  4004cc:	4b02      	ldr	r3, [pc, #8]	; (4004d8 <spi_m_sync_set_func_ptr+0x1c>)
  4004ce:	4798      	blx	r3
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
  4004d0:	6025      	str	r5, [r4, #0]
  4004d2:	bd38      	pop	{r3, r4, r5, pc}
  4004d4:	00401464 	.word	0x00401464
  4004d8:	004009b5 	.word	0x004009b5

004004dc <spi_m_sync_init>:
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
  4004dc:	b538      	push	{r3, r4, r5, lr}
	int32_t rc = 0;
	ASSERT(spi && hw);
  4004de:	4604      	mov	r4, r0
  4004e0:	460d      	mov	r5, r1
  4004e2:	2800      	cmp	r0, #0
  4004e4:	bf18      	it	ne
  4004e6:	2900      	cmpne	r1, #0
  4004e8:	bf14      	ite	ne
  4004ea:	2001      	movne	r0, #1
  4004ec:	2000      	moveq	r0, #0
  4004ee:	2240      	movs	r2, #64	; 0x40
  4004f0:	4909      	ldr	r1, [pc, #36]	; (400518 <spi_m_sync_init+0x3c>)
  4004f2:	4b0a      	ldr	r3, [pc, #40]	; (40051c <spi_m_sync_init+0x40>)
  4004f4:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
  4004f6:	4620      	mov	r0, r4
  4004f8:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
  4004fc:	4629      	mov	r1, r5
  4004fe:	4b08      	ldr	r3, [pc, #32]	; (400520 <spi_m_sync_init+0x44>)
  400500:	4798      	blx	r3

	if (rc < 0) {
  400502:	2800      	cmp	r0, #0
  400504:	db07      	blt.n	400516 <spi_m_sync_init+0x3a>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
  400506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40050a:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
  40050c:	4b05      	ldr	r3, [pc, #20]	; (400524 <spi_m_sync_init+0x48>)
  40050e:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
  400510:	4b05      	ldr	r3, [pc, #20]	; (400528 <spi_m_sync_init+0x4c>)
  400512:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
  400514:	2000      	movs	r0, #0
}
  400516:	bd38      	pop	{r3, r4, r5, pc}
  400518:	00401464 	.word	0x00401464
  40051c:	004009b5 	.word	0x004009b5
  400520:	00400c25 	.word	0x00400c25
  400524:	004005d1 	.word	0x004005d1
  400528:	00400595 	.word	0x00400595

0040052c <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
  40052c:	b510      	push	{r4, lr}
	ASSERT(spi);
  40052e:	4604      	mov	r4, r0
  400530:	2257      	movs	r2, #87	; 0x57
  400532:	4905      	ldr	r1, [pc, #20]	; (400548 <spi_m_sync_enable+0x1c>)
  400534:	3000      	adds	r0, #0
  400536:	bf18      	it	ne
  400538:	2001      	movne	r0, #1
  40053a:	4b04      	ldr	r3, [pc, #16]	; (40054c <spi_m_sync_enable+0x20>)
  40053c:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
  40053e:	1d20      	adds	r0, r4, #4
  400540:	4b03      	ldr	r3, [pc, #12]	; (400550 <spi_m_sync_enable+0x24>)
  400542:	4798      	blx	r3
  400544:	bd10      	pop	{r4, pc}
  400546:	bf00      	nop
  400548:	00401464 	.word	0x00401464
  40054c:	004009b5 	.word	0x004009b5
  400550:	00400ccd 	.word	0x00400ccd

00400554 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
  400554:	b530      	push	{r4, r5, lr}
  400556:	b085      	sub	sp, #20
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
  400558:	4605      	mov	r5, r0
  40055a:	460c      	mov	r4, r1
  40055c:	2800      	cmp	r0, #0
  40055e:	bf18      	it	ne
  400560:	2900      	cmpne	r1, #0
  400562:	bf14      	ite	ne
  400564:	2001      	movne	r0, #1
  400566:	2000      	moveq	r0, #0
  400568:	22b3      	movs	r2, #179	; 0xb3
  40056a:	4907      	ldr	r1, [pc, #28]	; (400588 <spi_m_sync_transfer+0x34>)
  40056c:	4b07      	ldr	r3, [pc, #28]	; (40058c <spi_m_sync_transfer+0x38>)
  40056e:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
  400570:	6823      	ldr	r3, [r4, #0]
  400572:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
  400574:	6863      	ldr	r3, [r4, #4]
  400576:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
  400578:	68a3      	ldr	r3, [r4, #8]
  40057a:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
  40057c:	a901      	add	r1, sp, #4
  40057e:	1d28      	adds	r0, r5, #4
  400580:	4b03      	ldr	r3, [pc, #12]	; (400590 <spi_m_sync_transfer+0x3c>)
  400582:	4798      	blx	r3
}
  400584:	b005      	add	sp, #20
  400586:	bd30      	pop	{r4, r5, pc}
  400588:	00401464 	.word	0x00401464
  40058c:	004009b5 	.word	0x004009b5
  400590:	00400d01 	.word	0x00400d01

00400594 <_spi_m_sync_io_write>:
{
  400594:	b570      	push	{r4, r5, r6, lr}
  400596:	b084      	sub	sp, #16
  400598:	460e      	mov	r6, r1
  40059a:	4615      	mov	r5, r2
	ASSERT(io);
  40059c:	4604      	mov	r4, r0
  40059e:	22a3      	movs	r2, #163	; 0xa3
  4005a0:	4908      	ldr	r1, [pc, #32]	; (4005c4 <_spi_m_sync_io_write+0x30>)
  4005a2:	3000      	adds	r0, #0
  4005a4:	bf18      	it	ne
  4005a6:	2001      	movne	r0, #1
  4005a8:	4b07      	ldr	r3, [pc, #28]	; (4005c8 <_spi_m_sync_io_write+0x34>)
  4005aa:	4798      	blx	r3
	xfer.rxbuf = 0;
  4005ac:	2300      	movs	r3, #0
  4005ae:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
  4005b0:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
  4005b2:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  4005b4:	a901      	add	r1, sp, #4
  4005b6:	f1a4 000c 	sub.w	r0, r4, #12
  4005ba:	4b04      	ldr	r3, [pc, #16]	; (4005cc <_spi_m_sync_io_write+0x38>)
  4005bc:	4798      	blx	r3
}
  4005be:	b004      	add	sp, #16
  4005c0:	bd70      	pop	{r4, r5, r6, pc}
  4005c2:	bf00      	nop
  4005c4:	00401464 	.word	0x00401464
  4005c8:	004009b5 	.word	0x004009b5
  4005cc:	00400555 	.word	0x00400555

004005d0 <_spi_m_sync_io_read>:
{
  4005d0:	b570      	push	{r4, r5, r6, lr}
  4005d2:	b084      	sub	sp, #16
  4005d4:	460e      	mov	r6, r1
  4005d6:	4615      	mov	r5, r2
	ASSERT(io);
  4005d8:	4604      	mov	r4, r0
  4005da:	2287      	movs	r2, #135	; 0x87
  4005dc:	4908      	ldr	r1, [pc, #32]	; (400600 <_spi_m_sync_io_read+0x30>)
  4005de:	3000      	adds	r0, #0
  4005e0:	bf18      	it	ne
  4005e2:	2001      	movne	r0, #1
  4005e4:	4b07      	ldr	r3, [pc, #28]	; (400604 <_spi_m_sync_io_read+0x34>)
  4005e6:	4798      	blx	r3
	xfer.rxbuf = buf;
  4005e8:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
  4005ea:	2300      	movs	r3, #0
  4005ec:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
  4005ee:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  4005f0:	a901      	add	r1, sp, #4
  4005f2:	f1a4 000c 	sub.w	r0, r4, #12
  4005f6:	4b04      	ldr	r3, [pc, #16]	; (400608 <_spi_m_sync_io_read+0x38>)
  4005f8:	4798      	blx	r3
}
  4005fa:	b004      	add	sp, #16
  4005fc:	bd70      	pop	{r4, r5, r6, pc}
  4005fe:	bf00      	nop
  400600:	00401464 	.word	0x00401464
  400604:	004009b5 	.word	0x004009b5
  400608:	00400555 	.word	0x00400555

0040060c <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
  40060c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(spi && io);
  40060e:	4604      	mov	r4, r0
  400610:	460d      	mov	r5, r1
  400612:	2800      	cmp	r0, #0
  400614:	bf18      	it	ne
  400616:	2900      	cmpne	r1, #0
  400618:	bf14      	ite	ne
  40061a:	2001      	movne	r0, #1
  40061c:	2000      	moveq	r0, #0
  40061e:	22bd      	movs	r2, #189	; 0xbd
  400620:	4903      	ldr	r1, [pc, #12]	; (400630 <spi_m_sync_get_io_descriptor+0x24>)
  400622:	4b04      	ldr	r3, [pc, #16]	; (400634 <spi_m_sync_get_io_descriptor+0x28>)
  400624:	4798      	blx	r3
	*io = &spi->io;
  400626:	340c      	adds	r4, #12
  400628:	602c      	str	r4, [r5, #0]
	return 0;
}
  40062a:	2000      	movs	r0, #0
  40062c:	bd38      	pop	{r3, r4, r5, pc}
  40062e:	bf00      	nop
  400630:	00401464 	.word	0x00401464
  400634:	004009b5 	.word	0x004009b5

00400638 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  400638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  40063a:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  40063c:	b117      	cbz	r7, 400644 <timer_add_timer_task+0xc>
  40063e:	463c      	mov	r4, r7
  400640:	2600      	movs	r6, #0
  400642:	e00b      	b.n	40065c <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  400644:	4b0e      	ldr	r3, [pc, #56]	; (400680 <timer_add_timer_task+0x48>)
  400646:	4798      	blx	r3
		return;
  400648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  40064a:	68a5      	ldr	r5, [r4, #8]
  40064c:	442b      	add	r3, r5
  40064e:	1a9b      	subs	r3, r3, r2
  400650:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  400652:	688d      	ldr	r5, [r1, #8]
  400654:	42ab      	cmp	r3, r5
  400656:	d209      	bcs.n	40066c <timer_add_timer_task+0x34>
			break;
		prev = it;
  400658:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  40065a:	6824      	ldr	r4, [r4, #0]
  40065c:	b134      	cbz	r4, 40066c <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  40065e:	6863      	ldr	r3, [r4, #4]
  400660:	4293      	cmp	r3, r2
  400662:	d8f2      	bhi.n	40064a <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  400664:	68a5      	ldr	r5, [r4, #8]
  400666:	1a9b      	subs	r3, r3, r2
  400668:	442b      	add	r3, r5
  40066a:	e7f2      	b.n	400652 <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  40066c:	42bc      	cmp	r4, r7
  40066e:	d003      	beq.n	400678 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  400670:	4630      	mov	r0, r6
  400672:	4b04      	ldr	r3, [pc, #16]	; (400684 <timer_add_timer_task+0x4c>)
  400674:	4798      	blx	r3
  400676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  400678:	4b01      	ldr	r3, [pc, #4]	; (400680 <timer_add_timer_task+0x48>)
  40067a:	4798      	blx	r3
  40067c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40067e:	bf00      	nop
  400680:	004009d1 	.word	0x004009d1
  400684:	004009fd 	.word	0x004009fd

00400688 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  400688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40068a:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  40068c:	6906      	ldr	r6, [r0, #16]
  40068e:	3601      	adds	r6, #1
  400690:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  400692:	7e03      	ldrb	r3, [r0, #24]
  400694:	f013 0f01 	tst.w	r3, #1
  400698:	d105      	bne.n	4006a6 <timer_process_counted+0x1e>
  40069a:	7e03      	ldrb	r3, [r0, #24]
  40069c:	f013 0f02 	tst.w	r3, #2
  4006a0:	d101      	bne.n	4006a6 <timer_process_counted+0x1e>
  4006a2:	4605      	mov	r5, r0
  4006a4:	e009      	b.n	4006ba <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  4006a6:	7e03      	ldrb	r3, [r0, #24]
  4006a8:	f043 0302 	orr.w	r3, r3, #2
  4006ac:	7603      	strb	r3, [r0, #24]
		return;
  4006ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4006b0:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  4006b2:	68e3      	ldr	r3, [r4, #12]
  4006b4:	4620      	mov	r0, r4
  4006b6:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  4006b8:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  4006ba:	b19c      	cbz	r4, 4006e4 <timer_process_counted+0x5c>
  4006bc:	6863      	ldr	r3, [r4, #4]
  4006be:	1af3      	subs	r3, r6, r3
  4006c0:	68a2      	ldr	r2, [r4, #8]
  4006c2:	4293      	cmp	r3, r2
  4006c4:	d30e      	bcc.n	4006e4 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  4006c6:	f105 0714 	add.w	r7, r5, #20
  4006ca:	4638      	mov	r0, r7
  4006cc:	4b06      	ldr	r3, [pc, #24]	; (4006e8 <timer_process_counted+0x60>)
  4006ce:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  4006d0:	7c23      	ldrb	r3, [r4, #16]
  4006d2:	2b01      	cmp	r3, #1
  4006d4:	d1ec      	bne.n	4006b0 <timer_process_counted+0x28>
			tmp->time_label = time;
  4006d6:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  4006d8:	4632      	mov	r2, r6
  4006da:	4621      	mov	r1, r4
  4006dc:	4638      	mov	r0, r7
  4006de:	4b03      	ldr	r3, [pc, #12]	; (4006ec <timer_process_counted+0x64>)
  4006e0:	4798      	blx	r3
  4006e2:	e7e5      	b.n	4006b0 <timer_process_counted+0x28>
  4006e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4006e6:	bf00      	nop
  4006e8:	00400a05 	.word	0x00400a05
  4006ec:	00400639 	.word	0x00400639

004006f0 <timer_init>:
{
  4006f0:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  4006f2:	4604      	mov	r4, r0
  4006f4:	460d      	mov	r5, r1
  4006f6:	2800      	cmp	r0, #0
  4006f8:	bf18      	it	ne
  4006fa:	2900      	cmpne	r1, #0
  4006fc:	bf14      	ite	ne
  4006fe:	2001      	movne	r0, #1
  400700:	2000      	moveq	r0, #0
  400702:	223b      	movs	r2, #59	; 0x3b
  400704:	4905      	ldr	r1, [pc, #20]	; (40071c <timer_init+0x2c>)
  400706:	4b06      	ldr	r3, [pc, #24]	; (400720 <timer_init+0x30>)
  400708:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  40070a:	4629      	mov	r1, r5
  40070c:	4620      	mov	r0, r4
  40070e:	4b05      	ldr	r3, [pc, #20]	; (400724 <timer_init+0x34>)
  400710:	4798      	blx	r3
	descr->time                           = 0;
  400712:	2000      	movs	r0, #0
  400714:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  400716:	4b04      	ldr	r3, [pc, #16]	; (400728 <timer_init+0x38>)
  400718:	6023      	str	r3, [r4, #0]
}
  40071a:	bd38      	pop	{r3, r4, r5, pc}
  40071c:	00401480 	.word	0x00401480
  400720:	004009b5 	.word	0x004009b5
  400724:	00400e69 	.word	0x00400e69
  400728:	00400689 	.word	0x00400689

0040072c <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
  40072c:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
  40072e:	2300      	movs	r3, #0
  400730:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
  400732:	69c3      	ldr	r3, [r0, #28]
  400734:	b11b      	cbz	r3, 40073e <usart_transmission_complete+0x12>
  400736:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
  40073a:	4610      	mov	r0, r2
  40073c:	4798      	blx	r3
  40073e:	bd08      	pop	{r3, pc}

00400740 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
  400740:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
  400742:	2300      	movs	r3, #0
  400744:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
  400746:	6a43      	ldr	r3, [r0, #36]	; 0x24
  400748:	b11b      	cbz	r3, 400752 <usart_error+0x12>
  40074a:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
  40074e:	4610      	mov	r0, r2
  400750:	4798      	blx	r3
  400752:	bd08      	pop	{r3, pc}

00400754 <usart_fill_rx_buffer>:
{
  400754:	b538      	push	{r3, r4, r5, lr}
  400756:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
  400758:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
  40075c:	302c      	adds	r0, #44	; 0x2c
  40075e:	4b03      	ldr	r3, [pc, #12]	; (40076c <usart_fill_rx_buffer+0x18>)
  400760:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
  400762:	6a23      	ldr	r3, [r4, #32]
  400764:	b10b      	cbz	r3, 40076a <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
  400766:	4628      	mov	r0, r5
  400768:	4798      	blx	r3
  40076a:	bd38      	pop	{r3, r4, r5, pc}
  40076c:	00400a9d 	.word	0x00400a9d

00400770 <usart_async_write>:
{
  400770:	b570      	push	{r4, r5, r6, lr}
  400772:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
  400774:	4604      	mov	r4, r0
  400776:	460e      	mov	r6, r1
  400778:	2800      	cmp	r0, #0
  40077a:	bf18      	it	ne
  40077c:	2900      	cmpne	r1, #0
  40077e:	d002      	beq.n	400786 <usart_async_write+0x16>
  400780:	b9da      	cbnz	r2, 4007ba <usart_async_write+0x4a>
  400782:	2000      	movs	r0, #0
  400784:	e000      	b.n	400788 <usart_async_write+0x18>
  400786:	2000      	movs	r0, #0
  400788:	f240 123b 	movw	r2, #315	; 0x13b
  40078c:	490d      	ldr	r1, [pc, #52]	; (4007c4 <usart_async_write+0x54>)
  40078e:	4b0e      	ldr	r3, [pc, #56]	; (4007c8 <usart_async_write+0x58>)
  400790:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
  400792:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
  400796:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
  40079a:	429a      	cmp	r2, r3
  40079c:	d10f      	bne.n	4007be <usart_async_write+0x4e>
	descr->tx_buffer        = (uint8_t *)buf;
  40079e:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
  4007a0:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
  4007a4:	2300      	movs	r3, #0
  4007a6:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
  4007aa:	2301      	movs	r3, #1
  4007ac:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
  4007ae:	f104 0008 	add.w	r0, r4, #8
  4007b2:	4b06      	ldr	r3, [pc, #24]	; (4007cc <usart_async_write+0x5c>)
  4007b4:	4798      	blx	r3
	return (int32_t)length;
  4007b6:	4628      	mov	r0, r5
  4007b8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
  4007ba:	2001      	movs	r0, #1
  4007bc:	e7e4      	b.n	400788 <usart_async_write+0x18>
		return ERR_NO_RESOURCE;
  4007be:	f06f 001b 	mvn.w	r0, #27
}
  4007c2:	bd70      	pop	{r4, r5, r6, pc}
  4007c4:	00401498 	.word	0x00401498
  4007c8:	004009b5 	.word	0x004009b5
  4007cc:	0040123d 	.word	0x0040123d

004007d0 <usart_process_byte_sent>:
{
  4007d0:	b510      	push	{r4, lr}
  4007d2:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
  4007d4:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
  4007d6:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
  4007da:	4293      	cmp	r3, r2
  4007dc:	d009      	beq.n	4007f2 <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
  4007de:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4007e0:	1c59      	adds	r1, r3, #1
  4007e2:	8781      	strh	r1, [r0, #60]	; 0x3c
  4007e4:	5cd1      	ldrb	r1, [r2, r3]
  4007e6:	4b04      	ldr	r3, [pc, #16]	; (4007f8 <usart_process_byte_sent+0x28>)
  4007e8:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
  4007ea:	4620      	mov	r0, r4
  4007ec:	4b03      	ldr	r3, [pc, #12]	; (4007fc <usart_process_byte_sent+0x2c>)
  4007ee:	4798      	blx	r3
  4007f0:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
  4007f2:	4b03      	ldr	r3, [pc, #12]	; (400800 <usart_process_byte_sent+0x30>)
  4007f4:	4798      	blx	r3
  4007f6:	bd10      	pop	{r4, pc}
  4007f8:	00401219 	.word	0x00401219
  4007fc:	0040123d 	.word	0x0040123d
  400800:	00401261 	.word	0x00401261

00400804 <usart_async_read>:
{
  400804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400808:	b082      	sub	sp, #8
  40080a:	4617      	mov	r7, r2
	ASSERT(descr && buf && length);
  40080c:	4605      	mov	r5, r0
  40080e:	4688      	mov	r8, r1
  400810:	2800      	cmp	r0, #0
  400812:	bf18      	it	ne
  400814:	2900      	cmpne	r1, #0
  400816:	d002      	beq.n	40081e <usart_async_read+0x1a>
  400818:	b9a2      	cbnz	r2, 400844 <usart_async_read+0x40>
  40081a:	2000      	movs	r0, #0
  40081c:	e000      	b.n	400820 <usart_async_read+0x1c>
  40081e:	2000      	movs	r0, #0
  400820:	f44f 72ac 	mov.w	r2, #344	; 0x158
  400824:	4910      	ldr	r1, [pc, #64]	; (400868 <usart_async_read+0x64>)
  400826:	4b11      	ldr	r3, [pc, #68]	; (40086c <usart_async_read+0x68>)
  400828:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
  40082a:	a801      	add	r0, sp, #4
  40082c:	4b10      	ldr	r3, [pc, #64]	; (400870 <usart_async_read+0x6c>)
  40082e:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
  400830:	3534      	adds	r5, #52	; 0x34
  400832:	4628      	mov	r0, r5
  400834:	4b0f      	ldr	r3, [pc, #60]	; (400874 <usart_async_read+0x70>)
  400836:	4798      	blx	r3
  400838:	4606      	mov	r6, r0
	CRITICAL_SECTION_LEAVE()
  40083a:	a801      	add	r0, sp, #4
  40083c:	4b0e      	ldr	r3, [pc, #56]	; (400878 <usart_async_read+0x74>)
  40083e:	4798      	blx	r3
	uint16_t                       was_read = 0;
  400840:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
  400842:	e007      	b.n	400854 <usart_async_read+0x50>
	ASSERT(descr && buf && length);
  400844:	2001      	movs	r0, #1
  400846:	e7eb      	b.n	400820 <usart_async_read+0x1c>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
  400848:	3401      	adds	r4, #1
  40084a:	b2a4      	uxth	r4, r4
  40084c:	4441      	add	r1, r8
  40084e:	4628      	mov	r0, r5
  400850:	4b0a      	ldr	r3, [pc, #40]	; (40087c <usart_async_read+0x78>)
  400852:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
  400854:	4621      	mov	r1, r4
  400856:	42a6      	cmp	r6, r4
  400858:	d901      	bls.n	40085e <usart_async_read+0x5a>
  40085a:	42bc      	cmp	r4, r7
  40085c:	d3f4      	bcc.n	400848 <usart_async_read+0x44>
}
  40085e:	4620      	mov	r0, r4
  400860:	b002      	add	sp, #8
  400862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400866:	bf00      	nop
  400868:	00401498 	.word	0x00401498
  40086c:	004009b5 	.word	0x004009b5
  400870:	00400445 	.word	0x00400445
  400874:	00400add 	.word	0x00400add
  400878:	00400453 	.word	0x00400453
  40087c:	00400a59 	.word	0x00400a59

00400880 <usart_async_init>:
{
  400880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400882:	4615      	mov	r5, r2
  400884:	461e      	mov	r6, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
  400886:	4604      	mov	r4, r0
  400888:	460f      	mov	r7, r1
  40088a:	2800      	cmp	r0, #0
  40088c:	bf18      	it	ne
  40088e:	2900      	cmpne	r1, #0
  400890:	d008      	beq.n	4008a4 <usart_async_init+0x24>
  400892:	1c13      	adds	r3, r2, #0
  400894:	bf18      	it	ne
  400896:	2301      	movne	r3, #1
  400898:	b116      	cbz	r6, 4008a0 <usart_async_init+0x20>
  40089a:	b10b      	cbz	r3, 4008a0 <usart_async_init+0x20>
  40089c:	2001      	movs	r0, #1
  40089e:	e002      	b.n	4008a6 <usart_async_init+0x26>
  4008a0:	2000      	movs	r0, #0
  4008a2:	e000      	b.n	4008a6 <usart_async_init+0x26>
  4008a4:	2000      	movs	r0, #0
  4008a6:	223a      	movs	r2, #58	; 0x3a
  4008a8:	4910      	ldr	r1, [pc, #64]	; (4008ec <usart_async_init+0x6c>)
  4008aa:	4b11      	ldr	r3, [pc, #68]	; (4008f0 <usart_async_init+0x70>)
  4008ac:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
  4008ae:	4632      	mov	r2, r6
  4008b0:	4629      	mov	r1, r5
  4008b2:	f104 0034 	add.w	r0, r4, #52	; 0x34
  4008b6:	4b0f      	ldr	r3, [pc, #60]	; (4008f4 <usart_async_init+0x74>)
  4008b8:	4798      	blx	r3
  4008ba:	b9a0      	cbnz	r0, 4008e6 <usart_async_init+0x66>
	init_status = _usart_async_init(&descr->device, hw);
  4008bc:	4639      	mov	r1, r7
  4008be:	f104 0008 	add.w	r0, r4, #8
  4008c2:	4b0d      	ldr	r3, [pc, #52]	; (4008f8 <usart_async_init+0x78>)
  4008c4:	4798      	blx	r3
	if (init_status) {
  4008c6:	4603      	mov	r3, r0
  4008c8:	b958      	cbnz	r0, 4008e2 <usart_async_init+0x62>
	descr->io.read  = usart_async_read;
  4008ca:	4a0c      	ldr	r2, [pc, #48]	; (4008fc <usart_async_init+0x7c>)
  4008cc:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
  4008ce:	4a0c      	ldr	r2, [pc, #48]	; (400900 <usart_async_init+0x80>)
  4008d0:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
  4008d2:	4a0c      	ldr	r2, [pc, #48]	; (400904 <usart_async_init+0x84>)
  4008d4:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
  4008d6:	4a0c      	ldr	r2, [pc, #48]	; (400908 <usart_async_init+0x88>)
  4008d8:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
  4008da:	4a0c      	ldr	r2, [pc, #48]	; (40090c <usart_async_init+0x8c>)
  4008dc:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
  4008de:	4a0c      	ldr	r2, [pc, #48]	; (400910 <usart_async_init+0x90>)
  4008e0:	6162      	str	r2, [r4, #20]
}
  4008e2:	4618      	mov	r0, r3
  4008e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ERR_INVALID_ARG;
  4008e6:	f06f 030c 	mvn.w	r3, #12
  4008ea:	e7fa      	b.n	4008e2 <usart_async_init+0x62>
  4008ec:	00401498 	.word	0x00401498
  4008f0:	004009b5 	.word	0x004009b5
  4008f4:	00400a15 	.word	0x00400a15
  4008f8:	00401139 	.word	0x00401139
  4008fc:	00400805 	.word	0x00400805
  400900:	00400771 	.word	0x00400771
  400904:	004007d1 	.word	0x004007d1
  400908:	00400755 	.word	0x00400755
  40090c:	0040072d 	.word	0x0040072d
  400910:	00400741 	.word	0x00400741

00400914 <usart_async_enable>:
{
  400914:	b510      	push	{r4, lr}
	ASSERT(descr);
  400916:	4604      	mov	r4, r0
  400918:	2261      	movs	r2, #97	; 0x61
  40091a:	4906      	ldr	r1, [pc, #24]	; (400934 <usart_async_enable+0x20>)
  40091c:	3000      	adds	r0, #0
  40091e:	bf18      	it	ne
  400920:	2001      	movne	r0, #1
  400922:	4b05      	ldr	r3, [pc, #20]	; (400938 <usart_async_enable+0x24>)
  400924:	4798      	blx	r3
	_usart_async_enable(&descr->device);
  400926:	f104 0008 	add.w	r0, r4, #8
  40092a:	4b04      	ldr	r3, [pc, #16]	; (40093c <usart_async_enable+0x28>)
  40092c:	4798      	blx	r3
}
  40092e:	2000      	movs	r0, #0
  400930:	bd10      	pop	{r4, pc}
  400932:	bf00      	nop
  400934:	00401498 	.word	0x00401498
  400938:	004009b5 	.word	0x004009b5
  40093c:	004011e5 	.word	0x004011e5

00400940 <usart_async_register_callback>:
{
  400940:	b570      	push	{r4, r5, r6, lr}
  400942:	460c      	mov	r4, r1
  400944:	4616      	mov	r6, r2
	ASSERT(descr);
  400946:	4605      	mov	r5, r0
  400948:	2283      	movs	r2, #131	; 0x83
  40094a:	4917      	ldr	r1, [pc, #92]	; (4009a8 <usart_async_register_callback+0x68>)
  40094c:	3000      	adds	r0, #0
  40094e:	bf18      	it	ne
  400950:	2001      	movne	r0, #1
  400952:	4b16      	ldr	r3, [pc, #88]	; (4009ac <usart_async_register_callback+0x6c>)
  400954:	4798      	blx	r3
	switch (type) {
  400956:	2c01      	cmp	r4, #1
  400958:	d010      	beq.n	40097c <usart_async_register_callback+0x3c>
  40095a:	b124      	cbz	r4, 400966 <usart_async_register_callback+0x26>
  40095c:	2c02      	cmp	r4, #2
  40095e:	d018      	beq.n	400992 <usart_async_register_callback+0x52>
		return ERR_INVALID_ARG;
  400960:	f06f 000c 	mvn.w	r0, #12
}
  400964:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.rx_done = cb;
  400966:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
  400968:	1c32      	adds	r2, r6, #0
  40096a:	bf18      	it	ne
  40096c:	2201      	movne	r2, #1
  40096e:	2101      	movs	r1, #1
  400970:	f105 0008 	add.w	r0, r5, #8
  400974:	4b0e      	ldr	r3, [pc, #56]	; (4009b0 <usart_async_register_callback+0x70>)
  400976:	4798      	blx	r3
	return ERR_NONE;
  400978:	2000      	movs	r0, #0
		break;
  40097a:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
  40097c:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
  40097e:	1c32      	adds	r2, r6, #0
  400980:	bf18      	it	ne
  400982:	2201      	movne	r2, #1
  400984:	2102      	movs	r1, #2
  400986:	f105 0008 	add.w	r0, r5, #8
  40098a:	4b09      	ldr	r3, [pc, #36]	; (4009b0 <usart_async_register_callback+0x70>)
  40098c:	4798      	blx	r3
	return ERR_NONE;
  40098e:	2000      	movs	r0, #0
		break;
  400990:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.error = cb;
  400992:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
  400994:	1c32      	adds	r2, r6, #0
  400996:	bf18      	it	ne
  400998:	2201      	movne	r2, #1
  40099a:	2103      	movs	r1, #3
  40099c:	f105 0008 	add.w	r0, r5, #8
  4009a0:	4b03      	ldr	r3, [pc, #12]	; (4009b0 <usart_async_register_callback+0x70>)
  4009a2:	4798      	blx	r3
	return ERR_NONE;
  4009a4:	2000      	movs	r0, #0
		break;
  4009a6:	bd70      	pop	{r4, r5, r6, pc}
  4009a8:	00401498 	.word	0x00401498
  4009ac:	004009b5 	.word	0x004009b5
  4009b0:	00401289 	.word	0x00401289

004009b4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  4009b4:	b900      	cbnz	r0, 4009b8 <assert+0x4>
		__asm("BKPT #0");
  4009b6:	be00      	bkpt	0x0000
  4009b8:	4770      	bx	lr

004009ba <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  4009ba:	6803      	ldr	r3, [r0, #0]
  4009bc:	b11b      	cbz	r3, 4009c6 <is_list_element+0xc>
		if (it == element) {
  4009be:	428b      	cmp	r3, r1
  4009c0:	d003      	beq.n	4009ca <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  4009c2:	681b      	ldr	r3, [r3, #0]
  4009c4:	e7fa      	b.n	4009bc <is_list_element+0x2>
			return true;
		}
	}

	return false;
  4009c6:	2000      	movs	r0, #0
  4009c8:	4770      	bx	lr
			return true;
  4009ca:	2001      	movs	r0, #1
}
  4009cc:	4770      	bx	lr
	...

004009d0 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  4009d0:	b538      	push	{r3, r4, r5, lr}
  4009d2:	4604      	mov	r4, r0
  4009d4:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  4009d6:	4b06      	ldr	r3, [pc, #24]	; (4009f0 <list_insert_as_head+0x20>)
  4009d8:	4798      	blx	r3
  4009da:	f080 0001 	eor.w	r0, r0, #1
  4009de:	2239      	movs	r2, #57	; 0x39
  4009e0:	4904      	ldr	r1, [pc, #16]	; (4009f4 <list_insert_as_head+0x24>)
  4009e2:	b2c0      	uxtb	r0, r0
  4009e4:	4b04      	ldr	r3, [pc, #16]	; (4009f8 <list_insert_as_head+0x28>)
  4009e6:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  4009e8:	6823      	ldr	r3, [r4, #0]
  4009ea:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  4009ec:	6025      	str	r5, [r4, #0]
  4009ee:	bd38      	pop	{r3, r4, r5, pc}
  4009f0:	004009bb 	.word	0x004009bb
  4009f4:	004014b8 	.word	0x004014b8
  4009f8:	004009b5 	.word	0x004009b5

004009fc <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  4009fc:	6803      	ldr	r3, [r0, #0]
  4009fe:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  400a00:	6001      	str	r1, [r0, #0]
  400a02:	4770      	bx	lr

00400a04 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  400a04:	6803      	ldr	r3, [r0, #0]
  400a06:	b11b      	cbz	r3, 400a10 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  400a08:	681a      	ldr	r2, [r3, #0]
  400a0a:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  400a0c:	4618      	mov	r0, r3
  400a0e:	4770      	bx	lr
	}

	return NULL;
  400a10:	2000      	movs	r0, #0
}
  400a12:	4770      	bx	lr

00400a14 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
  400a14:	b570      	push	{r4, r5, r6, lr}
  400a16:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
  400a18:	4604      	mov	r4, r0
  400a1a:	460e      	mov	r6, r1
  400a1c:	2800      	cmp	r0, #0
  400a1e:	bf18      	it	ne
  400a20:	2900      	cmpne	r1, #0
  400a22:	d002      	beq.n	400a2a <ringbuffer_init+0x16>
  400a24:	b97a      	cbnz	r2, 400a46 <ringbuffer_init+0x32>
  400a26:	2000      	movs	r0, #0
  400a28:	e000      	b.n	400a2c <ringbuffer_init+0x18>
  400a2a:	2000      	movs	r0, #0
  400a2c:	2228      	movs	r2, #40	; 0x28
  400a2e:	4908      	ldr	r1, [pc, #32]	; (400a50 <ringbuffer_init+0x3c>)
  400a30:	4b08      	ldr	r3, [pc, #32]	; (400a54 <ringbuffer_init+0x40>)
  400a32:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
  400a34:	1e6b      	subs	r3, r5, #1
  400a36:	421d      	tst	r5, r3
  400a38:	d107      	bne.n	400a4a <ringbuffer_init+0x36>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
  400a3a:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
  400a3c:	2000      	movs	r0, #0
  400a3e:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
  400a40:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
  400a42:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
  400a44:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
  400a46:	2001      	movs	r0, #1
  400a48:	e7f0      	b.n	400a2c <ringbuffer_init+0x18>
		return ERR_INVALID_ARG;
  400a4a:	f06f 000c 	mvn.w	r0, #12
}
  400a4e:	bd70      	pop	{r4, r5, r6, pc}
  400a50:	004014d8 	.word	0x004014d8
  400a54:	004009b5 	.word	0x004009b5

00400a58 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
  400a58:	b538      	push	{r3, r4, r5, lr}
	ASSERT(rb && data);
  400a5a:	4604      	mov	r4, r0
  400a5c:	460d      	mov	r5, r1
  400a5e:	2800      	cmp	r0, #0
  400a60:	bf18      	it	ne
  400a62:	2900      	cmpne	r1, #0
  400a64:	bf14      	ite	ne
  400a66:	2001      	movne	r0, #1
  400a68:	2000      	moveq	r0, #0
  400a6a:	2240      	movs	r2, #64	; 0x40
  400a6c:	4909      	ldr	r1, [pc, #36]	; (400a94 <ringbuffer_get+0x3c>)
  400a6e:	4b0a      	ldr	r3, [pc, #40]	; (400a98 <ringbuffer_get+0x40>)
  400a70:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
  400a72:	68e2      	ldr	r2, [r4, #12]
  400a74:	68a3      	ldr	r3, [r4, #8]
  400a76:	429a      	cmp	r2, r3
  400a78:	d009      	beq.n	400a8e <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
  400a7a:	6822      	ldr	r2, [r4, #0]
  400a7c:	6861      	ldr	r1, [r4, #4]
  400a7e:	400b      	ands	r3, r1
  400a80:	5cd3      	ldrb	r3, [r2, r3]
  400a82:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
  400a84:	68a3      	ldr	r3, [r4, #8]
  400a86:	3301      	adds	r3, #1
  400a88:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
  400a8a:	2000      	movs	r0, #0
  400a8c:	bd38      	pop	{r3, r4, r5, pc}
	}

	return ERR_NOT_FOUND;
  400a8e:	f06f 0009 	mvn.w	r0, #9
}
  400a92:	bd38      	pop	{r3, r4, r5, pc}
  400a94:	004014d8 	.word	0x004014d8
  400a98:	004009b5 	.word	0x004009b5

00400a9c <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
  400a9c:	b538      	push	{r3, r4, r5, lr}
  400a9e:	460d      	mov	r5, r1
	ASSERT(rb);
  400aa0:	4604      	mov	r4, r0
  400aa2:	2251      	movs	r2, #81	; 0x51
  400aa4:	490b      	ldr	r1, [pc, #44]	; (400ad4 <ringbuffer_put+0x38>)
  400aa6:	3000      	adds	r0, #0
  400aa8:	bf18      	it	ne
  400aaa:	2001      	movne	r0, #1
  400aac:	4b0a      	ldr	r3, [pc, #40]	; (400ad8 <ringbuffer_put+0x3c>)
  400aae:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
  400ab0:	6822      	ldr	r2, [r4, #0]
  400ab2:	68e3      	ldr	r3, [r4, #12]
  400ab4:	6861      	ldr	r1, [r4, #4]
  400ab6:	400b      	ands	r3, r1
  400ab8:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
  400aba:	68e3      	ldr	r3, [r4, #12]
  400abc:	68a2      	ldr	r2, [r4, #8]
  400abe:	1a9a      	subs	r2, r3, r2
  400ac0:	6861      	ldr	r1, [r4, #4]
  400ac2:	428a      	cmp	r2, r1
  400ac4:	d901      	bls.n	400aca <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
  400ac6:	1a59      	subs	r1, r3, r1
  400ac8:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
  400aca:	3301      	adds	r3, #1
  400acc:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
  400ace:	2000      	movs	r0, #0
  400ad0:	bd38      	pop	{r3, r4, r5, pc}
  400ad2:	bf00      	nop
  400ad4:	004014d8 	.word	0x004014d8
  400ad8:	004009b5 	.word	0x004009b5

00400adc <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
  400adc:	b510      	push	{r4, lr}
	ASSERT(rb);
  400ade:	4604      	mov	r4, r0
  400ae0:	2267      	movs	r2, #103	; 0x67
  400ae2:	4905      	ldr	r1, [pc, #20]	; (400af8 <ringbuffer_num+0x1c>)
  400ae4:	3000      	adds	r0, #0
  400ae6:	bf18      	it	ne
  400ae8:	2001      	movne	r0, #1
  400aea:	4b04      	ldr	r3, [pc, #16]	; (400afc <ringbuffer_num+0x20>)
  400aec:	4798      	blx	r3

	return rb->write_index - rb->read_index;
  400aee:	68e0      	ldr	r0, [r4, #12]
  400af0:	68a3      	ldr	r3, [r4, #8]
}
  400af2:	1ac0      	subs	r0, r0, r3
  400af4:	bd10      	pop	{r4, pc}
  400af6:	bf00      	nop
  400af8:	004014d8 	.word	0x004014d8
  400afc:	004009b5 	.word	0x004009b5

00400b00 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  400b00:	b500      	push	{lr}
  400b02:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  400b04:	a801      	add	r0, sp, #4
  400b06:	4b0e      	ldr	r3, [pc, #56]	; (400b40 <_init_chip+0x40>)
  400b08:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  400b0a:	4a0e      	ldr	r2, [pc, #56]	; (400b44 <_init_chip+0x44>)
  400b0c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  400b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  400b18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400b1c:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  400b20:	a801      	add	r0, sp, #4
  400b22:	4b09      	ldr	r3, [pc, #36]	; (400b48 <_init_chip+0x48>)
  400b24:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  400b26:	4a09      	ldr	r2, [pc, #36]	; (400b4c <_init_chip+0x4c>)
  400b28:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  400b2a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  400b2e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  400b32:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  400b34:	4b06      	ldr	r3, [pc, #24]	; (400b50 <_init_chip+0x50>)
  400b36:	4798      	blx	r3
}
  400b38:	b003      	add	sp, #12
  400b3a:	f85d fb04 	ldr.w	pc, [sp], #4
  400b3e:	bf00      	nop
  400b40:	00400445 	.word	0x00400445
  400b44:	e000ed00 	.word	0xe000ed00
  400b48:	00400453 	.word	0x00400453
  400b4c:	400e0c00 	.word	0x400e0c00
  400b50:	00400bf1 	.word	0x00400bf1

00400b54 <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  400b54:	490e      	ldr	r1, [pc, #56]	; (400b90 <_pmc_init_sources+0x3c>)
  400b56:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  400b58:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  400b5c:	4b0d      	ldr	r3, [pc, #52]	; (400b94 <_pmc_init_sources+0x40>)
  400b5e:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  400b60:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  400b62:	4b0b      	ldr	r3, [pc, #44]	; (400b90 <_pmc_init_sources+0x3c>)
  400b64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  400b66:	f013 0f01 	tst.w	r3, #1
  400b6a:	d0fa      	beq.n	400b62 <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  400b6c:	4b08      	ldr	r3, [pc, #32]	; (400b90 <_pmc_init_sources+0x3c>)
  400b6e:	6a19      	ldr	r1, [r3, #32]
  400b70:	4a09      	ldr	r2, [pc, #36]	; (400b98 <_pmc_init_sources+0x44>)
  400b72:	430a      	orrs	r2, r1
  400b74:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  400b76:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  400b78:	4a08      	ldr	r2, [pc, #32]	; (400b9c <_pmc_init_sources+0x48>)
  400b7a:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  400b7c:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  400b7e:	4a08      	ldr	r2, [pc, #32]	; (400ba0 <_pmc_init_sources+0x4c>)
  400b80:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  400b82:	4b03      	ldr	r3, [pc, #12]	; (400b90 <_pmc_init_sources+0x3c>)
  400b84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  400b86:	f013 0f02 	tst.w	r3, #2
  400b8a:	d0fa      	beq.n	400b82 <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  400b8c:	4770      	bx	lr
  400b8e:	bf00      	nop
  400b90:	400e0600 	.word	0x400e0600
  400b94:	00373e01 	.word	0x00373e01
  400b98:	01370000 	.word	0x01370000
  400b9c:	f800ffff 	.word	0xf800ffff
  400ba0:	20183f01 	.word	0x20183f01

00400ba4 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400ba4:	4a11      	ldr	r2, [pc, #68]	; (400bec <_pmc_init_master_clock+0x48>)
  400ba6:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  400ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  400bac:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400bae:	4b0f      	ldr	r3, [pc, #60]	; (400bec <_pmc_init_master_clock+0x48>)
  400bb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400bb2:	f013 0f08 	tst.w	r3, #8
  400bb6:	d0fa      	beq.n	400bae <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400bb8:	4a0c      	ldr	r2, [pc, #48]	; (400bec <_pmc_init_master_clock+0x48>)
  400bba:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  400bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  400bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  400bc4:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400bc6:	4b09      	ldr	r3, [pc, #36]	; (400bec <_pmc_init_master_clock+0x48>)
  400bc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400bca:	f013 0f08 	tst.w	r3, #8
  400bce:	d0fa      	beq.n	400bc6 <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400bd0:	4a06      	ldr	r2, [pc, #24]	; (400bec <_pmc_init_master_clock+0x48>)
  400bd2:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  400bd4:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  400bd8:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  400bdc:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400bde:	4b03      	ldr	r3, [pc, #12]	; (400bec <_pmc_init_master_clock+0x48>)
  400be0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400be2:	f013 0f08 	tst.w	r3, #8
  400be6:	d0fa      	beq.n	400bde <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  400be8:	4770      	bx	lr
  400bea:	bf00      	nop
  400bec:	400e0600 	.word	0x400e0600

00400bf0 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  400bf0:	b508      	push	{r3, lr}
	_pmc_init_sources();
  400bf2:	4b02      	ldr	r3, [pc, #8]	; (400bfc <_pmc_init+0xc>)
  400bf4:	4798      	blx	r3
	_pmc_init_master_clock();
  400bf6:	4b02      	ldr	r3, [pc, #8]	; (400c00 <_pmc_init+0x10>)
  400bf8:	4798      	blx	r3
  400bfa:	bd08      	pop	{r3, pc}
  400bfc:	00400b55 	.word	0x00400b55
  400c00:	00400ba5 	.word	0x00400ba5

00400c04 <_spi_sync_enable>:
}

static inline void hri_spi_write_CR_reg(const void *const hw, hri_spi_cr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_CR = data;
  400c04:	2301      	movs	r3, #1
  400c06:	6003      	str	r3, [r0, #0]
static int32_t _spi_sync_enable(void *const hw)
{
	hri_spi_write_CR_reg(hw, SPI_CR_SPIEN);

	return ERR_NONE;
}
  400c08:	2000      	movs	r0, #0
  400c0a:	4770      	bx	lr

00400c0c <_spi_get_hardware_index>:
 * \brief Retrieve ordinal number of the given SPI hardware instance
 */
static uint8_t _spi_get_hardware_index(const void *const hw)
{

	uint8_t index = ((uint32_t)hw - (uint32_t)SPI0) >> 16;
  400c0c:	4b04      	ldr	r3, [pc, #16]	; (400c20 <_spi_get_hardware_index+0x14>)
  400c0e:	4403      	add	r3, r0
  400c10:	f3c3 4307 	ubfx	r3, r3, #16, #8

	if (index == 5) {
  400c14:	2b05      	cmp	r3, #5
  400c16:	d001      	beq.n	400c1c <_spi_get_hardware_index+0x10>
		return 1;
	} else {
		return 0;
  400c18:	2000      	movs	r0, #0
	}
}
  400c1a:	4770      	bx	lr
		return 1;
  400c1c:	2001      	movs	r0, #1
  400c1e:	4770      	bx	lr
  400c20:	bfff8000 	.word	0xbfff8000

00400c24 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
  400c24:	b570      	push	{r4, r5, r6, lr}
  400c26:	4606      	mov	r6, r0
  400c28:	460c      	mov	r4, r1
	uint8_t n = _spi_get_hardware_index((const void *)hw_addr);
  400c2a:	4608      	mov	r0, r1
  400c2c:	4b20      	ldr	r3, [pc, #128]	; (400cb0 <_spi_m_sync_init+0x8c>)
  400c2e:	4798      	blx	r3
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  400c30:	2300      	movs	r3, #0
  400c32:	b33b      	cbz	r3, 400c84 <_spi_m_sync_init+0x60>
	return NULL;
  400c34:	2500      	movs	r5, #0
	const struct spi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
  400c36:	f44f 729a 	mov.w	r2, #308	; 0x134
  400c3a:	491e      	ldr	r1, [pc, #120]	; (400cb4 <_spi_m_sync_init+0x90>)
  400c3c:	2e00      	cmp	r6, #0
  400c3e:	bf18      	it	ne
  400c40:	2c00      	cmpne	r4, #0
  400c42:	bf14      	ite	ne
  400c44:	2001      	movne	r0, #1
  400c46:	2000      	moveq	r0, #0
  400c48:	4b1b      	ldr	r3, [pc, #108]	; (400cb8 <_spi_m_sync_init+0x94>)
  400c4a:	4798      	blx	r3

	if (regs == NULL) {
  400c4c:	b355      	cbz	r5, 400ca4 <_spi_m_sync_init+0x80>
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  400c4e:	6923      	ldr	r3, [r4, #16]
		return ERR_INVALID_ARG;
	}

	if (hri_spi_get_SR_SPIENS_bit(hw)) {
  400c50:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400c54:	d129      	bne.n	400caa <_spi_m_sync_init+0x86>
	((Spi *)hw)->SPI_CR = data;
  400c56:	2380      	movs	r3, #128	; 0x80
  400c58:	6023      	str	r3, [r4, #0]
		return ERR_DENIED;
	}
	hri_spi_write_CR_reg(hw, SPI_CR_SWRST);
	dev->prvt = hw;
  400c5a:	6034      	str	r4, [r6, #0]
	hri_spi_write_CR_reg(hw, (regs->cr & ~(SPI_CR_SPIEN | SPI_CR_SPIDIS | SPI_CR_SWRST | SPI_CR_LASTXFER)));
  400c5c:	686a      	ldr	r2, [r5, #4]
  400c5e:	4b17      	ldr	r3, [pc, #92]	; (400cbc <_spi_m_sync_init+0x98>)
  400c60:	4013      	ands	r3, r2
  400c62:	6023      	str	r3, [r4, #0]
	hri_spi_write_MR_reg(hw, ((regs->mr | SPI_MR_PCS(0x0E) | SPI_MR_MODFDIS) & ~SPI_MR_LLB));
  400c64:	68ab      	ldr	r3, [r5, #8]
  400c66:	4a16      	ldr	r2, [pc, #88]	; (400cc0 <_spi_m_sync_init+0x9c>)
  400c68:	401a      	ands	r2, r3
  400c6a:	4b16      	ldr	r3, [pc, #88]	; (400cc4 <_spi_m_sync_init+0xa0>)
  400c6c:	4313      	orrs	r3, r2
	((Spi *)hw)->SPI_MR = data;
  400c6e:	6063      	str	r3, [r4, #4]
	hri_spi_write_CSR_reg(hw, 0, regs->csr);
  400c70:	68eb      	ldr	r3, [r5, #12]
	((Spi *)hw)->SPI_CSR[index] = data;
  400c72:	6323      	str	r3, [r4, #48]	; 0x30

	dev->dummy_byte = regs->dummy_byte;
  400c74:	8a2b      	ldrh	r3, [r5, #16]
  400c76:	80f3      	strh	r3, [r6, #6]
	dev->char_size  = regs->csr & SPI_CSR_BITS_Msk;
  400c78:	68eb      	ldr	r3, [r5, #12]
  400c7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  400c7e:	7133      	strb	r3, [r6, #4]

	return ERR_NONE;
  400c80:	2000      	movs	r0, #0
  400c82:	bd70      	pop	{r4, r5, r6, pc}
		if (spi_regs[i].number == n) {
  400c84:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  400c88:	008a      	lsls	r2, r1, #2
  400c8a:	490f      	ldr	r1, [pc, #60]	; (400cc8 <_spi_m_sync_init+0xa4>)
  400c8c:	5c8a      	ldrb	r2, [r1, r2]
  400c8e:	4290      	cmp	r0, r2
  400c90:	d002      	beq.n	400c98 <_spi_m_sync_init+0x74>
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  400c92:	3301      	adds	r3, #1
  400c94:	b2db      	uxtb	r3, r3
  400c96:	e7cc      	b.n	400c32 <_spi_m_sync_init+0xe>
			return &spi_regs[i];
  400c98:	eb03 0583 	add.w	r5, r3, r3, lsl #2
  400c9c:	00ab      	lsls	r3, r5, #2
  400c9e:	460d      	mov	r5, r1
  400ca0:	441d      	add	r5, r3
  400ca2:	e7c8      	b.n	400c36 <_spi_m_sync_init+0x12>
		return ERR_INVALID_ARG;
  400ca4:	f06f 000c 	mvn.w	r0, #12
  400ca8:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
  400caa:	f06f 0010 	mvn.w	r0, #16
}
  400cae:	bd70      	pop	{r4, r5, r6, pc}
  400cb0:	00400c0d 	.word	0x00400c0d
  400cb4:	00401510 	.word	0x00401510
  400cb8:	004009b5 	.word	0x004009b5
  400cbc:	feffff7c 	.word	0xfeffff7c
  400cc0:	fff1ff6f 	.word	0xfff1ff6f
  400cc4:	000e0010 	.word	0x000e0010
  400cc8:	004014fc 	.word	0x004014fc

00400ccc <_spi_m_sync_enable>:

	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
  400ccc:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
  400cce:	4604      	mov	r4, r0
  400cd0:	b168      	cbz	r0, 400cee <_spi_m_sync_enable+0x22>
  400cd2:	6803      	ldr	r3, [r0, #0]
  400cd4:	b14b      	cbz	r3, 400cea <_spi_m_sync_enable+0x1e>
  400cd6:	2001      	movs	r0, #1
  400cd8:	f44f 72b9 	mov.w	r2, #370	; 0x172
  400cdc:	4905      	ldr	r1, [pc, #20]	; (400cf4 <_spi_m_sync_enable+0x28>)
  400cde:	4b06      	ldr	r3, [pc, #24]	; (400cf8 <_spi_m_sync_enable+0x2c>)
  400ce0:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
  400ce2:	6820      	ldr	r0, [r4, #0]
  400ce4:	4b05      	ldr	r3, [pc, #20]	; (400cfc <_spi_m_sync_enable+0x30>)
  400ce6:	4798      	blx	r3
}
  400ce8:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
  400cea:	2000      	movs	r0, #0
  400cec:	e7f4      	b.n	400cd8 <_spi_m_sync_enable+0xc>
  400cee:	2000      	movs	r0, #0
  400cf0:	e7f2      	b.n	400cd8 <_spi_m_sync_enable+0xc>
  400cf2:	bf00      	nop
  400cf4:	00401510 	.word	0x00401510
  400cf8:	004009b5 	.word	0x004009b5
  400cfc:	00400c05 	.word	0x00400c05

00400d00 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
  400d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400d04:	b086      	sub	sp, #24
  400d06:	4607      	mov	r7, r0
  400d08:	460d      	mov	r5, r1
	void *                 hw   = dev->prvt;
  400d0a:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
  400d0c:	680b      	ldr	r3, [r1, #0]
  400d0e:	9301      	str	r3, [sp, #4]
  400d10:	684b      	ldr	r3, [r1, #4]
  400d12:	9302      	str	r3, [sp, #8]
  400d14:	2300      	movs	r3, #0
  400d16:	9303      	str	r3, [sp, #12]
  400d18:	9304      	str	r3, [sp, #16]
  400d1a:	7903      	ldrb	r3, [r0, #4]
  400d1c:	f88d 3014 	strb.w	r3, [sp, #20]

	ASSERT(dev && hw);
  400d20:	1c26      	adds	r6, r4, #0
  400d22:	bf18      	it	ne
  400d24:	2601      	movne	r6, #1
  400d26:	f240 2231 	movw	r2, #561	; 0x231
  400d2a:	4933      	ldr	r1, [pc, #204]	; (400df8 <_spi_m_sync_trans+0xf8>)
  400d2c:	2800      	cmp	r0, #0
  400d2e:	bf0c      	ite	eq
  400d30:	2000      	moveq	r0, #0
  400d32:	f006 0001 	andne.w	r0, r6, #1
  400d36:	4b31      	ldr	r3, [pc, #196]	; (400dfc <_spi_m_sync_trans+0xfc>)
  400d38:	4798      	blx	r3
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  400d3a:	6923      	ldr	r3, [r4, #16]

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_spi_get_SR_SPIENS_bit(hw)) {
  400d3c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400d40:	d122      	bne.n	400d88 <_spi_m_sync_trans+0x88>
		return ERR_NOT_INITIALIZED;
  400d42:	f06f 0013 	mvn.w	r0, #19
  400d46:	e053      	b.n	400df0 <_spi_m_sync_trans+0xf0>
		return false;
  400d48:	2300      	movs	r3, #0
  400d4a:	e035      	b.n	400db8 <_spi_m_sync_trans+0xb8>
			data |= (*ctrl->txbuf) << 8;
  400d4c:	7850      	ldrb	r0, [r2, #1]
  400d4e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
			ctrl->txbuf++;
  400d52:	3202      	adds	r2, #2
  400d54:	9201      	str	r2, [sp, #4]
	ctrl->txcnt++;
  400d56:	3301      	adds	r3, #1
  400d58:	9303      	str	r3, [sp, #12]
}

static inline void hri_spi_write_TDR_reg(const void *const hw, hri_spi_tdr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_TDR = data;
  400d5a:	60e1      	str	r1, [r4, #12]
	return ((Spi *)hw)->SPI_SR;
  400d5c:	f8d4 8010 	ldr.w	r8, [r4, #16]
	ASSERT(hw);
  400d60:	f240 2222 	movw	r2, #546	; 0x222
  400d64:	4924      	ldr	r1, [pc, #144]	; (400df8 <_spi_m_sync_trans+0xf8>)
  400d66:	4630      	mov	r0, r6
  400d68:	4b24      	ldr	r3, [pc, #144]	; (400dfc <_spi_m_sync_trans+0xfc>)
  400d6a:	4798      	blx	r3
	if (SPI_SR_OVRES & iflag) {
  400d6c:	f018 0f08 	tst.w	r8, #8
  400d70:	d038      	beq.n	400de4 <_spi_m_sync_trans+0xe4>
		return ERR_OVERFLOW;
  400d72:	f06f 0012 	mvn.w	r0, #18
			if (ctrl.rxcnt >= ctrl.txcnt) {
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
			}
		}
		rc = _spi_err_check(hri_spi_read_SR_reg(hw), hw);
		if (rc < 0) {
  400d76:	2800      	cmp	r0, #0
  400d78:	db36      	blt.n	400de8 <_spi_m_sync_trans+0xe8>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
  400d7a:	9803      	ldr	r0, [sp, #12]
  400d7c:	68ab      	ldr	r3, [r5, #8]
  400d7e:	4298      	cmp	r0, r3
  400d80:	d302      	bcc.n	400d88 <_spi_m_sync_trans+0x88>
  400d82:	9a04      	ldr	r2, [sp, #16]
  400d84:	4293      	cmp	r3, r2
  400d86:	d92f      	bls.n	400de8 <_spi_m_sync_trans+0xe8>
  400d88:	6923      	ldr	r3, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_RDRF)) {
  400d8a:	f013 0f01 	tst.w	r3, #1
  400d8e:	d0db      	beq.n	400d48 <_spi_m_sync_trans+0x48>
	return (((Spi *)hw)->SPI_RDR & SPI_RDR_RD_Msk) >> SPI_RDR_RD_Pos;
  400d90:	68a3      	ldr	r3, [r4, #8]
  400d92:	b29b      	uxth	r3, r3
	if (ctrl->rxbuf) {
  400d94:	9a02      	ldr	r2, [sp, #8]
  400d96:	b15a      	cbz	r2, 400db0 <_spi_m_sync_trans+0xb0>
		*ctrl->rxbuf++ = (uint8_t)data;
  400d98:	1c51      	adds	r1, r2, #1
  400d9a:	9102      	str	r1, [sp, #8]
  400d9c:	7013      	strb	r3, [r2, #0]
		if (ctrl->char_size > 1) {
  400d9e:	f89d 2014 	ldrb.w	r2, [sp, #20]
  400da2:	2a01      	cmp	r2, #1
  400da4:	d904      	bls.n	400db0 <_spi_m_sync_trans+0xb0>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
  400da6:	460a      	mov	r2, r1
  400da8:	3101      	adds	r1, #1
  400daa:	9102      	str	r1, [sp, #8]
  400dac:	0a1b      	lsrs	r3, r3, #8
  400dae:	7013      	strb	r3, [r2, #0]
	ctrl->rxcnt++;
  400db0:	9b04      	ldr	r3, [sp, #16]
  400db2:	3301      	adds	r3, #1
  400db4:	9304      	str	r3, [sp, #16]
	return true;
  400db6:	2301      	movs	r3, #1
		if (!_spi_rx_check_and_receive(hw, &ctrl)) {
  400db8:	2b00      	cmp	r3, #0
  400dba:	d1cf      	bne.n	400d5c <_spi_m_sync_trans+0x5c>
			if (ctrl.rxcnt >= ctrl.txcnt) {
  400dbc:	9b03      	ldr	r3, [sp, #12]
  400dbe:	9a04      	ldr	r2, [sp, #16]
  400dc0:	429a      	cmp	r2, r3
  400dc2:	d3cb      	bcc.n	400d5c <_spi_m_sync_trans+0x5c>
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
  400dc4:	88f9      	ldrh	r1, [r7, #6]
	return ((Spi *)hw)->SPI_SR;
  400dc6:	6922      	ldr	r2, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_TDRE)) {
  400dc8:	f012 0f02 	tst.w	r2, #2
  400dcc:	d0c6      	beq.n	400d5c <_spi_m_sync_trans+0x5c>
	if (ctrl->txbuf) {
  400dce:	9a01      	ldr	r2, [sp, #4]
  400dd0:	2a00      	cmp	r2, #0
  400dd2:	d0c0      	beq.n	400d56 <_spi_m_sync_trans+0x56>
		data = *ctrl->txbuf++;
  400dd4:	1c51      	adds	r1, r2, #1
  400dd6:	9101      	str	r1, [sp, #4]
  400dd8:	7811      	ldrb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
  400dda:	f89d 0014 	ldrb.w	r0, [sp, #20]
  400dde:	2801      	cmp	r0, #1
  400de0:	d8b4      	bhi.n	400d4c <_spi_m_sync_trans+0x4c>
  400de2:	e7b8      	b.n	400d56 <_spi_m_sync_trans+0x56>
	return ERR_NONE;
  400de4:	2000      	movs	r0, #0
  400de6:	e7c6      	b.n	400d76 <_spi_m_sync_trans+0x76>
	tmp = ((Spi *)hw)->SPI_SR;
  400de8:	6923      	ldr	r3, [r4, #16]
	while (!(hri_spi_get_SR_reg(hw, SPI_SR_TXEMPTY))) {
  400dea:	f413 7f00 	tst.w	r3, #512	; 0x200
  400dee:	d0fb      	beq.n	400de8 <_spi_m_sync_trans+0xe8>

	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
  400df0:	b006      	add	sp, #24
  400df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400df6:	bf00      	nop
  400df8:	00401510 	.word	0x00401510
  400dfc:	004009b5 	.word	0x004009b5

00400e00 <_spi_get_spi_m_sync>:
 * \brief Retrieve usart sync helper functions
 */
void *_spi_get_spi_m_sync(void)
{
	return (void *)NULL;
}
  400e00:	2000      	movs	r0, #0
  400e02:	4770      	bx	lr

00400e04 <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  400e04:	2300      	movs	r3, #0
  400e06:	b13b      	cbz	r3, 400e18 <get_cfg+0x14>
		if (_tcs[i].hw == hw) {
			return &(_tcs[i]);
		}
	}

	return NULL;
  400e08:	2000      	movs	r0, #0
  400e0a:	4770      	bx	lr
			return &(_tcs[i]);
  400e0c:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  400e10:	00a3      	lsls	r3, r4, #2
  400e12:	4608      	mov	r0, r1
  400e14:	4418      	add	r0, r3
  400e16:	e00c      	b.n	400e32 <get_cfg+0x2e>
{
  400e18:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  400e1a:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  400e1e:	008a      	lsls	r2, r1, #2
  400e20:	4905      	ldr	r1, [pc, #20]	; (400e38 <get_cfg+0x34>)
  400e22:	588a      	ldr	r2, [r1, r2]
  400e24:	4282      	cmp	r2, r0
  400e26:	d0f1      	beq.n	400e0c <get_cfg+0x8>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  400e28:	3301      	adds	r3, #1
  400e2a:	b2db      	uxtb	r3, r3
  400e2c:	2b00      	cmp	r3, #0
  400e2e:	d0f4      	beq.n	400e1a <get_cfg+0x16>
	return NULL;
  400e30:	2000      	movs	r0, #0
}
  400e32:	f85d 4b04 	ldr.w	r4, [sp], #4
  400e36:	4770      	bx	lr
  400e38:	20400000 	.word	0x20400000

00400e3c <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  400e3c:	4b03      	ldr	r3, [pc, #12]	; (400e4c <_tc_init_irq_param+0x10>)
  400e3e:	4298      	cmp	r0, r3
  400e40:	d000      	beq.n	400e44 <_tc_init_irq_param+0x8>
  400e42:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  400e44:	4b02      	ldr	r3, [pc, #8]	; (400e50 <_tc_init_irq_param+0x14>)
  400e46:	6019      	str	r1, [r3, #0]
	}
}
  400e48:	e7fb      	b.n	400e42 <_tc_init_irq_param+0x6>
  400e4a:	bf00      	nop
  400e4c:	4000c000 	.word	0x4000c000
  400e50:	20400050 	.word	0x20400050

00400e54 <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  400e54:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  400e56:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  400e58:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  400e5a:	f013 0f10 	tst.w	r3, #16
  400e5e:	d100      	bne.n	400e62 <tc_interrupt_handler+0xe>
  400e60:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  400e62:	6803      	ldr	r3, [r0, #0]
  400e64:	4798      	blx	r3
	}
}
  400e66:	e7fb      	b.n	400e60 <tc_interrupt_handler+0xc>

00400e68 <_timer_init>:
{
  400e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400e6a:	4607      	mov	r7, r0
  400e6c:	460c      	mov	r4, r1
	struct tc_configuration *cfg     = get_cfg(hw);
  400e6e:	4608      	mov	r0, r1
  400e70:	4b27      	ldr	r3, [pc, #156]	; (400f10 <_timer_init+0xa8>)
  400e72:	4798      	blx	r3
  400e74:	4605      	mov	r5, r0
	uint32_t                 ch_mode = cfg->channel_mode;
  400e76:	6886      	ldr	r6, [r0, #8]
	device->hw = hw;
  400e78:	60fc      	str	r4, [r7, #12]
	ASSERT(ARRAY_SIZE(_tcs));
  400e7a:	2291      	movs	r2, #145	; 0x91
  400e7c:	4925      	ldr	r1, [pc, #148]	; (400f14 <_timer_init+0xac>)
  400e7e:	2001      	movs	r0, #1
  400e80:	4b25      	ldr	r3, [pc, #148]	; (400f18 <_timer_init+0xb0>)
  400e82:	4798      	blx	r3
	if (ch_mode & TC_CMR_WAVE) {
  400e84:	f416 4f00 	tst.w	r6, #32768	; 0x8000
  400e88:	d001      	beq.n	400e8e <_timer_init+0x26>
		ch_mode |= (0x02 << 13) | (0x01 << 16) | (0x02 << 18);
  400e8a:	f446 2614 	orr.w	r6, r6, #606208	; 0x94000
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  400e8e:	6066      	str	r6, [r4, #4]
	hri_tc_write_RA_reg(hw, 0, cfg->ra);
  400e90:	696b      	ldr	r3, [r5, #20]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  400e92:	6163      	str	r3, [r4, #20]
	hri_tc_write_RB_reg(hw, 0, cfg->rb);
  400e94:	69ab      	ldr	r3, [r5, #24]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  400e96:	61a3      	str	r3, [r4, #24]
	hri_tc_write_EMR_reg(hw, 0, cfg->ext_mode);
  400e98:	68eb      	ldr	r3, [r5, #12]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  400e9a:	6323      	str	r3, [r4, #48]	; 0x30
	hri_tc_write_RC_reg(hw, 0, cfg->rc);
  400e9c:	69eb      	ldr	r3, [r5, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  400e9e:	61e3      	str	r3, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  400ea0:	2310      	movs	r3, #16
  400ea2:	6263      	str	r3, [r4, #36]	; 0x24
	hri_tc_write_FMR_reg(hw, cfg->fmr);
  400ea4:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  400ea6:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	_tc_init_irq_param(hw, device);
  400eaa:	4639      	mov	r1, r7
  400eac:	4620      	mov	r0, r4
  400eae:	4b1b      	ldr	r3, [pc, #108]	; (400f1c <_timer_init+0xb4>)
  400eb0:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  400eb2:	f995 3004 	ldrsb.w	r3, [r5, #4]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  400eb6:	2b00      	cmp	r3, #0
  400eb8:	db0d      	blt.n	400ed6 <_timer_init+0x6e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400eba:	095a      	lsrs	r2, r3, #5
  400ebc:	f003 031f 	and.w	r3, r3, #31
  400ec0:	2101      	movs	r1, #1
  400ec2:	fa01 f303 	lsl.w	r3, r1, r3
  400ec6:	3220      	adds	r2, #32
  400ec8:	4915      	ldr	r1, [pc, #84]	; (400f20 <_timer_init+0xb8>)
  400eca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  400ece:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400ed2:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  400ed6:	f995 3004 	ldrsb.w	r3, [r5, #4]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  400eda:	2b00      	cmp	r3, #0
  400edc:	db09      	blt.n	400ef2 <_timer_init+0x8a>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400ede:	095a      	lsrs	r2, r3, #5
  400ee0:	f003 031f 	and.w	r3, r3, #31
  400ee4:	2101      	movs	r1, #1
  400ee6:	fa01 f303 	lsl.w	r3, r1, r3
  400eea:	3260      	adds	r2, #96	; 0x60
  400eec:	490c      	ldr	r1, [pc, #48]	; (400f20 <_timer_init+0xb8>)
  400eee:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  400ef2:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  400ef6:	2b00      	cmp	r3, #0
  400ef8:	db08      	blt.n	400f0c <_timer_init+0xa4>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400efa:	0959      	lsrs	r1, r3, #5
  400efc:	f003 031f 	and.w	r3, r3, #31
  400f00:	2201      	movs	r2, #1
  400f02:	fa02 f303 	lsl.w	r3, r2, r3
  400f06:	4a06      	ldr	r2, [pc, #24]	; (400f20 <_timer_init+0xb8>)
  400f08:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  400f0c:	2000      	movs	r0, #0
  400f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400f10:	00400e05 	.word	0x00400e05
  400f14:	00401528 	.word	0x00401528
  400f18:	004009b5 	.word	0x004009b5
  400f1c:	00400e3d 	.word	0x00400e3d
  400f20:	e000e100 	.word	0xe000e100

00400f24 <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  400f24:	2000      	movs	r0, #0
  400f26:	4770      	bx	lr

00400f28 <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  400f28:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  400f2a:	4b02      	ldr	r3, [pc, #8]	; (400f34 <TC0_Handler+0xc>)
  400f2c:	6818      	ldr	r0, [r3, #0]
  400f2e:	4b02      	ldr	r3, [pc, #8]	; (400f38 <TC0_Handler+0x10>)
  400f30:	4798      	blx	r3
  400f32:	bd08      	pop	{r3, pc}
  400f34:	20400050 	.word	0x20400050
  400f38:	00400e55 	.word	0x00400e55

00400f3c <_rand_sync_init>:
#include <err_codes.h>
#include <hpl_rand_sync.h>
#include <utils_assert.h>

int32_t _rand_sync_init(struct _rand_sync_dev *const dev, void *const hw)
{
  400f3c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(dev && hw);
  400f3e:	4604      	mov	r4, r0
  400f40:	460d      	mov	r5, r1
  400f42:	2800      	cmp	r0, #0
  400f44:	bf18      	it	ne
  400f46:	2900      	cmpne	r1, #0
  400f48:	bf14      	ite	ne
  400f4a:	2001      	movne	r0, #1
  400f4c:	2000      	moveq	r0, #0
  400f4e:	2228      	movs	r2, #40	; 0x28
  400f50:	4903      	ldr	r1, [pc, #12]	; (400f60 <_rand_sync_init+0x24>)
  400f52:	4b04      	ldr	r3, [pc, #16]	; (400f64 <_rand_sync_init+0x28>)
  400f54:	4798      	blx	r3

	dev->prvt   = hw;
  400f56:	6025      	str	r5, [r4, #0]
	dev->n_bits = 32;
  400f58:	2320      	movs	r3, #32
  400f5a:	7123      	strb	r3, [r4, #4]

	return ERR_NONE;
}
  400f5c:	2000      	movs	r0, #0
  400f5e:	bd38      	pop	{r3, r4, r5, pc}
  400f60:	0040153c 	.word	0x0040153c
  400f64:	004009b5 	.word	0x004009b5

00400f68 <_usart_init_irq_param>:
/**
 * \brief Init irq param with the given usart hardware instance
 */
static void _usart_init_irq_param(const void *const hw, struct _usart_async_device *dev)
{
	if (hw == USART1) {
  400f68:	4b03      	ldr	r3, [pc, #12]	; (400f78 <_usart_init_irq_param+0x10>)
  400f6a:	4298      	cmp	r0, r3
  400f6c:	d000      	beq.n	400f70 <_usart_init_irq_param+0x8>
  400f6e:	4770      	bx	lr
		_usart1_dev = dev;
  400f70:	4b02      	ldr	r3, [pc, #8]	; (400f7c <_usart_init_irq_param+0x14>)
  400f72:	6019      	str	r1, [r3, #0]
	}
}
  400f74:	e7fb      	b.n	400f6e <_usart_init_irq_param+0x6>
  400f76:	bf00      	nop
  400f78:	40028000 	.word	0x40028000
  400f7c:	20400054 	.word	0x20400054

00400f80 <_usart_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given usart hardware instance
 */
static uint8_t _usart_get_hardware_index(const void *const hw)
{
  400f80:	b510      	push	{r4, lr}
	ASSERT(hw);
  400f82:	4604      	mov	r4, r0
  400f84:	f240 222f 	movw	r2, #559	; 0x22f
  400f88:	4905      	ldr	r1, [pc, #20]	; (400fa0 <_usart_get_hardware_index+0x20>)
  400f8a:	3000      	adds	r0, #0
  400f8c:	bf18      	it	ne
  400f8e:	2001      	movne	r0, #1
  400f90:	4b04      	ldr	r3, [pc, #16]	; (400fa4 <_usart_get_hardware_index+0x24>)
  400f92:	4798      	blx	r3

#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)USART0) / sizeof(Usart);
#endif

	return ((uint32_t)hw - (uint32_t)USART0) >> 14;
  400f94:	4804      	ldr	r0, [pc, #16]	; (400fa8 <_usart_get_hardware_index+0x28>)
  400f96:	4420      	add	r0, r4
}
  400f98:	f3c0 3087 	ubfx	r0, r0, #14, #8
  400f9c:	bd10      	pop	{r4, pc}
  400f9e:	bf00      	nop
  400fa0:	00401560 	.word	0x00401560
  400fa4:	004009b5 	.word	0x004009b5
  400fa8:	bffdc000 	.word	0xbffdc000

00400fac <_get_usart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given usart hardware instance
 */
static uint8_t _get_usart_index(const void *const hw)
{
  400fac:	b510      	push	{r4, lr}
	ASSERT(hw);
  400fae:	4604      	mov	r4, r0
  400fb0:	f44f 722d 	mov.w	r2, #692	; 0x2b4
  400fb4:	490e      	ldr	r1, [pc, #56]	; (400ff0 <_get_usart_index+0x44>)
  400fb6:	3000      	adds	r0, #0
  400fb8:	bf18      	it	ne
  400fba:	2001      	movne	r0, #1
  400fbc:	4b0d      	ldr	r3, [pc, #52]	; (400ff4 <_get_usart_index+0x48>)
  400fbe:	4798      	blx	r3
	uint8_t usart_offset = _usart_get_hardware_index(hw);
  400fc0:	4620      	mov	r0, r4
  400fc2:	4b0d      	ldr	r3, [pc, #52]	; (400ff8 <_get_usart_index+0x4c>)
  400fc4:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  400fc6:	2300      	movs	r3, #0
  400fc8:	b143      	cbz	r3, 400fdc <_get_usart_index+0x30>
		if (_usarts[i].number == usart_offset) {
			return i;
		}
	}

	ASSERT(false);
  400fca:	f240 22be 	movw	r2, #702	; 0x2be
  400fce:	4908      	ldr	r1, [pc, #32]	; (400ff0 <_get_usart_index+0x44>)
  400fd0:	2000      	movs	r0, #0
  400fd2:	4b08      	ldr	r3, [pc, #32]	; (400ff4 <_get_usart_index+0x48>)
  400fd4:	4798      	blx	r3
	return 0;
  400fd6:	2300      	movs	r3, #0
}
  400fd8:	4618      	mov	r0, r3
  400fda:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == usart_offset) {
  400fdc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  400fe0:	008a      	lsls	r2, r1, #2
  400fe2:	4906      	ldr	r1, [pc, #24]	; (400ffc <_get_usart_index+0x50>)
  400fe4:	5c8a      	ldrb	r2, [r1, r2]
  400fe6:	4290      	cmp	r0, r2
  400fe8:	d0f6      	beq.n	400fd8 <_get_usart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  400fea:	3301      	adds	r3, #1
  400fec:	b2db      	uxtb	r3, r3
  400fee:	e7eb      	b.n	400fc8 <_get_usart_index+0x1c>
  400ff0:	00401560 	.word	0x00401560
  400ff4:	004009b5 	.word	0x004009b5
  400ff8:	00400f81 	.word	0x00400f81
  400ffc:	00401554 	.word	0x00401554

00401000 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
  401000:	b510      	push	{r4, lr}
	ASSERT(hw);
  401002:	4604      	mov	r4, r0
  401004:	f240 22cb 	movw	r2, #715	; 0x2cb
  401008:	4911      	ldr	r1, [pc, #68]	; (401050 <_usart_init+0x50>)
  40100a:	3000      	adds	r0, #0
  40100c:	bf18      	it	ne
  40100e:	2001      	movne	r0, #1
  401010:	4b10      	ldr	r3, [pc, #64]	; (401054 <_usart_init+0x54>)
  401012:	4798      	blx	r3
	uint8_t i = _get_usart_index(hw);
  401014:	4620      	mov	r0, r4
  401016:	4b10      	ldr	r3, [pc, #64]	; (401058 <_usart_init+0x58>)
  401018:	4798      	blx	r3
}

static inline void hri_usart_write_US_WPMR_reg(const void *const hw, hri_usart_us_wpmr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_WPMR = data;
  40101a:	4b10      	ldr	r3, [pc, #64]	; (40105c <_usart_init+0x5c>)
  40101c:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Usart *)hw)->US_MR = data;
  401020:	2300      	movs	r3, #0
  401022:	6063      	str	r3, [r4, #4]
	((Usart *)hw)->US_RTOR = data;
  401024:	6263      	str	r3, [r4, #36]	; 0x24
	((Usart *)hw)->US_TTGR = data;
  401026:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void hri_usart_write_US_CR_reg(const void *const hw, hri_usart_us_cr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_CR = data;
  401028:	22ac      	movs	r2, #172	; 0xac
  40102a:	6022      	str	r2, [r4, #0]
  40102c:	f44f 7280 	mov.w	r2, #256	; 0x100
  401030:	6022      	str	r2, [r4, #0]
  401032:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  401036:	6022      	str	r2, [r4, #0]
	/* Reset status bits. */
	hri_usart_write_US_CR_reg(hw, US_CR_RSTSTA);
	/* Turn off RTS and DTR if exist. */
	hri_usart_write_US_CR_reg(hw, US_CR_USART_RTSDIS);

	hri_usart_write_US_MR_reg(hw, _usarts[i].us_mr);
  401038:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  40103c:	0081      	lsls	r1, r0, #2
  40103e:	4a08      	ldr	r2, [pc, #32]	; (401060 <_usart_init+0x60>)
  401040:	440a      	add	r2, r1
  401042:	6852      	ldr	r2, [r2, #4]
	((Usart *)hw)->US_MR = data;
  401044:	6062      	str	r2, [r4, #4]
	((Usart *)hw)->US_BRGR = data;
  401046:	4a07      	ldr	r2, [pc, #28]	; (401064 <_usart_init+0x64>)
  401048:	6222      	str	r2, [r4, #32]
	hri_usart_write_US_BRGR_reg(hw, _usarts[i].us_brgr);

	return ERR_NONE;
}
  40104a:	4618      	mov	r0, r3
  40104c:	bd10      	pop	{r4, pc}
  40104e:	bf00      	nop
  401050:	00401560 	.word	0x00401560
  401054:	004009b5 	.word	0x004009b5
  401058:	00400fad 	.word	0x00400fad
  40105c:	55534100 	.word	0x55534100
  401060:	00401554 	.word	0x00401554
  401064:	00020f42 	.word	0x00020f42

00401068 <_usart_get_irq_num>:
{
  401068:	b510      	push	{r4, lr}
	ASSERT(hw);
  40106a:	4604      	mov	r4, r0
  40106c:	22ae      	movs	r2, #174	; 0xae
  40106e:	4906      	ldr	r1, [pc, #24]	; (401088 <_usart_get_irq_num+0x20>)
  401070:	3000      	adds	r0, #0
  401072:	bf18      	it	ne
  401074:	2001      	movne	r0, #1
  401076:	4b05      	ldr	r3, [pc, #20]	; (40108c <_usart_get_irq_num+0x24>)
  401078:	4798      	blx	r3
	return USART0_IRQn + _usart_get_hardware_index(hw);
  40107a:	4620      	mov	r0, r4
  40107c:	4b04      	ldr	r3, [pc, #16]	; (401090 <_usart_get_irq_num+0x28>)
  40107e:	4798      	blx	r3
  401080:	300d      	adds	r0, #13
}
  401082:	b2c0      	uxtb	r0, r0
  401084:	bd10      	pop	{r4, pc}
  401086:	bf00      	nop
  401088:	00401560 	.word	0x00401560
  40108c:	004009b5 	.word	0x004009b5
  401090:	00400f81 	.word	0x00400f81

00401094 <_usart_interrupt_handler>:
{
  401094:	b510      	push	{r4, lr}
	ASSERT(device);
  401096:	4604      	mov	r4, r0
  401098:	f240 2289 	movw	r2, #649	; 0x289
  40109c:	4923      	ldr	r1, [pc, #140]	; (40112c <_usart_interrupt_handler+0x98>)
  40109e:	3000      	adds	r0, #0
  4010a0:	bf18      	it	ne
  4010a2:	2001      	movne	r0, #1
  4010a4:	4b22      	ldr	r3, [pc, #136]	; (401130 <_usart_interrupt_handler+0x9c>)
  4010a6:	4798      	blx	r3
	void *hw = device->hw;
  4010a8:	69a3      	ldr	r3, [r4, #24]
	return (((Usart *)hw)->US_CSR & US_CSR_TXRDY) > 0;
  4010aa:	695a      	ldr	r2, [r3, #20]
	if (hri_usart_get_US_CSR_TXRDY_bit(hw) && hri_usart_get_US_IMR_TXRDY_bit(hw)) {
  4010ac:	f012 0f02 	tst.w	r2, #2
  4010b0:	d003      	beq.n	4010ba <_usart_interrupt_handler+0x26>
	return (((Usart *)hw)->US_IMR & US_IMR_TXRDY) >> US_IMR_TXRDY_Pos;
  4010b2:	691a      	ldr	r2, [r3, #16]
  4010b4:	f012 0f02 	tst.w	r2, #2
  4010b8:	d118      	bne.n	4010ec <_usart_interrupt_handler+0x58>
	return (((Usart *)hw)->US_CSR & US_CSR_TXEMPTY) > 0;
  4010ba:	695a      	ldr	r2, [r3, #20]
	} else if (hri_usart_get_US_CSR_TXEMPTY_bit(hw) && hri_usart_get_US_IMR_TXEMPTY_bit(hw)) {
  4010bc:	f412 7f00 	tst.w	r2, #512	; 0x200
  4010c0:	d003      	beq.n	4010ca <_usart_interrupt_handler+0x36>
	return (((Usart *)hw)->US_IMR & US_IMR_TXEMPTY) >> US_IMR_TXEMPTY_Pos;
  4010c2:	691a      	ldr	r2, [r3, #16]
  4010c4:	f412 7f00 	tst.w	r2, #512	; 0x200
  4010c8:	d116      	bne.n	4010f8 <_usart_interrupt_handler+0x64>
	return (((Usart *)hw)->US_CSR & US_CSR_RXRDY) > 0;
  4010ca:	695a      	ldr	r2, [r3, #20]
	} else if (hri_usart_get_US_CSR_RXRDY_bit(hw) && hri_usart_get_US_IMR_RXRDY_bit(hw)) {
  4010cc:	f012 0f01 	tst.w	r2, #1
  4010d0:	d01f      	beq.n	401112 <_usart_interrupt_handler+0x7e>
	return (((Usart *)hw)->US_IMR & US_IMR_RXRDY) >> US_IMR_RXRDY_Pos;
  4010d2:	691a      	ldr	r2, [r3, #16]
  4010d4:	f012 0f01 	tst.w	r2, #1
  4010d8:	d01b      	beq.n	401112 <_usart_interrupt_handler+0x7e>
	return ((Usart *)hw)->US_CSR;
  4010da:	6959      	ldr	r1, [r3, #20]
		if (hri_usart_read_US_CSR_reg(hw) &
  4010dc:	4a15      	ldr	r2, [pc, #84]	; (401134 <_usart_interrupt_handler+0xa0>)
  4010de:	4211      	tst	r1, r2
  4010e0:	d011      	beq.n	401106 <_usart_interrupt_handler+0x72>
	return ((Usart *)hw)->US_RHR;
  4010e2:	699a      	ldr	r2, [r3, #24]
	((Usart *)hw)->US_CR = data;
  4010e4:	f44f 7280 	mov.w	r2, #256	; 0x100
  4010e8:	601a      	str	r2, [r3, #0]
  4010ea:	bd10      	pop	{r4, pc}
	((Usart *)hw)->US_IDR = US_IMR_TXRDY;
  4010ec:	2202      	movs	r2, #2
  4010ee:	60da      	str	r2, [r3, #12]
		device->usart_cb.tx_byte_sent(device);
  4010f0:	6823      	ldr	r3, [r4, #0]
  4010f2:	4620      	mov	r0, r4
  4010f4:	4798      	blx	r3
  4010f6:	bd10      	pop	{r4, pc}
	((Usart *)hw)->US_IDR = US_IMR_TXEMPTY;
  4010f8:	f44f 7200 	mov.w	r2, #512	; 0x200
  4010fc:	60da      	str	r2, [r3, #12]
		device->usart_cb.tx_done_cb(device);
  4010fe:	68a3      	ldr	r3, [r4, #8]
  401100:	4620      	mov	r0, r4
  401102:	4798      	blx	r3
  401104:	bd10      	pop	{r4, pc}
		device->usart_cb.rx_done_cb(device, (uint8_t)hri_usart_read_US_RHR_reg(hw));
  401106:	6862      	ldr	r2, [r4, #4]
	return ((Usart *)hw)->US_RHR;
  401108:	6999      	ldr	r1, [r3, #24]
  40110a:	b2c9      	uxtb	r1, r1
  40110c:	4620      	mov	r0, r4
  40110e:	4790      	blx	r2
  401110:	bd10      	pop	{r4, pc}
	return ((Usart *)hw)->US_CSR;
  401112:	6959      	ldr	r1, [r3, #20]
	} else if (hri_usart_read_US_CSR_reg(hw) &
  401114:	4a07      	ldr	r2, [pc, #28]	; (401134 <_usart_interrupt_handler+0xa0>)
  401116:	4211      	tst	r1, r2
  401118:	d100      	bne.n	40111c <_usart_interrupt_handler+0x88>
  40111a:	bd10      	pop	{r4, pc}
	((Usart *)hw)->US_CR = data;
  40111c:	f44f 7280 	mov.w	r2, #256	; 0x100
  401120:	601a      	str	r2, [r3, #0]
		device->usart_cb.error_cb(device);
  401122:	68e3      	ldr	r3, [r4, #12]
  401124:	4620      	mov	r0, r4
  401126:	4798      	blx	r3
  401128:	e7f7      	b.n	40111a <_usart_interrupt_handler+0x86>
  40112a:	bf00      	nop
  40112c:	00401560 	.word	0x00401560
  401130:	004009b5 	.word	0x004009b5
  401134:	010000e0 	.word	0x010000e0

00401138 <_usart_async_init>:
{
  401138:	b570      	push	{r4, r5, r6, lr}
  40113a:	460c      	mov	r4, r1
	ASSERT(device);
  40113c:	4606      	mov	r6, r0
  40113e:	22d1      	movs	r2, #209	; 0xd1
  401140:	4922      	ldr	r1, [pc, #136]	; (4011cc <_usart_async_init+0x94>)
  401142:	3000      	adds	r0, #0
  401144:	bf18      	it	ne
  401146:	2001      	movne	r0, #1
  401148:	4b21      	ldr	r3, [pc, #132]	; (4011d0 <_usart_async_init+0x98>)
  40114a:	4798      	blx	r3
	init_status = _usart_init(hw);
  40114c:	4620      	mov	r0, r4
  40114e:	4b21      	ldr	r3, [pc, #132]	; (4011d4 <_usart_async_init+0x9c>)
  401150:	4798      	blx	r3
	if (init_status) {
  401152:	4605      	mov	r5, r0
  401154:	b108      	cbz	r0, 40115a <_usart_async_init+0x22>
}
  401156:	4628      	mov	r0, r5
  401158:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
  40115a:	61b4      	str	r4, [r6, #24]
	_usart_init_irq_param(hw, device);
  40115c:	4631      	mov	r1, r6
  40115e:	4620      	mov	r0, r4
  401160:	4b1d      	ldr	r3, [pc, #116]	; (4011d8 <_usart_async_init+0xa0>)
  401162:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_usart_get_irq_num(hw));
  401164:	4620      	mov	r0, r4
  401166:	4b1d      	ldr	r3, [pc, #116]	; (4011dc <_usart_async_init+0xa4>)
  401168:	4798      	blx	r3
  40116a:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
  40116c:	2b00      	cmp	r3, #0
  40116e:	db0d      	blt.n	40118c <_usart_async_init+0x54>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401170:	095b      	lsrs	r3, r3, #5
  401172:	f000 001f 	and.w	r0, r0, #31
  401176:	2201      	movs	r2, #1
  401178:	fa02 f000 	lsl.w	r0, r2, r0
  40117c:	3320      	adds	r3, #32
  40117e:	4a18      	ldr	r2, [pc, #96]	; (4011e0 <_usart_async_init+0xa8>)
  401180:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401184:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  401188:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ((IRQn_Type)_usart_get_irq_num(hw));
  40118c:	4620      	mov	r0, r4
  40118e:	4b13      	ldr	r3, [pc, #76]	; (4011dc <_usart_async_init+0xa4>)
  401190:	4798      	blx	r3
  401192:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
  401194:	2b00      	cmp	r3, #0
  401196:	db09      	blt.n	4011ac <_usart_async_init+0x74>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401198:	095b      	lsrs	r3, r3, #5
  40119a:	f000 001f 	and.w	r0, r0, #31
  40119e:	2201      	movs	r2, #1
  4011a0:	fa02 f000 	lsl.w	r0, r2, r0
  4011a4:	3360      	adds	r3, #96	; 0x60
  4011a6:	4a0e      	ldr	r2, [pc, #56]	; (4011e0 <_usart_async_init+0xa8>)
  4011a8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	NVIC_EnableIRQ((IRQn_Type)_usart_get_irq_num(hw));
  4011ac:	4620      	mov	r0, r4
  4011ae:	4b0b      	ldr	r3, [pc, #44]	; (4011dc <_usart_async_init+0xa4>)
  4011b0:	4798      	blx	r3
  4011b2:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
  4011b4:	2b00      	cmp	r3, #0
  4011b6:	dbce      	blt.n	401156 <_usart_async_init+0x1e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4011b8:	095b      	lsrs	r3, r3, #5
  4011ba:	f000 001f 	and.w	r0, r0, #31
  4011be:	2201      	movs	r2, #1
  4011c0:	fa02 f000 	lsl.w	r0, r2, r0
  4011c4:	4a06      	ldr	r2, [pc, #24]	; (4011e0 <_usart_async_init+0xa8>)
  4011c6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  4011ca:	e7c4      	b.n	401156 <_usart_async_init+0x1e>
  4011cc:	00401560 	.word	0x00401560
  4011d0:	004009b5 	.word	0x004009b5
  4011d4:	00401001 	.word	0x00401001
  4011d8:	00400f69 	.word	0x00400f69
  4011dc:	00401069 	.word	0x00401069
  4011e0:	e000e100 	.word	0xe000e100

004011e4 <_usart_async_enable>:
{
  4011e4:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  4011e6:	4e0a      	ldr	r6, [pc, #40]	; (401210 <_usart_async_enable+0x2c>)
  4011e8:	4604      	mov	r4, r0
  4011ea:	f240 1213 	movw	r2, #275	; 0x113
  4011ee:	4631      	mov	r1, r6
  4011f0:	3000      	adds	r0, #0
  4011f2:	bf18      	it	ne
  4011f4:	2001      	movne	r0, #1
  4011f6:	4d07      	ldr	r5, [pc, #28]	; (401214 <_usart_async_enable+0x30>)
  4011f8:	47a8      	blx	r5
	_usart_enable(device->hw);
  4011fa:	69a4      	ldr	r4, [r4, #24]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _usart_enable(void *const hw)
{
	ASSERT(hw);
  4011fc:	f44f 723d 	mov.w	r2, #756	; 0x2f4
  401200:	4631      	mov	r1, r6
  401202:	1c20      	adds	r0, r4, #0
  401204:	bf18      	it	ne
  401206:	2001      	movne	r0, #1
  401208:	47a8      	blx	r5
  40120a:	2350      	movs	r3, #80	; 0x50
  40120c:	6023      	str	r3, [r4, #0]
  40120e:	bd70      	pop	{r4, r5, r6, pc}
  401210:	00401560 	.word	0x00401560
  401214:	004009b5 	.word	0x004009b5

00401218 <_usart_async_write_byte>:
{
  401218:	b538      	push	{r3, r4, r5, lr}
  40121a:	460c      	mov	r4, r1
	ASSERT(device);
  40121c:	4605      	mov	r5, r0
  40121e:	f240 12b5 	movw	r2, #437	; 0x1b5
  401222:	4904      	ldr	r1, [pc, #16]	; (401234 <_usart_async_write_byte+0x1c>)
  401224:	3000      	adds	r0, #0
  401226:	bf18      	it	ne
  401228:	2001      	movne	r0, #1
  40122a:	4b03      	ldr	r3, [pc, #12]	; (401238 <_usart_async_write_byte+0x20>)
  40122c:	4798      	blx	r3
	hri_usart_write_US_THR_reg(device->hw, (hri_usart_us_thr_reg_t)data);
  40122e:	69ab      	ldr	r3, [r5, #24]
}

static inline void hri_usart_write_US_THR_reg(const void *const hw, hri_usart_us_thr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_THR = data;
  401230:	61dc      	str	r4, [r3, #28]
  401232:	bd38      	pop	{r3, r4, r5, pc}
  401234:	00401560 	.word	0x00401560
  401238:	004009b5 	.word	0x004009b5

0040123c <_usart_async_enable_byte_sent_irq>:
{
  40123c:	b510      	push	{r4, lr}
	ASSERT(device);
  40123e:	4604      	mov	r4, r0
  401240:	f240 221d 	movw	r2, #541	; 0x21d
  401244:	4904      	ldr	r1, [pc, #16]	; (401258 <_usart_async_enable_byte_sent_irq+0x1c>)
  401246:	3000      	adds	r0, #0
  401248:	bf18      	it	ne
  40124a:	2001      	movne	r0, #1
  40124c:	4b03      	ldr	r3, [pc, #12]	; (40125c <_usart_async_enable_byte_sent_irq+0x20>)
  40124e:	4798      	blx	r3
	hri_usart_set_US_IMR_TXRDY_bit(device->hw);
  401250:	69a3      	ldr	r3, [r4, #24]
	((Usart *)hw)->US_IER = US_IMR_TXRDY;
  401252:	2202      	movs	r2, #2
  401254:	609a      	str	r2, [r3, #8]
  401256:	bd10      	pop	{r4, pc}
  401258:	00401560 	.word	0x00401560
  40125c:	004009b5 	.word	0x004009b5

00401260 <_usart_async_enable_tx_done_irq>:
{
  401260:	b510      	push	{r4, lr}
	ASSERT(device);
  401262:	4604      	mov	r4, r0
  401264:	f240 2226 	movw	r2, #550	; 0x226
  401268:	4905      	ldr	r1, [pc, #20]	; (401280 <_usart_async_enable_tx_done_irq+0x20>)
  40126a:	3000      	adds	r0, #0
  40126c:	bf18      	it	ne
  40126e:	2001      	movne	r0, #1
  401270:	4b04      	ldr	r3, [pc, #16]	; (401284 <_usart_async_enable_tx_done_irq+0x24>)
  401272:	4798      	blx	r3
	hri_usart_set_US_IMR_TXEMPTY_bit(device->hw);
  401274:	69a3      	ldr	r3, [r4, #24]
	((Usart *)hw)->US_IER = US_IMR_TXEMPTY;
  401276:	f44f 7200 	mov.w	r2, #512	; 0x200
  40127a:	609a      	str	r2, [r3, #8]
  40127c:	bd10      	pop	{r4, pc}
  40127e:	bf00      	nop
  401280:	00401560 	.word	0x00401560
  401284:	004009b5 	.word	0x004009b5

00401288 <_usart_async_set_irq_state>:
{
  401288:	b570      	push	{r4, r5, r6, lr}
  40128a:	460c      	mov	r4, r1
  40128c:	4616      	mov	r6, r2
	ASSERT(device);
  40128e:	4605      	mov	r5, r0
  401290:	f44f 7214 	mov.w	r2, #592	; 0x250
  401294:	491b      	ldr	r1, [pc, #108]	; (401304 <_usart_async_set_irq_state+0x7c>)
  401296:	3000      	adds	r0, #0
  401298:	bf18      	it	ne
  40129a:	2001      	movne	r0, #1
  40129c:	4b1a      	ldr	r3, [pc, #104]	; (401308 <_usart_async_set_irq_state+0x80>)
  40129e:	4798      	blx	r3
	if (state) {
  4012a0:	b1c6      	cbz	r6, 4012d4 <_usart_async_set_irq_state+0x4c>
		if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
  4012a2:	2c02      	cmp	r4, #2
  4012a4:	bf18      	it	ne
  4012a6:	2c00      	cmpne	r4, #0
  4012a8:	d004      	beq.n	4012b4 <_usart_async_set_irq_state+0x2c>
		} else if (USART_ASYNC_RX_DONE == type) {
  4012aa:	2c01      	cmp	r4, #1
  4012ac:	d00a      	beq.n	4012c4 <_usart_async_set_irq_state+0x3c>
		} else if (USART_ASYNC_ERROR == type) {
  4012ae:	2c03      	cmp	r4, #3
  4012b0:	d00c      	beq.n	4012cc <_usart_async_set_irq_state+0x44>
  4012b2:	bd70      	pop	{r4, r5, r6, pc}
			hri_usart_set_US_IMR_TXRDY_bit(device->hw);
  4012b4:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IER = US_IMR_TXRDY;
  4012b6:	2202      	movs	r2, #2
  4012b8:	609a      	str	r2, [r3, #8]
			hri_usart_set_US_IMR_TXEMPTY_bit(device->hw);
  4012ba:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IER = US_IMR_TXEMPTY;
  4012bc:	f44f 7200 	mov.w	r2, #512	; 0x200
  4012c0:	609a      	str	r2, [r3, #8]
  4012c2:	bd70      	pop	{r4, r5, r6, pc}
			hri_usart_set_US_IMR_RXRDY_bit(device->hw);
  4012c4:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IER = US_IMR_RXRDY;
  4012c6:	2201      	movs	r2, #1
  4012c8:	609a      	str	r2, [r3, #8]
  4012ca:	bd70      	pop	{r4, r5, r6, pc}
			    device->hw, US_CSR_OVRE | US_CSR_USART_LIN_FRAME | US_CSR_USART_LIN_PARE | US_CSR_USART_MANERR);
  4012cc:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IER = mask;
  4012ce:	4a0f      	ldr	r2, [pc, #60]	; (40130c <_usart_async_set_irq_state+0x84>)
  4012d0:	609a      	str	r2, [r3, #8]
  4012d2:	bd70      	pop	{r4, r5, r6, pc}
		if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
  4012d4:	2c02      	cmp	r4, #2
  4012d6:	bf18      	it	ne
  4012d8:	2c00      	cmpne	r4, #0
  4012da:	d007      	beq.n	4012ec <_usart_async_set_irq_state+0x64>
		} else if (USART_ASYNC_RX_DONE == type) {
  4012dc:	2c01      	cmp	r4, #1
  4012de:	d00d      	beq.n	4012fc <_usart_async_set_irq_state+0x74>
		} else if (USART_ASYNC_ERROR == type) {
  4012e0:	2c03      	cmp	r4, #3
  4012e2:	d1e6      	bne.n	4012b2 <_usart_async_set_irq_state+0x2a>
			    device->hw, US_CSR_OVRE | US_CSR_USART_LIN_FRAME | US_CSR_USART_LIN_PARE | US_CSR_USART_MANERR);
  4012e4:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IDR = mask;
  4012e6:	4a09      	ldr	r2, [pc, #36]	; (40130c <_usart_async_set_irq_state+0x84>)
  4012e8:	60da      	str	r2, [r3, #12]
}
  4012ea:	e7e2      	b.n	4012b2 <_usart_async_set_irq_state+0x2a>
			hri_usart_clear_US_IMR_TXRDY_bit(device->hw);
  4012ec:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IDR = US_IMR_TXRDY;
  4012ee:	2202      	movs	r2, #2
  4012f0:	60da      	str	r2, [r3, #12]
			hri_usart_clear_US_IMR_TXEMPTY_bit(device->hw);
  4012f2:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IDR = US_IMR_TXEMPTY;
  4012f4:	f44f 7200 	mov.w	r2, #512	; 0x200
  4012f8:	60da      	str	r2, [r3, #12]
  4012fa:	bd70      	pop	{r4, r5, r6, pc}
			hri_usart_clear_US_IMR_RXRDY_bit(device->hw);
  4012fc:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IDR = US_IMR_RXRDY;
  4012fe:	2201      	movs	r2, #1
  401300:	60da      	str	r2, [r3, #12]
  401302:	bd70      	pop	{r4, r5, r6, pc}
  401304:	00401560 	.word	0x00401560
  401308:	004009b5 	.word	0x004009b5
  40130c:	010000e0 	.word	0x010000e0

00401310 <_usart_get_usart_async>:
}
  401310:	2000      	movs	r0, #0
  401312:	4770      	bx	lr

00401314 <USART1_Handler>:
{
  401314:	b508      	push	{r3, lr}
	_usart_interrupt_handler(_usart1_dev);
  401316:	4b02      	ldr	r3, [pc, #8]	; (401320 <USART1_Handler+0xc>)
  401318:	6818      	ldr	r0, [r3, #0]
  40131a:	4b02      	ldr	r3, [pc, #8]	; (401324 <USART1_Handler+0x10>)
  40131c:	4798      	blx	r3
  40131e:	bd08      	pop	{r3, pc}
  401320:	20400054 	.word	0x20400054
  401324:	00401095 	.word	0x00401095

00401328 <serial_tx_cb>:
	}
}

// USART functions
// Virtual COM port transmit callback function
static void serial_tx_cb(const struct usart_async_descriptor *const io_descr) {
  401328:	4770      	bx	lr
	...

0040132c <read_SPI_data>:
{
  40132c:	b570      	push	{r4, r5, r6, lr}
  40132e:	b084      	sub	sp, #16
	spi_m_sync_get_io_descriptor(&SPI_0, &io);
  401330:	a903      	add	r1, sp, #12
  401332:	4810      	ldr	r0, [pc, #64]	; (401374 <read_SPI_data+0x48>)
  401334:	4b10      	ldr	r3, [pc, #64]	; (401378 <read_SPI_data+0x4c>)
  401336:	4798      	blx	r3
	uint8_t cs_pins[4] = {CS_PIN_DEVICE1, CS_PIN_DEVICE2, CS_PIN_DEVICE3, CS_PIN_DEVICE4};
  401338:	4b10      	ldr	r3, [pc, #64]	; (40137c <read_SPI_data+0x50>)
  40133a:	681b      	ldr	r3, [r3, #0]
  40133c:	9301      	str	r3, [sp, #4]
	for (int i = 0; i < 4; i++) {
  40133e:	2600      	movs	r6, #0
  401340:	e013      	b.n	40136a <read_SPI_data+0x3e>
		gpio_set_pin_level(cs_pins[i], false); // set the pin low (select the device)
  401342:	ab04      	add	r3, sp, #16
  401344:	4433      	add	r3, r6
  401346:	f813 4c0c 	ldrb.w	r4, [r3, #-12]
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
  40134a:	0963      	lsrs	r3, r4, #5
  40134c:	f004 041f 	and.w	r4, r4, #31
  401350:	2201      	movs	r2, #1
  401352:	fa02 f404 	lsl.w	r4, r2, r4
 * \brief Transfer gpio_port to hardware address
 */
static inline void *port_to_reg(const enum gpio_port port)
{
	/* PIO instance offset is 0x200 */
	return (void *)((uint32_t)PIOA + port * 0x200);
  401356:	4d0a      	ldr	r5, [pc, #40]	; (401380 <read_SPI_data+0x54>)
  401358:	eb05 2543 	add.w	r5, r5, r3, lsl #9
	((Pio *)hw)->PIO_CODR = mask;
  40135c:	636c      	str	r4, [r5, #52]	; 0x34
		io_read(io, read_data, 1); // Read 1 bytes of data
  40135e:	a902      	add	r1, sp, #8
  401360:	9803      	ldr	r0, [sp, #12]
  401362:	4b08      	ldr	r3, [pc, #32]	; (401384 <read_SPI_data+0x58>)
  401364:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  401366:	632c      	str	r4, [r5, #48]	; 0x30
	for (int i = 0; i < 4; i++) {
  401368:	3601      	adds	r6, #1
  40136a:	2e03      	cmp	r6, #3
  40136c:	dde9      	ble.n	401342 <read_SPI_data+0x16>
}
  40136e:	b004      	add	sp, #16
  401370:	bd70      	pop	{r4, r5, r6, pc}
  401372:	bf00      	nop
  401374:	20400060 	.word	0x20400060
  401378:	0040060d 	.word	0x0040060d
  40137c:	0040157c 	.word	0x0040157c
  401380:	400e0e00 	.word	0x400e0e00
  401384:	00400461 	.word	0x00400461

00401388 <main>:
	// Do nothing so far
}


int main(void)
{
  401388:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  40138a:	4b0f      	ldr	r3, [pc, #60]	; (4013c8 <main+0x40>)
  40138c:	4798      	blx	r3
	((Pio *)hw)->PIO_OER = mask;
  40138e:	4b0f      	ldr	r3, [pc, #60]	; (4013cc <main+0x44>)
  401390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401394:	611a      	str	r2, [r3, #16]
  401396:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40139a:	611a      	str	r2, [r3, #16]
  40139c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4013a0:	611a      	str	r2, [r3, #16]
  4013a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4013a6:	611a      	str	r2, [r3, #16]
	gpio_set_pin_direction(CS_PIN_DEVICE2, GPIO_DIRECTION_OUT);
	gpio_set_pin_direction(CS_PIN_DEVICE3, GPIO_DIRECTION_OUT);
	gpio_set_pin_direction(CS_PIN_DEVICE4, GPIO_DIRECTION_OUT);
	
	// Enable SPI
	spi_m_sync_enable(&SPI_0);
  4013a8:	4809      	ldr	r0, [pc, #36]	; (4013d0 <main+0x48>)
  4013aa:	4b0a      	ldr	r3, [pc, #40]	; (4013d4 <main+0x4c>)
  4013ac:	4798      	blx	r3
	
	usart_async_register_callback(&USART_0, USART_ASYNC_TXC_CB, serial_tx_cb);
  4013ae:	4c0a      	ldr	r4, [pc, #40]	; (4013d8 <main+0x50>)
  4013b0:	4a0a      	ldr	r2, [pc, #40]	; (4013dc <main+0x54>)
  4013b2:	2101      	movs	r1, #1
  4013b4:	4620      	mov	r0, r4
  4013b6:	4b0a      	ldr	r3, [pc, #40]	; (4013e0 <main+0x58>)
  4013b8:	4798      	blx	r3
	usart_async_enable(&USART_0);
  4013ba:	4620      	mov	r0, r4
  4013bc:	4b09      	ldr	r3, [pc, #36]	; (4013e4 <main+0x5c>)
  4013be:	4798      	blx	r3

	while (1) {
		read_SPI_data();
  4013c0:	4b09      	ldr	r3, [pc, #36]	; (4013e8 <main+0x60>)
  4013c2:	4798      	blx	r3
  4013c4:	e7fc      	b.n	4013c0 <main+0x38>
  4013c6:	bf00      	nop
  4013c8:	004001d5 	.word	0x004001d5
  4013cc:	400e0e00 	.word	0x400e0e00
  4013d0:	20400060 	.word	0x20400060
  4013d4:	0040052d 	.word	0x0040052d
  4013d8:	20400078 	.word	0x20400078
  4013dc:	00401329 	.word	0x00401329
  4013e0:	00400941 	.word	0x00400941
  4013e4:	00400915 	.word	0x00400915
  4013e8:	0040132d 	.word	0x0040132d

004013ec <__libc_init_array>:
  4013ec:	b570      	push	{r4, r5, r6, lr}
  4013ee:	4e0d      	ldr	r6, [pc, #52]	; (401424 <__libc_init_array+0x38>)
  4013f0:	4c0d      	ldr	r4, [pc, #52]	; (401428 <__libc_init_array+0x3c>)
  4013f2:	1ba4      	subs	r4, r4, r6
  4013f4:	10a4      	asrs	r4, r4, #2
  4013f6:	2500      	movs	r5, #0
  4013f8:	42a5      	cmp	r5, r4
  4013fa:	d109      	bne.n	401410 <__libc_init_array+0x24>
  4013fc:	4e0b      	ldr	r6, [pc, #44]	; (40142c <__libc_init_array+0x40>)
  4013fe:	4c0c      	ldr	r4, [pc, #48]	; (401430 <__libc_init_array+0x44>)
  401400:	f000 f8be 	bl	401580 <_init>
  401404:	1ba4      	subs	r4, r4, r6
  401406:	10a4      	asrs	r4, r4, #2
  401408:	2500      	movs	r5, #0
  40140a:	42a5      	cmp	r5, r4
  40140c:	d105      	bne.n	40141a <__libc_init_array+0x2e>
  40140e:	bd70      	pop	{r4, r5, r6, pc}
  401410:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  401414:	4798      	blx	r3
  401416:	3501      	adds	r5, #1
  401418:	e7ee      	b.n	4013f8 <__libc_init_array+0xc>
  40141a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  40141e:	4798      	blx	r3
  401420:	3501      	adds	r5, #1
  401422:	e7f2      	b.n	40140a <__libc_init_array+0x1e>
  401424:	0040158c 	.word	0x0040158c
  401428:	0040158c 	.word	0x0040158c
  40142c:	0040158c 	.word	0x0040158c
  401430:	00401590 	.word	0x00401590
  401434:	682f2e2e 	.word	0x682f2e2e
  401438:	732f6c61 	.word	0x732f6c61
  40143c:	682f6372 	.word	0x682f6372
  401440:	695f6c61 	.word	0x695f6c61
  401444:	00632e6f 	.word	0x00632e6f
  401448:	682f2e2e 	.word	0x682f2e2e
  40144c:	732f6c61 	.word	0x732f6c61
  401450:	682f6372 	.word	0x682f6372
  401454:	725f6c61 	.word	0x725f6c61
  401458:	5f646e61 	.word	0x5f646e61
  40145c:	636e7973 	.word	0x636e7973
  401460:	0000632e 	.word	0x0000632e
  401464:	682f2e2e 	.word	0x682f2e2e
  401468:	732f6c61 	.word	0x732f6c61
  40146c:	682f6372 	.word	0x682f6372
  401470:	735f6c61 	.word	0x735f6c61
  401474:	6d5f6970 	.word	0x6d5f6970
  401478:	6e79735f 	.word	0x6e79735f
  40147c:	00632e63 	.word	0x00632e63
  401480:	682f2e2e 	.word	0x682f2e2e
  401484:	732f6c61 	.word	0x732f6c61
  401488:	682f6372 	.word	0x682f6372
  40148c:	745f6c61 	.word	0x745f6c61
  401490:	72656d69 	.word	0x72656d69
  401494:	0000632e 	.word	0x0000632e
  401498:	682f2e2e 	.word	0x682f2e2e
  40149c:	732f6c61 	.word	0x732f6c61
  4014a0:	682f6372 	.word	0x682f6372
  4014a4:	755f6c61 	.word	0x755f6c61
  4014a8:	74726173 	.word	0x74726173
  4014ac:	7973615f 	.word	0x7973615f
  4014b0:	632e636e 	.word	0x632e636e
  4014b4:	00000000 	.word	0x00000000
  4014b8:	682f2e2e 	.word	0x682f2e2e
  4014bc:	752f6c61 	.word	0x752f6c61
  4014c0:	736c6974 	.word	0x736c6974
  4014c4:	6372732f 	.word	0x6372732f
  4014c8:	6974752f 	.word	0x6974752f
  4014cc:	6c5f736c 	.word	0x6c5f736c
  4014d0:	2e747369 	.word	0x2e747369
  4014d4:	00000063 	.word	0x00000063
  4014d8:	682f2e2e 	.word	0x682f2e2e
  4014dc:	752f6c61 	.word	0x752f6c61
  4014e0:	736c6974 	.word	0x736c6974
  4014e4:	6372732f 	.word	0x6372732f
  4014e8:	6974752f 	.word	0x6974752f
  4014ec:	725f736c 	.word	0x725f736c
  4014f0:	62676e69 	.word	0x62676e69
  4014f4:	65666675 	.word	0x65666675
  4014f8:	00632e72 	.word	0x00632e72

004014fc <spi_regs>:
  4014fc:	00000000 80000000 00000001 0496dc02     ................
  40150c:	0000ffff 682f2e2e 732f6c70 682f6970     ....../hpl/spi/h
  40151c:	735f6c70 632e6970 00000000 682f2e2e     pl_spi.c....../h
  40152c:	742f6c70 70682f63 63745f6c 0000632e     pl/tc/hpl_tc.c..
  40153c:	682f2e2e 742f6c70 2f676e72 5f6c7068     ../hpl/trng/hpl_
  40154c:	676e7274 0000632e                       trng.c..

00401554 <_usarts>:
  401554:	00000001 001009c0 00020f42 682f2e2e     ........B...../h
  401564:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  401574:	632e7472 00000000 1f1e1d1c              rt.c........

00401580 <_init>:
  401580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401582:	bf00      	nop
  401584:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401586:	bc08      	pop	{r3}
  401588:	469e      	mov	lr, r3
  40158a:	4770      	bx	lr

0040158c <__init_array_start>:
  40158c:	0040018d 	.word	0x0040018d

00401590 <_fini>:
  401590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401592:	bf00      	nop
  401594:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401596:	bc08      	pop	{r3}
  401598:	469e      	mov	lr, r3
  40159a:	4770      	bx	lr

0040159c <__fini_array_start>:
  40159c:	00400169 	.word	0x00400169
