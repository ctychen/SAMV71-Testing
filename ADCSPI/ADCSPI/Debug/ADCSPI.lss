
ADCSPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010d4  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000024  20400000  004010d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000068  20400024  004010f8  00020024  2**2
                  ALLOC
  3 .heap         00000204  2040008c  00401160  00020024  2**0
                  ALLOC
  4 .stack        00000400  20400290  00401364  00020024  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000f50f  00000000  00000000  000200ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000025e8  00000000  00000000  0002f5ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006e13  00000000  00000000  00031ba2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000008d0  00000000  00000000  000389b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000840  00000000  00000000  00039285  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003cee4  00000000  00000000  00039ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000fe6e  00000000  00000000  000769a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00142561  00000000  00000000  00086817  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001744  00000000  00000000  001c8d78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	90 06 40 20 e5 01 40 00 e1 01 40 00 e1 01 40 00     ..@ ..@...@...@.
  400010:	e1 01 40 00 e1 01 40 00 e1 01 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	e1 01 40 00 e1 01 40 00 00 00 00 00 e1 01 40 00     ..@...@.......@.
  40003c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40004c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40005c:	e1 01 40 00 e1 01 40 00 00 00 00 00 e1 01 40 00     ..@...@.......@.
  40006c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40007c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40008c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40009c:	6d 0c 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     m.@...@...@...@.
  4000ac:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000bc:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000cc:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000dc:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000ec:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  4000fc:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40010c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ......@...@...@.
  40012c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40013c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40014c:	e1 01 40 00 e1 01 40 00 e1 01 40 00 e1 01 40 00     ..@...@...@...@.
  40015c:	e1 01 40 00 e1 01 40 00 e1 01 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400024 	.word	0x20400024
  400184:	00000000 	.word	0x00000000
  400188:	004010d4 	.word	0x004010d4

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	004010d4 	.word	0x004010d4
  4001c8:	20400028 	.word	0x20400028
  4001cc:	004010d4 	.word	0x004010d4
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b01      	ldr	r3, [pc, #4]	; (4001dc <atmel_start_init+0x8>)
  4001d8:	4798      	blx	r3
  4001da:	bd08      	pop	{r3, pc}
  4001dc:	004003a9 	.word	0x004003a9

004001e0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4001e0:	e7fe      	b.n	4001e0 <Dummy_Handler>
	...

004001e4 <Reset_Handler>:
{
  4001e4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4001e6:	4b10      	ldr	r3, [pc, #64]	; (400228 <Reset_Handler+0x44>)
  4001e8:	4a10      	ldr	r2, [pc, #64]	; (40022c <Reset_Handler+0x48>)
  4001ea:	429a      	cmp	r2, r3
  4001ec:	d009      	beq.n	400202 <Reset_Handler+0x1e>
  4001ee:	4b0e      	ldr	r3, [pc, #56]	; (400228 <Reset_Handler+0x44>)
  4001f0:	4a0e      	ldr	r2, [pc, #56]	; (40022c <Reset_Handler+0x48>)
  4001f2:	e003      	b.n	4001fc <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  4001f4:	6811      	ldr	r1, [r2, #0]
  4001f6:	6019      	str	r1, [r3, #0]
  4001f8:	3304      	adds	r3, #4
  4001fa:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  4001fc:	490c      	ldr	r1, [pc, #48]	; (400230 <Reset_Handler+0x4c>)
  4001fe:	428b      	cmp	r3, r1
  400200:	d3f8      	bcc.n	4001f4 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  400202:	4b0c      	ldr	r3, [pc, #48]	; (400234 <Reset_Handler+0x50>)
  400204:	e002      	b.n	40020c <Reset_Handler+0x28>
                *pDest++ = 0;
  400206:	2200      	movs	r2, #0
  400208:	601a      	str	r2, [r3, #0]
  40020a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  40020c:	4a0a      	ldr	r2, [pc, #40]	; (400238 <Reset_Handler+0x54>)
  40020e:	4293      	cmp	r3, r2
  400210:	d3f9      	bcc.n	400206 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400212:	4a0a      	ldr	r2, [pc, #40]	; (40023c <Reset_Handler+0x58>)
  400214:	4b0a      	ldr	r3, [pc, #40]	; (400240 <Reset_Handler+0x5c>)
  400216:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40021a:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  40021c:	4b09      	ldr	r3, [pc, #36]	; (400244 <Reset_Handler+0x60>)
  40021e:	4798      	blx	r3
        main();
  400220:	4b09      	ldr	r3, [pc, #36]	; (400248 <Reset_Handler+0x64>)
  400222:	4798      	blx	r3
  400224:	e7fe      	b.n	400224 <Reset_Handler+0x40>
  400226:	bf00      	nop
  400228:	20400000 	.word	0x20400000
  40022c:	004010d4 	.word	0x004010d4
  400230:	20400024 	.word	0x20400024
  400234:	20400024 	.word	0x20400024
  400238:	2040008c 	.word	0x2040008c
  40023c:	e000ed00 	.word	0xe000ed00
  400240:	00400000 	.word	0x00400000
  400244:	00400f4d 	.word	0x00400f4d
  400248:	00400f0d 	.word	0x00400f0d

0040024c <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
  40024c:	b508      	push	{r3, lr}
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  40024e:	4b08      	ldr	r3, [pc, #32]	; (400270 <TIMER_0_init+0x24>)
  400250:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400252:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  400256:	d103      	bne.n	400260 <TIMER_0_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400258:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  40025c:	4b04      	ldr	r3, [pc, #16]	; (400270 <TIMER_0_init+0x24>)
  40025e:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	TIMER_0_PORT_init();
	timer_init(&TIMER_0, TC0, _tc_get_timer());
  400260:	4b04      	ldr	r3, [pc, #16]	; (400274 <TIMER_0_init+0x28>)
  400262:	4798      	blx	r3
  400264:	4602      	mov	r2, r0
  400266:	4904      	ldr	r1, [pc, #16]	; (400278 <TIMER_0_init+0x2c>)
  400268:	4804      	ldr	r0, [pc, #16]	; (40027c <TIMER_0_init+0x30>)
  40026a:	4b05      	ldr	r3, [pc, #20]	; (400280 <TIMER_0_init+0x34>)
  40026c:	4798      	blx	r3
  40026e:	bd08      	pop	{r3, pc}
  400270:	400e0600 	.word	0x400e0600
  400274:	00400c69 	.word	0x00400c69
  400278:	4000c000 	.word	0x4000c000
  40027c:	20400070 	.word	0x20400070
  400280:	00400691 	.word	0x00400691

00400284 <SPI_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400284:	4b11      	ldr	r3, [pc, #68]	; (4002cc <SPI_0_PORT_init+0x48>)
  400286:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400288:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  40028c:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  40028e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400290:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  400294:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  400296:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  40029a:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  40029c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40029e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  4002a2:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4002a4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4002a6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  4002aa:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4002ac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4002b0:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4002b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4002b4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  4002b8:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4002ba:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4002bc:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
  4002c0:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4002c2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4002c6:	605a      	str	r2, [r3, #4]
  4002c8:	4770      	bx	lr
  4002ca:	bf00      	nop
  4002cc:	400e1400 	.word	0x400e1400

004002d0 <SPI_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4002d0:	4b04      	ldr	r3, [pc, #16]	; (4002e4 <SPI_0_CLOCK_init+0x14>)
  4002d2:	699b      	ldr	r3, [r3, #24]
  4002d4:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  4002d8:	d103      	bne.n	4002e2 <SPI_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4002da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4002de:	4b01      	ldr	r3, [pc, #4]	; (4002e4 <SPI_0_CLOCK_init+0x14>)
  4002e0:	611a      	str	r2, [r3, #16]
  4002e2:	4770      	bx	lr
  4002e4:	400e0600 	.word	0x400e0600

004002e8 <SPI_0_init>:
{
  4002e8:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
  4002ea:	4b08      	ldr	r3, [pc, #32]	; (40030c <SPI_0_init+0x24>)
  4002ec:	4798      	blx	r3
	spi_m_sync_set_func_ptr(&SPI_0, _spi_get_spi_m_sync());
  4002ee:	4b08      	ldr	r3, [pc, #32]	; (400310 <SPI_0_init+0x28>)
  4002f0:	4798      	blx	r3
  4002f2:	4c08      	ldr	r4, [pc, #32]	; (400314 <SPI_0_init+0x2c>)
  4002f4:	4601      	mov	r1, r0
  4002f6:	4620      	mov	r0, r4
  4002f8:	4b07      	ldr	r3, [pc, #28]	; (400318 <SPI_0_init+0x30>)
  4002fa:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SPI0);
  4002fc:	4907      	ldr	r1, [pc, #28]	; (40031c <SPI_0_init+0x34>)
  4002fe:	4620      	mov	r0, r4
  400300:	4b07      	ldr	r3, [pc, #28]	; (400320 <SPI_0_init+0x38>)
  400302:	4798      	blx	r3
	SPI_0_PORT_init();
  400304:	4b07      	ldr	r3, [pc, #28]	; (400324 <SPI_0_init+0x3c>)
  400306:	4798      	blx	r3
  400308:	bd10      	pop	{r4, pc}
  40030a:	bf00      	nop
  40030c:	004002d1 	.word	0x004002d1
  400310:	00400b45 	.word	0x00400b45
  400314:	2040004c 	.word	0x2040004c
  400318:	0040045d 	.word	0x0040045d
  40031c:	40008000 	.word	0x40008000
  400320:	0040047d 	.word	0x0040047d
  400324:	00400285 	.word	0x00400285

00400328 <RAND_0_CLOCK_init>:
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  400328:	4b05      	ldr	r3, [pc, #20]	; (400340 <RAND_0_CLOCK_init+0x18>)
  40032a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  40032e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  400332:	d104      	bne.n	40033e <RAND_0_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400334:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400338:	4b01      	ldr	r3, [pc, #4]	; (400340 <RAND_0_CLOCK_init+0x18>)
  40033a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  40033e:	4770      	bx	lr
  400340:	400e0600 	.word	0x400e0600

00400344 <RAND_0_init>:
{
	_pmc_enable_periph_clock(ID_TRNG);
}

void RAND_0_init(void)
{
  400344:	b508      	push	{r3, lr}
	RAND_0_CLOCK_init();
  400346:	4b03      	ldr	r3, [pc, #12]	; (400354 <RAND_0_init+0x10>)
  400348:	4798      	blx	r3
	rand_sync_init(&RAND_0, TRNG);
  40034a:	4903      	ldr	r1, [pc, #12]	; (400358 <RAND_0_init+0x14>)
  40034c:	4803      	ldr	r0, [pc, #12]	; (40035c <RAND_0_init+0x18>)
  40034e:	4b04      	ldr	r3, [pc, #16]	; (400360 <RAND_0_init+0x1c>)
  400350:	4798      	blx	r3
  400352:	bd08      	pop	{r3, pc}
  400354:	00400329 	.word	0x00400329
  400358:	40070000 	.word	0x40070000
  40035c:	20400044 	.word	0x20400044
  400360:	00400431 	.word	0x00400431

00400364 <USART_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400364:	4b04      	ldr	r3, [pc, #16]	; (400378 <USART_0_CLOCK_init+0x14>)
  400366:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400368:	f013 0f80 	tst.w	r3, #128	; 0x80
  40036c:	d102      	bne.n	400374 <USART_0_CLOCK_init+0x10>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40036e:	2280      	movs	r2, #128	; 0x80
  400370:	4b01      	ldr	r3, [pc, #4]	; (400378 <USART_0_CLOCK_init+0x14>)
  400372:	611a      	str	r2, [r3, #16]
  400374:	4770      	bx	lr
  400376:	bf00      	nop
  400378:	400e0600 	.word	0x400e0600

0040037c <USART_0_init>:
{
	_pmc_enable_periph_clock(ID_UART0);
}

void USART_0_init(void)
{
  40037c:	b508      	push	{r3, lr}
	USART_0_CLOCK_init();
  40037e:	4b05      	ldr	r3, [pc, #20]	; (400394 <USART_0_init+0x18>)
  400380:	4798      	blx	r3
	usart_sync_init(&USART_0, UART0, _uart_get_usart_sync());
  400382:	4b05      	ldr	r3, [pc, #20]	; (400398 <USART_0_init+0x1c>)
  400384:	4798      	blx	r3
  400386:	4602      	mov	r2, r0
  400388:	4904      	ldr	r1, [pc, #16]	; (40039c <USART_0_init+0x20>)
  40038a:	4805      	ldr	r0, [pc, #20]	; (4003a0 <USART_0_init+0x24>)
  40038c:	4b05      	ldr	r3, [pc, #20]	; (4003a4 <USART_0_init+0x28>)
  40038e:	4798      	blx	r3
  400390:	bd08      	pop	{r3, pc}
  400392:	bf00      	nop
  400394:	00400365 	.word	0x00400365
  400398:	00400ead 	.word	0x00400ead
  40039c:	400e0800 	.word	0x400e0800
  4003a0:	20400064 	.word	0x20400064
  4003a4:	0040079d 	.word	0x0040079d

004003a8 <system_init>:
	USART_0_PORT_init();
}

void system_init(void)
{
  4003a8:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  4003aa:	4b08      	ldr	r3, [pc, #32]	; (4003cc <system_init+0x24>)
  4003ac:	4798      	blx	r3
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  4003ae:	4a08      	ldr	r2, [pc, #32]	; (4003d0 <system_init+0x28>)
  4003b0:	6853      	ldr	r3, [r2, #4]
  4003b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  4003b6:	6053      	str	r3, [r2, #4]
	init_mcu();

	/* Disable Watchdog */
	hri_wdt_set_MR_WDDIS_bit(WDT);

	SPI_0_init();
  4003b8:	4b06      	ldr	r3, [pc, #24]	; (4003d4 <system_init+0x2c>)
  4003ba:	4798      	blx	r3
	TIMER_0_init();
  4003bc:	4b06      	ldr	r3, [pc, #24]	; (4003d8 <system_init+0x30>)
  4003be:	4798      	blx	r3

	RAND_0_init();
  4003c0:	4b06      	ldr	r3, [pc, #24]	; (4003dc <system_init+0x34>)
  4003c2:	4798      	blx	r3

	USART_0_init();
  4003c4:	4b06      	ldr	r3, [pc, #24]	; (4003e0 <system_init+0x38>)
  4003c6:	4798      	blx	r3
  4003c8:	bd08      	pop	{r3, pc}
  4003ca:	bf00      	nop
  4003cc:	00400845 	.word	0x00400845
  4003d0:	400e1850 	.word	0x400e1850
  4003d4:	004002e9 	.word	0x004002e9
  4003d8:	0040024d 	.word	0x0040024d
  4003dc:	00400345 	.word	0x00400345
  4003e0:	0040037d 	.word	0x0040037d

004003e4 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  4003e4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  4003e8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  4003ea:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  4003ec:	f3bf 8f5f 	dmb	sy
  4003f0:	4770      	bx	lr

004003f2 <atomic_leave_critical>:
  4003f2:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  4003f6:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  4003f8:	f383 8810 	msr	PRIMASK, r3
  4003fc:	4770      	bx	lr
	...

00400400 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  400400:	b570      	push	{r4, r5, r6, lr}
  400402:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400404:	4604      	mov	r4, r0
  400406:	460d      	mov	r5, r1
  400408:	2800      	cmp	r0, #0
  40040a:	bf18      	it	ne
  40040c:	2900      	cmpne	r1, #0
  40040e:	bf14      	ite	ne
  400410:	2001      	movne	r0, #1
  400412:	2000      	moveq	r0, #0
  400414:	223d      	movs	r2, #61	; 0x3d
  400416:	4904      	ldr	r1, [pc, #16]	; (400428 <io_read+0x28>)
  400418:	4b04      	ldr	r3, [pc, #16]	; (40042c <io_read+0x2c>)
  40041a:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  40041c:	6863      	ldr	r3, [r4, #4]
  40041e:	4632      	mov	r2, r6
  400420:	4629      	mov	r1, r5
  400422:	4620      	mov	r0, r4
  400424:	4798      	blx	r3
}
  400426:	bd70      	pop	{r4, r5, r6, pc}
  400428:	00400f94 	.word	0x00400f94
  40042c:	004007e5 	.word	0x004007e5

00400430 <rand_sync_init>:
#include "hal_rand_sync.h"

#define HAL_RNG_SYNC_VERSION 0x00000001u

int32_t rand_sync_init(struct rand_sync_desc *const desc, void *const hw)
{
  400430:	b538      	push	{r3, r4, r5, lr}
  400432:	460d      	mov	r5, r1
	ASSERT(desc);
  400434:	4604      	mov	r4, r0
  400436:	2229      	movs	r2, #41	; 0x29
  400438:	4905      	ldr	r1, [pc, #20]	; (400450 <rand_sync_init+0x20>)
  40043a:	3000      	adds	r0, #0
  40043c:	bf18      	it	ne
  40043e:	2001      	movne	r0, #1
  400440:	4b04      	ldr	r3, [pc, #16]	; (400454 <rand_sync_init+0x24>)
  400442:	4798      	blx	r3

	return _rand_sync_init(&desc->dev, hw);
  400444:	4629      	mov	r1, r5
  400446:	4620      	mov	r0, r4
  400448:	4b03      	ldr	r3, [pc, #12]	; (400458 <rand_sync_init+0x28>)
  40044a:	4798      	blx	r3
}
  40044c:	bd38      	pop	{r3, r4, r5, pc}
  40044e:	bf00      	nop
  400450:	00400fa8 	.word	0x00400fa8
  400454:	004007e5 	.word	0x004007e5
  400458:	00400c81 	.word	0x00400c81

0040045c <spi_m_sync_set_func_ptr>:

/**
 *  \brief Initialize the SPI HAL instance function pointer for HPL APIs.
 */
void spi_m_sync_set_func_ptr(struct spi_m_sync_descriptor *spi, void *const func)
{
  40045c:	b538      	push	{r3, r4, r5, lr}
  40045e:	460d      	mov	r5, r1
	ASSERT(spi);
  400460:	4604      	mov	r4, r0
  400462:	2239      	movs	r2, #57	; 0x39
  400464:	4903      	ldr	r1, [pc, #12]	; (400474 <spi_m_sync_set_func_ptr+0x18>)
  400466:	3000      	adds	r0, #0
  400468:	bf18      	it	ne
  40046a:	2001      	movne	r0, #1
  40046c:	4b02      	ldr	r3, [pc, #8]	; (400478 <spi_m_sync_set_func_ptr+0x1c>)
  40046e:	4798      	blx	r3
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
  400470:	6025      	str	r5, [r4, #0]
  400472:	bd38      	pop	{r3, r4, r5, pc}
  400474:	00400fc4 	.word	0x00400fc4
  400478:	004007e5 	.word	0x004007e5

0040047c <spi_m_sync_init>:
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
  40047c:	b538      	push	{r3, r4, r5, lr}
	int32_t rc = 0;
	ASSERT(spi && hw);
  40047e:	4604      	mov	r4, r0
  400480:	460d      	mov	r5, r1
  400482:	2800      	cmp	r0, #0
  400484:	bf18      	it	ne
  400486:	2900      	cmpne	r1, #0
  400488:	bf14      	ite	ne
  40048a:	2001      	movne	r0, #1
  40048c:	2000      	moveq	r0, #0
  40048e:	2240      	movs	r2, #64	; 0x40
  400490:	4909      	ldr	r1, [pc, #36]	; (4004b8 <spi_m_sync_init+0x3c>)
  400492:	4b0a      	ldr	r3, [pc, #40]	; (4004bc <spi_m_sync_init+0x40>)
  400494:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
  400496:	4620      	mov	r0, r4
  400498:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
  40049c:	4629      	mov	r1, r5
  40049e:	4b08      	ldr	r3, [pc, #32]	; (4004c0 <spi_m_sync_init+0x44>)
  4004a0:	4798      	blx	r3

	if (rc < 0) {
  4004a2:	2800      	cmp	r0, #0
  4004a4:	db07      	blt.n	4004b6 <spi_m_sync_init+0x3a>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
  4004a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4004aa:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
  4004ac:	4b05      	ldr	r3, [pc, #20]	; (4004c4 <spi_m_sync_init+0x48>)
  4004ae:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
  4004b0:	4b05      	ldr	r3, [pc, #20]	; (4004c8 <spi_m_sync_init+0x4c>)
  4004b2:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
  4004b4:	2000      	movs	r0, #0
}
  4004b6:	bd38      	pop	{r3, r4, r5, pc}
  4004b8:	00400fc4 	.word	0x00400fc4
  4004bc:	004007e5 	.word	0x004007e5
  4004c0:	00400969 	.word	0x00400969
  4004c4:	00400571 	.word	0x00400571
  4004c8:	00400535 	.word	0x00400535

004004cc <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
  4004cc:	b510      	push	{r4, lr}
	ASSERT(spi);
  4004ce:	4604      	mov	r4, r0
  4004d0:	2257      	movs	r2, #87	; 0x57
  4004d2:	4905      	ldr	r1, [pc, #20]	; (4004e8 <spi_m_sync_enable+0x1c>)
  4004d4:	3000      	adds	r0, #0
  4004d6:	bf18      	it	ne
  4004d8:	2001      	movne	r0, #1
  4004da:	4b04      	ldr	r3, [pc, #16]	; (4004ec <spi_m_sync_enable+0x20>)
  4004dc:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
  4004de:	1d20      	adds	r0, r4, #4
  4004e0:	4b03      	ldr	r3, [pc, #12]	; (4004f0 <spi_m_sync_enable+0x24>)
  4004e2:	4798      	blx	r3
  4004e4:	bd10      	pop	{r4, pc}
  4004e6:	bf00      	nop
  4004e8:	00400fc4 	.word	0x00400fc4
  4004ec:	004007e5 	.word	0x004007e5
  4004f0:	00400a11 	.word	0x00400a11

004004f4 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
  4004f4:	b530      	push	{r4, r5, lr}
  4004f6:	b085      	sub	sp, #20
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
  4004f8:	4605      	mov	r5, r0
  4004fa:	460c      	mov	r4, r1
  4004fc:	2800      	cmp	r0, #0
  4004fe:	bf18      	it	ne
  400500:	2900      	cmpne	r1, #0
  400502:	bf14      	ite	ne
  400504:	2001      	movne	r0, #1
  400506:	2000      	moveq	r0, #0
  400508:	22b3      	movs	r2, #179	; 0xb3
  40050a:	4907      	ldr	r1, [pc, #28]	; (400528 <spi_m_sync_transfer+0x34>)
  40050c:	4b07      	ldr	r3, [pc, #28]	; (40052c <spi_m_sync_transfer+0x38>)
  40050e:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
  400510:	6823      	ldr	r3, [r4, #0]
  400512:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
  400514:	6863      	ldr	r3, [r4, #4]
  400516:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
  400518:	68a3      	ldr	r3, [r4, #8]
  40051a:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
  40051c:	a901      	add	r1, sp, #4
  40051e:	1d28      	adds	r0, r5, #4
  400520:	4b03      	ldr	r3, [pc, #12]	; (400530 <spi_m_sync_transfer+0x3c>)
  400522:	4798      	blx	r3
}
  400524:	b005      	add	sp, #20
  400526:	bd30      	pop	{r4, r5, pc}
  400528:	00400fc4 	.word	0x00400fc4
  40052c:	004007e5 	.word	0x004007e5
  400530:	00400a45 	.word	0x00400a45

00400534 <_spi_m_sync_io_write>:
{
  400534:	b570      	push	{r4, r5, r6, lr}
  400536:	b084      	sub	sp, #16
  400538:	460e      	mov	r6, r1
  40053a:	4615      	mov	r5, r2
	ASSERT(io);
  40053c:	4604      	mov	r4, r0
  40053e:	22a3      	movs	r2, #163	; 0xa3
  400540:	4908      	ldr	r1, [pc, #32]	; (400564 <_spi_m_sync_io_write+0x30>)
  400542:	3000      	adds	r0, #0
  400544:	bf18      	it	ne
  400546:	2001      	movne	r0, #1
  400548:	4b07      	ldr	r3, [pc, #28]	; (400568 <_spi_m_sync_io_write+0x34>)
  40054a:	4798      	blx	r3
	xfer.rxbuf = 0;
  40054c:	2300      	movs	r3, #0
  40054e:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
  400550:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
  400552:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  400554:	a901      	add	r1, sp, #4
  400556:	f1a4 000c 	sub.w	r0, r4, #12
  40055a:	4b04      	ldr	r3, [pc, #16]	; (40056c <_spi_m_sync_io_write+0x38>)
  40055c:	4798      	blx	r3
}
  40055e:	b004      	add	sp, #16
  400560:	bd70      	pop	{r4, r5, r6, pc}
  400562:	bf00      	nop
  400564:	00400fc4 	.word	0x00400fc4
  400568:	004007e5 	.word	0x004007e5
  40056c:	004004f5 	.word	0x004004f5

00400570 <_spi_m_sync_io_read>:
{
  400570:	b570      	push	{r4, r5, r6, lr}
  400572:	b084      	sub	sp, #16
  400574:	460e      	mov	r6, r1
  400576:	4615      	mov	r5, r2
	ASSERT(io);
  400578:	4604      	mov	r4, r0
  40057a:	2287      	movs	r2, #135	; 0x87
  40057c:	4908      	ldr	r1, [pc, #32]	; (4005a0 <_spi_m_sync_io_read+0x30>)
  40057e:	3000      	adds	r0, #0
  400580:	bf18      	it	ne
  400582:	2001      	movne	r0, #1
  400584:	4b07      	ldr	r3, [pc, #28]	; (4005a4 <_spi_m_sync_io_read+0x34>)
  400586:	4798      	blx	r3
	xfer.rxbuf = buf;
  400588:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
  40058a:	2300      	movs	r3, #0
  40058c:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
  40058e:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  400590:	a901      	add	r1, sp, #4
  400592:	f1a4 000c 	sub.w	r0, r4, #12
  400596:	4b04      	ldr	r3, [pc, #16]	; (4005a8 <_spi_m_sync_io_read+0x38>)
  400598:	4798      	blx	r3
}
  40059a:	b004      	add	sp, #16
  40059c:	bd70      	pop	{r4, r5, r6, pc}
  40059e:	bf00      	nop
  4005a0:	00400fc4 	.word	0x00400fc4
  4005a4:	004007e5 	.word	0x004007e5
  4005a8:	004004f5 	.word	0x004004f5

004005ac <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
  4005ac:	b538      	push	{r3, r4, r5, lr}
	ASSERT(spi && io);
  4005ae:	4604      	mov	r4, r0
  4005b0:	460d      	mov	r5, r1
  4005b2:	2800      	cmp	r0, #0
  4005b4:	bf18      	it	ne
  4005b6:	2900      	cmpne	r1, #0
  4005b8:	bf14      	ite	ne
  4005ba:	2001      	movne	r0, #1
  4005bc:	2000      	moveq	r0, #0
  4005be:	22bd      	movs	r2, #189	; 0xbd
  4005c0:	4903      	ldr	r1, [pc, #12]	; (4005d0 <spi_m_sync_get_io_descriptor+0x24>)
  4005c2:	4b04      	ldr	r3, [pc, #16]	; (4005d4 <spi_m_sync_get_io_descriptor+0x28>)
  4005c4:	4798      	blx	r3
	*io = &spi->io;
  4005c6:	340c      	adds	r4, #12
  4005c8:	602c      	str	r4, [r5, #0]
	return 0;
}
  4005ca:	2000      	movs	r0, #0
  4005cc:	bd38      	pop	{r3, r4, r5, pc}
  4005ce:	bf00      	nop
  4005d0:	00400fc4 	.word	0x00400fc4
  4005d4:	004007e5 	.word	0x004007e5

004005d8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  4005d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  4005da:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  4005dc:	b117      	cbz	r7, 4005e4 <timer_add_timer_task+0xc>
  4005de:	463c      	mov	r4, r7
  4005e0:	2600      	movs	r6, #0
  4005e2:	e00b      	b.n	4005fc <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  4005e4:	4b0e      	ldr	r3, [pc, #56]	; (400620 <timer_add_timer_task+0x48>)
  4005e6:	4798      	blx	r3
		return;
  4005e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  4005ea:	68a5      	ldr	r5, [r4, #8]
  4005ec:	442b      	add	r3, r5
  4005ee:	1a9b      	subs	r3, r3, r2
  4005f0:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  4005f2:	688d      	ldr	r5, [r1, #8]
  4005f4:	42ab      	cmp	r3, r5
  4005f6:	d209      	bcs.n	40060c <timer_add_timer_task+0x34>
			break;
		prev = it;
  4005f8:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  4005fa:	6824      	ldr	r4, [r4, #0]
  4005fc:	b134      	cbz	r4, 40060c <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  4005fe:	6863      	ldr	r3, [r4, #4]
  400600:	4293      	cmp	r3, r2
  400602:	d8f2      	bhi.n	4005ea <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  400604:	68a5      	ldr	r5, [r4, #8]
  400606:	1a9b      	subs	r3, r3, r2
  400608:	442b      	add	r3, r5
  40060a:	e7f2      	b.n	4005f2 <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  40060c:	42bc      	cmp	r4, r7
  40060e:	d003      	beq.n	400618 <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  400610:	4630      	mov	r0, r6
  400612:	4b04      	ldr	r3, [pc, #16]	; (400624 <timer_add_timer_task+0x4c>)
  400614:	4798      	blx	r3
  400616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  400618:	4b01      	ldr	r3, [pc, #4]	; (400620 <timer_add_timer_task+0x48>)
  40061a:	4798      	blx	r3
  40061c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40061e:	bf00      	nop
  400620:	00400801 	.word	0x00400801
  400624:	0040082d 	.word	0x0040082d

00400628 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  400628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40062a:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  40062c:	6906      	ldr	r6, [r0, #16]
  40062e:	3601      	adds	r6, #1
  400630:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  400632:	7e03      	ldrb	r3, [r0, #24]
  400634:	f013 0f01 	tst.w	r3, #1
  400638:	d105      	bne.n	400646 <timer_process_counted+0x1e>
  40063a:	7e03      	ldrb	r3, [r0, #24]
  40063c:	f013 0f02 	tst.w	r3, #2
  400640:	d101      	bne.n	400646 <timer_process_counted+0x1e>
  400642:	4605      	mov	r5, r0
  400644:	e009      	b.n	40065a <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  400646:	7e03      	ldrb	r3, [r0, #24]
  400648:	f043 0302 	orr.w	r3, r3, #2
  40064c:	7603      	strb	r3, [r0, #24]
		return;
  40064e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400650:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  400652:	68e3      	ldr	r3, [r4, #12]
  400654:	4620      	mov	r0, r4
  400656:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  400658:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  40065a:	b19c      	cbz	r4, 400684 <timer_process_counted+0x5c>
  40065c:	6863      	ldr	r3, [r4, #4]
  40065e:	1af3      	subs	r3, r6, r3
  400660:	68a2      	ldr	r2, [r4, #8]
  400662:	4293      	cmp	r3, r2
  400664:	d30e      	bcc.n	400684 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  400666:	f105 0714 	add.w	r7, r5, #20
  40066a:	4638      	mov	r0, r7
  40066c:	4b06      	ldr	r3, [pc, #24]	; (400688 <timer_process_counted+0x60>)
  40066e:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  400670:	7c23      	ldrb	r3, [r4, #16]
  400672:	2b01      	cmp	r3, #1
  400674:	d1ec      	bne.n	400650 <timer_process_counted+0x28>
			tmp->time_label = time;
  400676:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  400678:	4632      	mov	r2, r6
  40067a:	4621      	mov	r1, r4
  40067c:	4638      	mov	r0, r7
  40067e:	4b03      	ldr	r3, [pc, #12]	; (40068c <timer_process_counted+0x64>)
  400680:	4798      	blx	r3
  400682:	e7e5      	b.n	400650 <timer_process_counted+0x28>
  400684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400686:	bf00      	nop
  400688:	00400835 	.word	0x00400835
  40068c:	004005d9 	.word	0x004005d9

00400690 <timer_init>:
{
  400690:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400692:	4604      	mov	r4, r0
  400694:	460d      	mov	r5, r1
  400696:	2800      	cmp	r0, #0
  400698:	bf18      	it	ne
  40069a:	2900      	cmpne	r1, #0
  40069c:	bf14      	ite	ne
  40069e:	2001      	movne	r0, #1
  4006a0:	2000      	moveq	r0, #0
  4006a2:	223b      	movs	r2, #59	; 0x3b
  4006a4:	4905      	ldr	r1, [pc, #20]	; (4006bc <timer_init+0x2c>)
  4006a6:	4b06      	ldr	r3, [pc, #24]	; (4006c0 <timer_init+0x30>)
  4006a8:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  4006aa:	4629      	mov	r1, r5
  4006ac:	4620      	mov	r0, r4
  4006ae:	4b05      	ldr	r3, [pc, #20]	; (4006c4 <timer_init+0x34>)
  4006b0:	4798      	blx	r3
	descr->time                           = 0;
  4006b2:	2000      	movs	r0, #0
  4006b4:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  4006b6:	4b04      	ldr	r3, [pc, #16]	; (4006c8 <timer_init+0x38>)
  4006b8:	6023      	str	r3, [r4, #0]
}
  4006ba:	bd38      	pop	{r3, r4, r5, pc}
  4006bc:	00400fe0 	.word	0x00400fe0
  4006c0:	004007e5 	.word	0x004007e5
  4006c4:	00400bad 	.word	0x00400bad
  4006c8:	00400629 	.word	0x00400629

004006cc <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  4006cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4006ce:	4616      	mov	r6, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  4006d0:	4605      	mov	r5, r0
  4006d2:	460f      	mov	r7, r1
  4006d4:	2800      	cmp	r0, #0
  4006d6:	bf18      	it	ne
  4006d8:	2900      	cmpne	r1, #0
  4006da:	d002      	beq.n	4006e2 <usart_sync_write+0x16>
  4006dc:	bb0a      	cbnz	r2, 400722 <usart_sync_write+0x56>
  4006de:	2000      	movs	r0, #0
  4006e0:	e000      	b.n	4006e4 <usart_sync_write+0x18>
  4006e2:	2000      	movs	r0, #0
  4006e4:	22f1      	movs	r2, #241	; 0xf1
  4006e6:	4910      	ldr	r1, [pc, #64]	; (400728 <usart_sync_write+0x5c>)
  4006e8:	4b10      	ldr	r3, [pc, #64]	; (40072c <usart_sync_write+0x60>)
  4006ea:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
  4006ec:	f105 0408 	add.w	r4, r5, #8
  4006f0:	4620      	mov	r0, r4
  4006f2:	4b0f      	ldr	r3, [pc, #60]	; (400730 <usart_sync_write+0x64>)
  4006f4:	4798      	blx	r3
  4006f6:	2800      	cmp	r0, #0
  4006f8:	d0f8      	beq.n	4006ec <usart_sync_write+0x20>
  4006fa:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
  4006fc:	5d79      	ldrb	r1, [r7, r5]
  4006fe:	4620      	mov	r0, r4
  400700:	4b0c      	ldr	r3, [pc, #48]	; (400734 <usart_sync_write+0x68>)
  400702:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
  400704:	4620      	mov	r0, r4
  400706:	4b0a      	ldr	r3, [pc, #40]	; (400730 <usart_sync_write+0x64>)
  400708:	4798      	blx	r3
  40070a:	2800      	cmp	r0, #0
  40070c:	d0fa      	beq.n	400704 <usart_sync_write+0x38>
			;
	} while (++offset < length);
  40070e:	3501      	adds	r5, #1
  400710:	42b5      	cmp	r5, r6
  400712:	d3f3      	bcc.n	4006fc <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
  400714:	4620      	mov	r0, r4
  400716:	4b08      	ldr	r3, [pc, #32]	; (400738 <usart_sync_write+0x6c>)
  400718:	4798      	blx	r3
  40071a:	2800      	cmp	r0, #0
  40071c:	d0fa      	beq.n	400714 <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
  40071e:	4628      	mov	r0, r5
  400720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
  400722:	2001      	movs	r0, #1
  400724:	e7de      	b.n	4006e4 <usart_sync_write+0x18>
  400726:	bf00      	nop
  400728:	00400ff8 	.word	0x00400ff8
  40072c:	004007e5 	.word	0x004007e5
  400730:	00400e35 	.word	0x00400e35
  400734:	00400ded 	.word	0x00400ded
  400738:	00400e5d 	.word	0x00400e5d

0040073c <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  40073c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400740:	4617      	mov	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
  400742:	4605      	mov	r5, r0
  400744:	4688      	mov	r8, r1
  400746:	2800      	cmp	r0, #0
  400748:	bf18      	it	ne
  40074a:	2900      	cmpne	r1, #0
  40074c:	d002      	beq.n	400754 <usart_sync_read+0x18>
  40074e:	b9d2      	cbnz	r2, 400786 <usart_sync_read+0x4a>
  400750:	2000      	movs	r0, #0
  400752:	e000      	b.n	400756 <usart_sync_read+0x1a>
  400754:	2000      	movs	r0, #0
  400756:	f44f 7286 	mov.w	r2, #268	; 0x10c
  40075a:	490c      	ldr	r1, [pc, #48]	; (40078c <usart_sync_read+0x50>)
  40075c:	4b0c      	ldr	r3, [pc, #48]	; (400790 <usart_sync_read+0x54>)
  40075e:	4798      	blx	r3
	uint32_t                      offset = 0;
  400760:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
  400762:	f105 0408 	add.w	r4, r5, #8
  400766:	4620      	mov	r0, r4
  400768:	4b0a      	ldr	r3, [pc, #40]	; (400794 <usart_sync_read+0x58>)
  40076a:	4798      	blx	r3
  40076c:	2800      	cmp	r0, #0
  40076e:	d0f8      	beq.n	400762 <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
  400770:	4620      	mov	r0, r4
  400772:	4b09      	ldr	r3, [pc, #36]	; (400798 <usart_sync_read+0x5c>)
  400774:	4798      	blx	r3
  400776:	f808 0006 	strb.w	r0, [r8, r6]
	} while (++offset < length);
  40077a:	3601      	adds	r6, #1
  40077c:	42be      	cmp	r6, r7
  40077e:	d3f0      	bcc.n	400762 <usart_sync_read+0x26>

	return (int32_t)offset;
}
  400780:	4630      	mov	r0, r6
  400782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ASSERT(io_descr && buf && length);
  400786:	2001      	movs	r0, #1
  400788:	e7e5      	b.n	400756 <usart_sync_read+0x1a>
  40078a:	bf00      	nop
  40078c:	00400ff8 	.word	0x00400ff8
  400790:	004007e5 	.word	0x004007e5
  400794:	00400e85 	.word	0x00400e85
  400798:	00400e11 	.word	0x00400e11

0040079c <usart_sync_init>:
{
  40079c:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  40079e:	4604      	mov	r4, r0
  4007a0:	460d      	mov	r5, r1
  4007a2:	2800      	cmp	r0, #0
  4007a4:	bf18      	it	ne
  4007a6:	2900      	cmpne	r1, #0
  4007a8:	bf14      	ite	ne
  4007aa:	2001      	movne	r0, #1
  4007ac:	2000      	moveq	r0, #0
  4007ae:	2234      	movs	r2, #52	; 0x34
  4007b0:	4907      	ldr	r1, [pc, #28]	; (4007d0 <usart_sync_init+0x34>)
  4007b2:	4b08      	ldr	r3, [pc, #32]	; (4007d4 <usart_sync_init+0x38>)
  4007b4:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
  4007b6:	4629      	mov	r1, r5
  4007b8:	f104 0008 	add.w	r0, r4, #8
  4007bc:	4b06      	ldr	r3, [pc, #24]	; (4007d8 <usart_sync_init+0x3c>)
  4007be:	4798      	blx	r3
	if (init_status) {
  4007c0:	4603      	mov	r3, r0
  4007c2:	b918      	cbnz	r0, 4007cc <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
  4007c4:	4a05      	ldr	r2, [pc, #20]	; (4007dc <usart_sync_init+0x40>)
  4007c6:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_sync_write;
  4007c8:	4a05      	ldr	r2, [pc, #20]	; (4007e0 <usart_sync_init+0x44>)
  4007ca:	6022      	str	r2, [r4, #0]
}
  4007cc:	4618      	mov	r0, r3
  4007ce:	bd38      	pop	{r3, r4, r5, pc}
  4007d0:	00400ff8 	.word	0x00400ff8
  4007d4:	004007e5 	.word	0x004007e5
  4007d8:	00400db5 	.word	0x00400db5
  4007dc:	0040073d 	.word	0x0040073d
  4007e0:	004006cd 	.word	0x004006cd

004007e4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  4007e4:	b900      	cbnz	r0, 4007e8 <assert+0x4>
		__asm("BKPT #0");
  4007e6:	be00      	bkpt	0x0000
  4007e8:	4770      	bx	lr

004007ea <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  4007ea:	6803      	ldr	r3, [r0, #0]
  4007ec:	b11b      	cbz	r3, 4007f6 <is_list_element+0xc>
		if (it == element) {
  4007ee:	428b      	cmp	r3, r1
  4007f0:	d003      	beq.n	4007fa <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  4007f2:	681b      	ldr	r3, [r3, #0]
  4007f4:	e7fa      	b.n	4007ec <is_list_element+0x2>
			return true;
		}
	}

	return false;
  4007f6:	2000      	movs	r0, #0
  4007f8:	4770      	bx	lr
			return true;
  4007fa:	2001      	movs	r0, #1
}
  4007fc:	4770      	bx	lr
	...

00400800 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  400800:	b538      	push	{r3, r4, r5, lr}
  400802:	4604      	mov	r4, r0
  400804:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  400806:	4b06      	ldr	r3, [pc, #24]	; (400820 <list_insert_as_head+0x20>)
  400808:	4798      	blx	r3
  40080a:	f080 0001 	eor.w	r0, r0, #1
  40080e:	2239      	movs	r2, #57	; 0x39
  400810:	4904      	ldr	r1, [pc, #16]	; (400824 <list_insert_as_head+0x24>)
  400812:	b2c0      	uxtb	r0, r0
  400814:	4b04      	ldr	r3, [pc, #16]	; (400828 <list_insert_as_head+0x28>)
  400816:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  400818:	6823      	ldr	r3, [r4, #0]
  40081a:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  40081c:	6025      	str	r5, [r4, #0]
  40081e:	bd38      	pop	{r3, r4, r5, pc}
  400820:	004007eb 	.word	0x004007eb
  400824:	00401014 	.word	0x00401014
  400828:	004007e5 	.word	0x004007e5

0040082c <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  40082c:	6803      	ldr	r3, [r0, #0]
  40082e:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  400830:	6001      	str	r1, [r0, #0]
  400832:	4770      	bx	lr

00400834 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  400834:	6803      	ldr	r3, [r0, #0]
  400836:	b11b      	cbz	r3, 400840 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  400838:	681a      	ldr	r2, [r3, #0]
  40083a:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  40083c:	4618      	mov	r0, r3
  40083e:	4770      	bx	lr
	}

	return NULL;
  400840:	2000      	movs	r0, #0
}
  400842:	4770      	bx	lr

00400844 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  400844:	b500      	push	{lr}
  400846:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  400848:	a801      	add	r0, sp, #4
  40084a:	4b0e      	ldr	r3, [pc, #56]	; (400884 <_init_chip+0x40>)
  40084c:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  40084e:	4a0e      	ldr	r2, [pc, #56]	; (400888 <_init_chip+0x44>)
  400850:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  400854:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400858:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  40085c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400860:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  400864:	a801      	add	r0, sp, #4
  400866:	4b09      	ldr	r3, [pc, #36]	; (40088c <_init_chip+0x48>)
  400868:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  40086a:	4a09      	ldr	r2, [pc, #36]	; (400890 <_init_chip+0x4c>)
  40086c:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  40086e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  400872:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  400876:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  400878:	4b06      	ldr	r3, [pc, #24]	; (400894 <_init_chip+0x50>)
  40087a:	4798      	blx	r3
}
  40087c:	b003      	add	sp, #12
  40087e:	f85d fb04 	ldr.w	pc, [sp], #4
  400882:	bf00      	nop
  400884:	004003e5 	.word	0x004003e5
  400888:	e000ed00 	.word	0xe000ed00
  40088c:	004003f3 	.word	0x004003f3
  400890:	400e0c00 	.word	0x400e0c00
  400894:	00400935 	.word	0x00400935

00400898 <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  400898:	490e      	ldr	r1, [pc, #56]	; (4008d4 <_pmc_init_sources+0x3c>)
  40089a:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  40089c:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  4008a0:	4b0d      	ldr	r3, [pc, #52]	; (4008d8 <_pmc_init_sources+0x40>)
  4008a2:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  4008a4:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  4008a6:	4b0b      	ldr	r3, [pc, #44]	; (4008d4 <_pmc_init_sources+0x3c>)
  4008a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  4008aa:	f013 0f01 	tst.w	r3, #1
  4008ae:	d0fa      	beq.n	4008a6 <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  4008b0:	4b08      	ldr	r3, [pc, #32]	; (4008d4 <_pmc_init_sources+0x3c>)
  4008b2:	6a19      	ldr	r1, [r3, #32]
  4008b4:	4a09      	ldr	r2, [pc, #36]	; (4008dc <_pmc_init_sources+0x44>)
  4008b6:	430a      	orrs	r2, r1
  4008b8:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  4008ba:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  4008bc:	4a08      	ldr	r2, [pc, #32]	; (4008e0 <_pmc_init_sources+0x48>)
  4008be:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  4008c0:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  4008c2:	4a08      	ldr	r2, [pc, #32]	; (4008e4 <_pmc_init_sources+0x4c>)
  4008c4:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  4008c6:	4b03      	ldr	r3, [pc, #12]	; (4008d4 <_pmc_init_sources+0x3c>)
  4008c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  4008ca:	f013 0f02 	tst.w	r3, #2
  4008ce:	d0fa      	beq.n	4008c6 <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  4008d0:	4770      	bx	lr
  4008d2:	bf00      	nop
  4008d4:	400e0600 	.word	0x400e0600
  4008d8:	00373e01 	.word	0x00373e01
  4008dc:	01370000 	.word	0x01370000
  4008e0:	f800ffff 	.word	0xf800ffff
  4008e4:	20183f01 	.word	0x20183f01

004008e8 <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4008e8:	4a11      	ldr	r2, [pc, #68]	; (400930 <_pmc_init_master_clock+0x48>)
  4008ea:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  4008ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  4008f0:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  4008f2:	4b0f      	ldr	r3, [pc, #60]	; (400930 <_pmc_init_master_clock+0x48>)
  4008f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  4008f6:	f013 0f08 	tst.w	r3, #8
  4008fa:	d0fa      	beq.n	4008f2 <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  4008fc:	4a0c      	ldr	r2, [pc, #48]	; (400930 <_pmc_init_master_clock+0x48>)
  4008fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  400900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  400904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  400908:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  40090a:	4b09      	ldr	r3, [pc, #36]	; (400930 <_pmc_init_master_clock+0x48>)
  40090c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  40090e:	f013 0f08 	tst.w	r3, #8
  400912:	d0fa      	beq.n	40090a <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400914:	4a06      	ldr	r2, [pc, #24]	; (400930 <_pmc_init_master_clock+0x48>)
  400916:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  400918:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  40091c:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  400920:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400922:	4b03      	ldr	r3, [pc, #12]	; (400930 <_pmc_init_master_clock+0x48>)
  400924:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400926:	f013 0f08 	tst.w	r3, #8
  40092a:	d0fa      	beq.n	400922 <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  40092c:	4770      	bx	lr
  40092e:	bf00      	nop
  400930:	400e0600 	.word	0x400e0600

00400934 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  400934:	b508      	push	{r3, lr}
	_pmc_init_sources();
  400936:	4b02      	ldr	r3, [pc, #8]	; (400940 <_pmc_init+0xc>)
  400938:	4798      	blx	r3
	_pmc_init_master_clock();
  40093a:	4b02      	ldr	r3, [pc, #8]	; (400944 <_pmc_init+0x10>)
  40093c:	4798      	blx	r3
  40093e:	bd08      	pop	{r3, pc}
  400940:	00400899 	.word	0x00400899
  400944:	004008e9 	.word	0x004008e9

00400948 <_spi_sync_enable>:
}

static inline void hri_spi_write_CR_reg(const void *const hw, hri_spi_cr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_CR = data;
  400948:	2301      	movs	r3, #1
  40094a:	6003      	str	r3, [r0, #0]
static int32_t _spi_sync_enable(void *const hw)
{
	hri_spi_write_CR_reg(hw, SPI_CR_SPIEN);

	return ERR_NONE;
}
  40094c:	2000      	movs	r0, #0
  40094e:	4770      	bx	lr

00400950 <_spi_get_hardware_index>:
 * \brief Retrieve ordinal number of the given SPI hardware instance
 */
static uint8_t _spi_get_hardware_index(const void *const hw)
{

	uint8_t index = ((uint32_t)hw - (uint32_t)SPI0) >> 16;
  400950:	4b04      	ldr	r3, [pc, #16]	; (400964 <_spi_get_hardware_index+0x14>)
  400952:	4403      	add	r3, r0
  400954:	f3c3 4307 	ubfx	r3, r3, #16, #8

	if (index == 5) {
  400958:	2b05      	cmp	r3, #5
  40095a:	d001      	beq.n	400960 <_spi_get_hardware_index+0x10>
		return 1;
	} else {
		return 0;
  40095c:	2000      	movs	r0, #0
	}
}
  40095e:	4770      	bx	lr
		return 1;
  400960:	2001      	movs	r0, #1
  400962:	4770      	bx	lr
  400964:	bfff8000 	.word	0xbfff8000

00400968 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
  400968:	b570      	push	{r4, r5, r6, lr}
  40096a:	4606      	mov	r6, r0
  40096c:	460c      	mov	r4, r1
	uint8_t n = _spi_get_hardware_index((const void *)hw_addr);
  40096e:	4608      	mov	r0, r1
  400970:	4b20      	ldr	r3, [pc, #128]	; (4009f4 <_spi_m_sync_init+0x8c>)
  400972:	4798      	blx	r3
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  400974:	2300      	movs	r3, #0
  400976:	b33b      	cbz	r3, 4009c8 <_spi_m_sync_init+0x60>
	return NULL;
  400978:	2500      	movs	r5, #0
	const struct spi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
  40097a:	f44f 729a 	mov.w	r2, #308	; 0x134
  40097e:	491e      	ldr	r1, [pc, #120]	; (4009f8 <_spi_m_sync_init+0x90>)
  400980:	2e00      	cmp	r6, #0
  400982:	bf18      	it	ne
  400984:	2c00      	cmpne	r4, #0
  400986:	bf14      	ite	ne
  400988:	2001      	movne	r0, #1
  40098a:	2000      	moveq	r0, #0
  40098c:	4b1b      	ldr	r3, [pc, #108]	; (4009fc <_spi_m_sync_init+0x94>)
  40098e:	4798      	blx	r3

	if (regs == NULL) {
  400990:	b355      	cbz	r5, 4009e8 <_spi_m_sync_init+0x80>
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  400992:	6923      	ldr	r3, [r4, #16]
		return ERR_INVALID_ARG;
	}

	if (hri_spi_get_SR_SPIENS_bit(hw)) {
  400994:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400998:	d129      	bne.n	4009ee <_spi_m_sync_init+0x86>
	((Spi *)hw)->SPI_CR = data;
  40099a:	2380      	movs	r3, #128	; 0x80
  40099c:	6023      	str	r3, [r4, #0]
		return ERR_DENIED;
	}
	hri_spi_write_CR_reg(hw, SPI_CR_SWRST);
	dev->prvt = hw;
  40099e:	6034      	str	r4, [r6, #0]
	hri_spi_write_CR_reg(hw, (regs->cr & ~(SPI_CR_SPIEN | SPI_CR_SPIDIS | SPI_CR_SWRST | SPI_CR_LASTXFER)));
  4009a0:	686a      	ldr	r2, [r5, #4]
  4009a2:	4b17      	ldr	r3, [pc, #92]	; (400a00 <_spi_m_sync_init+0x98>)
  4009a4:	4013      	ands	r3, r2
  4009a6:	6023      	str	r3, [r4, #0]
	hri_spi_write_MR_reg(hw, ((regs->mr | SPI_MR_PCS(0x0E) | SPI_MR_MODFDIS) & ~SPI_MR_LLB));
  4009a8:	68ab      	ldr	r3, [r5, #8]
  4009aa:	4a16      	ldr	r2, [pc, #88]	; (400a04 <_spi_m_sync_init+0x9c>)
  4009ac:	401a      	ands	r2, r3
  4009ae:	4b16      	ldr	r3, [pc, #88]	; (400a08 <_spi_m_sync_init+0xa0>)
  4009b0:	4313      	orrs	r3, r2
	((Spi *)hw)->SPI_MR = data;
  4009b2:	6063      	str	r3, [r4, #4]
	hri_spi_write_CSR_reg(hw, 0, regs->csr);
  4009b4:	68eb      	ldr	r3, [r5, #12]
	((Spi *)hw)->SPI_CSR[index] = data;
  4009b6:	6323      	str	r3, [r4, #48]	; 0x30

	dev->dummy_byte = regs->dummy_byte;
  4009b8:	8a2b      	ldrh	r3, [r5, #16]
  4009ba:	80f3      	strh	r3, [r6, #6]
	dev->char_size  = regs->csr & SPI_CSR_BITS_Msk;
  4009bc:	68eb      	ldr	r3, [r5, #12]
  4009be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  4009c2:	7133      	strb	r3, [r6, #4]

	return ERR_NONE;
  4009c4:	2000      	movs	r0, #0
  4009c6:	bd70      	pop	{r4, r5, r6, pc}
		if (spi_regs[i].number == n) {
  4009c8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4009cc:	008a      	lsls	r2, r1, #2
  4009ce:	490f      	ldr	r1, [pc, #60]	; (400a0c <_spi_m_sync_init+0xa4>)
  4009d0:	5c8a      	ldrb	r2, [r1, r2]
  4009d2:	4290      	cmp	r0, r2
  4009d4:	d002      	beq.n	4009dc <_spi_m_sync_init+0x74>
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  4009d6:	3301      	adds	r3, #1
  4009d8:	b2db      	uxtb	r3, r3
  4009da:	e7cc      	b.n	400976 <_spi_m_sync_init+0xe>
			return &spi_regs[i];
  4009dc:	eb03 0583 	add.w	r5, r3, r3, lsl #2
  4009e0:	00ab      	lsls	r3, r5, #2
  4009e2:	460d      	mov	r5, r1
  4009e4:	441d      	add	r5, r3
  4009e6:	e7c8      	b.n	40097a <_spi_m_sync_init+0x12>
		return ERR_INVALID_ARG;
  4009e8:	f06f 000c 	mvn.w	r0, #12
  4009ec:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
  4009ee:	f06f 0010 	mvn.w	r0, #16
}
  4009f2:	bd70      	pop	{r4, r5, r6, pc}
  4009f4:	00400951 	.word	0x00400951
  4009f8:	00401048 	.word	0x00401048
  4009fc:	004007e5 	.word	0x004007e5
  400a00:	feffff7c 	.word	0xfeffff7c
  400a04:	fff1ff6f 	.word	0xfff1ff6f
  400a08:	000e0010 	.word	0x000e0010
  400a0c:	00401034 	.word	0x00401034

00400a10 <_spi_m_sync_enable>:

	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
  400a10:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
  400a12:	4604      	mov	r4, r0
  400a14:	b168      	cbz	r0, 400a32 <_spi_m_sync_enable+0x22>
  400a16:	6803      	ldr	r3, [r0, #0]
  400a18:	b14b      	cbz	r3, 400a2e <_spi_m_sync_enable+0x1e>
  400a1a:	2001      	movs	r0, #1
  400a1c:	f44f 72b9 	mov.w	r2, #370	; 0x172
  400a20:	4905      	ldr	r1, [pc, #20]	; (400a38 <_spi_m_sync_enable+0x28>)
  400a22:	4b06      	ldr	r3, [pc, #24]	; (400a3c <_spi_m_sync_enable+0x2c>)
  400a24:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
  400a26:	6820      	ldr	r0, [r4, #0]
  400a28:	4b05      	ldr	r3, [pc, #20]	; (400a40 <_spi_m_sync_enable+0x30>)
  400a2a:	4798      	blx	r3
}
  400a2c:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
  400a2e:	2000      	movs	r0, #0
  400a30:	e7f4      	b.n	400a1c <_spi_m_sync_enable+0xc>
  400a32:	2000      	movs	r0, #0
  400a34:	e7f2      	b.n	400a1c <_spi_m_sync_enable+0xc>
  400a36:	bf00      	nop
  400a38:	00401048 	.word	0x00401048
  400a3c:	004007e5 	.word	0x004007e5
  400a40:	00400949 	.word	0x00400949

00400a44 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
  400a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400a48:	b086      	sub	sp, #24
  400a4a:	4607      	mov	r7, r0
  400a4c:	460d      	mov	r5, r1
	void *                 hw   = dev->prvt;
  400a4e:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
  400a50:	680b      	ldr	r3, [r1, #0]
  400a52:	9301      	str	r3, [sp, #4]
  400a54:	684b      	ldr	r3, [r1, #4]
  400a56:	9302      	str	r3, [sp, #8]
  400a58:	2300      	movs	r3, #0
  400a5a:	9303      	str	r3, [sp, #12]
  400a5c:	9304      	str	r3, [sp, #16]
  400a5e:	7903      	ldrb	r3, [r0, #4]
  400a60:	f88d 3014 	strb.w	r3, [sp, #20]

	ASSERT(dev && hw);
  400a64:	1c26      	adds	r6, r4, #0
  400a66:	bf18      	it	ne
  400a68:	2601      	movne	r6, #1
  400a6a:	f240 2231 	movw	r2, #561	; 0x231
  400a6e:	4933      	ldr	r1, [pc, #204]	; (400b3c <_spi_m_sync_trans+0xf8>)
  400a70:	2800      	cmp	r0, #0
  400a72:	bf0c      	ite	eq
  400a74:	2000      	moveq	r0, #0
  400a76:	f006 0001 	andne.w	r0, r6, #1
  400a7a:	4b31      	ldr	r3, [pc, #196]	; (400b40 <_spi_m_sync_trans+0xfc>)
  400a7c:	4798      	blx	r3
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  400a7e:	6923      	ldr	r3, [r4, #16]

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_spi_get_SR_SPIENS_bit(hw)) {
  400a80:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400a84:	d122      	bne.n	400acc <_spi_m_sync_trans+0x88>
		return ERR_NOT_INITIALIZED;
  400a86:	f06f 0013 	mvn.w	r0, #19
  400a8a:	e053      	b.n	400b34 <_spi_m_sync_trans+0xf0>
		return false;
  400a8c:	2300      	movs	r3, #0
  400a8e:	e035      	b.n	400afc <_spi_m_sync_trans+0xb8>
			data |= (*ctrl->txbuf) << 8;
  400a90:	7850      	ldrb	r0, [r2, #1]
  400a92:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
			ctrl->txbuf++;
  400a96:	3202      	adds	r2, #2
  400a98:	9201      	str	r2, [sp, #4]
	ctrl->txcnt++;
  400a9a:	3301      	adds	r3, #1
  400a9c:	9303      	str	r3, [sp, #12]
}

static inline void hri_spi_write_TDR_reg(const void *const hw, hri_spi_tdr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_TDR = data;
  400a9e:	60e1      	str	r1, [r4, #12]
	return ((Spi *)hw)->SPI_SR;
  400aa0:	f8d4 8010 	ldr.w	r8, [r4, #16]
	ASSERT(hw);
  400aa4:	f240 2222 	movw	r2, #546	; 0x222
  400aa8:	4924      	ldr	r1, [pc, #144]	; (400b3c <_spi_m_sync_trans+0xf8>)
  400aaa:	4630      	mov	r0, r6
  400aac:	4b24      	ldr	r3, [pc, #144]	; (400b40 <_spi_m_sync_trans+0xfc>)
  400aae:	4798      	blx	r3
	if (SPI_SR_OVRES & iflag) {
  400ab0:	f018 0f08 	tst.w	r8, #8
  400ab4:	d038      	beq.n	400b28 <_spi_m_sync_trans+0xe4>
		return ERR_OVERFLOW;
  400ab6:	f06f 0012 	mvn.w	r0, #18
			if (ctrl.rxcnt >= ctrl.txcnt) {
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
			}
		}
		rc = _spi_err_check(hri_spi_read_SR_reg(hw), hw);
		if (rc < 0) {
  400aba:	2800      	cmp	r0, #0
  400abc:	db36      	blt.n	400b2c <_spi_m_sync_trans+0xe8>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
  400abe:	9803      	ldr	r0, [sp, #12]
  400ac0:	68ab      	ldr	r3, [r5, #8]
  400ac2:	4298      	cmp	r0, r3
  400ac4:	d302      	bcc.n	400acc <_spi_m_sync_trans+0x88>
  400ac6:	9a04      	ldr	r2, [sp, #16]
  400ac8:	4293      	cmp	r3, r2
  400aca:	d92f      	bls.n	400b2c <_spi_m_sync_trans+0xe8>
  400acc:	6923      	ldr	r3, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_RDRF)) {
  400ace:	f013 0f01 	tst.w	r3, #1
  400ad2:	d0db      	beq.n	400a8c <_spi_m_sync_trans+0x48>
	return (((Spi *)hw)->SPI_RDR & SPI_RDR_RD_Msk) >> SPI_RDR_RD_Pos;
  400ad4:	68a3      	ldr	r3, [r4, #8]
  400ad6:	b29b      	uxth	r3, r3
	if (ctrl->rxbuf) {
  400ad8:	9a02      	ldr	r2, [sp, #8]
  400ada:	b15a      	cbz	r2, 400af4 <_spi_m_sync_trans+0xb0>
		*ctrl->rxbuf++ = (uint8_t)data;
  400adc:	1c51      	adds	r1, r2, #1
  400ade:	9102      	str	r1, [sp, #8]
  400ae0:	7013      	strb	r3, [r2, #0]
		if (ctrl->char_size > 1) {
  400ae2:	f89d 2014 	ldrb.w	r2, [sp, #20]
  400ae6:	2a01      	cmp	r2, #1
  400ae8:	d904      	bls.n	400af4 <_spi_m_sync_trans+0xb0>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
  400aea:	460a      	mov	r2, r1
  400aec:	3101      	adds	r1, #1
  400aee:	9102      	str	r1, [sp, #8]
  400af0:	0a1b      	lsrs	r3, r3, #8
  400af2:	7013      	strb	r3, [r2, #0]
	ctrl->rxcnt++;
  400af4:	9b04      	ldr	r3, [sp, #16]
  400af6:	3301      	adds	r3, #1
  400af8:	9304      	str	r3, [sp, #16]
	return true;
  400afa:	2301      	movs	r3, #1
		if (!_spi_rx_check_and_receive(hw, &ctrl)) {
  400afc:	2b00      	cmp	r3, #0
  400afe:	d1cf      	bne.n	400aa0 <_spi_m_sync_trans+0x5c>
			if (ctrl.rxcnt >= ctrl.txcnt) {
  400b00:	9b03      	ldr	r3, [sp, #12]
  400b02:	9a04      	ldr	r2, [sp, #16]
  400b04:	429a      	cmp	r2, r3
  400b06:	d3cb      	bcc.n	400aa0 <_spi_m_sync_trans+0x5c>
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
  400b08:	88f9      	ldrh	r1, [r7, #6]
	return ((Spi *)hw)->SPI_SR;
  400b0a:	6922      	ldr	r2, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_TDRE)) {
  400b0c:	f012 0f02 	tst.w	r2, #2
  400b10:	d0c6      	beq.n	400aa0 <_spi_m_sync_trans+0x5c>
	if (ctrl->txbuf) {
  400b12:	9a01      	ldr	r2, [sp, #4]
  400b14:	2a00      	cmp	r2, #0
  400b16:	d0c0      	beq.n	400a9a <_spi_m_sync_trans+0x56>
		data = *ctrl->txbuf++;
  400b18:	1c51      	adds	r1, r2, #1
  400b1a:	9101      	str	r1, [sp, #4]
  400b1c:	7811      	ldrb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
  400b1e:	f89d 0014 	ldrb.w	r0, [sp, #20]
  400b22:	2801      	cmp	r0, #1
  400b24:	d8b4      	bhi.n	400a90 <_spi_m_sync_trans+0x4c>
  400b26:	e7b8      	b.n	400a9a <_spi_m_sync_trans+0x56>
	return ERR_NONE;
  400b28:	2000      	movs	r0, #0
  400b2a:	e7c6      	b.n	400aba <_spi_m_sync_trans+0x76>
	tmp = ((Spi *)hw)->SPI_SR;
  400b2c:	6923      	ldr	r3, [r4, #16]
	while (!(hri_spi_get_SR_reg(hw, SPI_SR_TXEMPTY))) {
  400b2e:	f413 7f00 	tst.w	r3, #512	; 0x200
  400b32:	d0fb      	beq.n	400b2c <_spi_m_sync_trans+0xe8>

	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
  400b34:	b006      	add	sp, #24
  400b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400b3a:	bf00      	nop
  400b3c:	00401048 	.word	0x00401048
  400b40:	004007e5 	.word	0x004007e5

00400b44 <_spi_get_spi_m_sync>:
 * \brief Retrieve usart sync helper functions
 */
void *_spi_get_spi_m_sync(void)
{
	return (void *)NULL;
}
  400b44:	2000      	movs	r0, #0
  400b46:	4770      	bx	lr

00400b48 <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  400b48:	2300      	movs	r3, #0
  400b4a:	b13b      	cbz	r3, 400b5c <get_cfg+0x14>
		if (_tcs[i].hw == hw) {
			return &(_tcs[i]);
		}
	}

	return NULL;
  400b4c:	2000      	movs	r0, #0
  400b4e:	4770      	bx	lr
			return &(_tcs[i]);
  400b50:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  400b54:	00a3      	lsls	r3, r4, #2
  400b56:	4608      	mov	r0, r1
  400b58:	4418      	add	r0, r3
  400b5a:	e00c      	b.n	400b76 <get_cfg+0x2e>
{
  400b5c:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  400b5e:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  400b62:	008a      	lsls	r2, r1, #2
  400b64:	4905      	ldr	r1, [pc, #20]	; (400b7c <get_cfg+0x34>)
  400b66:	588a      	ldr	r2, [r1, r2]
  400b68:	4282      	cmp	r2, r0
  400b6a:	d0f1      	beq.n	400b50 <get_cfg+0x8>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  400b6c:	3301      	adds	r3, #1
  400b6e:	b2db      	uxtb	r3, r3
  400b70:	2b00      	cmp	r3, #0
  400b72:	d0f4      	beq.n	400b5e <get_cfg+0x16>
	return NULL;
  400b74:	2000      	movs	r0, #0
}
  400b76:	f85d 4b04 	ldr.w	r4, [sp], #4
  400b7a:	4770      	bx	lr
  400b7c:	20400000 	.word	0x20400000

00400b80 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  400b80:	4b03      	ldr	r3, [pc, #12]	; (400b90 <_tc_init_irq_param+0x10>)
  400b82:	4298      	cmp	r0, r3
  400b84:	d000      	beq.n	400b88 <_tc_init_irq_param+0x8>
  400b86:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  400b88:	4b02      	ldr	r3, [pc, #8]	; (400b94 <_tc_init_irq_param+0x14>)
  400b8a:	6019      	str	r1, [r3, #0]
	}
}
  400b8c:	e7fb      	b.n	400b86 <_tc_init_irq_param+0x6>
  400b8e:	bf00      	nop
  400b90:	4000c000 	.word	0x4000c000
  400b94:	20400040 	.word	0x20400040

00400b98 <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  400b98:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  400b9a:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  400b9c:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  400b9e:	f013 0f10 	tst.w	r3, #16
  400ba2:	d100      	bne.n	400ba6 <tc_interrupt_handler+0xe>
  400ba4:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  400ba6:	6803      	ldr	r3, [r0, #0]
  400ba8:	4798      	blx	r3
	}
}
  400baa:	e7fb      	b.n	400ba4 <tc_interrupt_handler+0xc>

00400bac <_timer_init>:
{
  400bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400bae:	4607      	mov	r7, r0
  400bb0:	460c      	mov	r4, r1
	struct tc_configuration *cfg     = get_cfg(hw);
  400bb2:	4608      	mov	r0, r1
  400bb4:	4b27      	ldr	r3, [pc, #156]	; (400c54 <_timer_init+0xa8>)
  400bb6:	4798      	blx	r3
  400bb8:	4605      	mov	r5, r0
	uint32_t                 ch_mode = cfg->channel_mode;
  400bba:	6886      	ldr	r6, [r0, #8]
	device->hw = hw;
  400bbc:	60fc      	str	r4, [r7, #12]
	ASSERT(ARRAY_SIZE(_tcs));
  400bbe:	2291      	movs	r2, #145	; 0x91
  400bc0:	4925      	ldr	r1, [pc, #148]	; (400c58 <_timer_init+0xac>)
  400bc2:	2001      	movs	r0, #1
  400bc4:	4b25      	ldr	r3, [pc, #148]	; (400c5c <_timer_init+0xb0>)
  400bc6:	4798      	blx	r3
	if (ch_mode & TC_CMR_WAVE) {
  400bc8:	f416 4f00 	tst.w	r6, #32768	; 0x8000
  400bcc:	d001      	beq.n	400bd2 <_timer_init+0x26>
		ch_mode |= (0x02 << 13) | (0x01 << 16) | (0x02 << 18);
  400bce:	f446 2614 	orr.w	r6, r6, #606208	; 0x94000
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  400bd2:	6066      	str	r6, [r4, #4]
	hri_tc_write_RA_reg(hw, 0, cfg->ra);
  400bd4:	696b      	ldr	r3, [r5, #20]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  400bd6:	6163      	str	r3, [r4, #20]
	hri_tc_write_RB_reg(hw, 0, cfg->rb);
  400bd8:	69ab      	ldr	r3, [r5, #24]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  400bda:	61a3      	str	r3, [r4, #24]
	hri_tc_write_EMR_reg(hw, 0, cfg->ext_mode);
  400bdc:	68eb      	ldr	r3, [r5, #12]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  400bde:	6323      	str	r3, [r4, #48]	; 0x30
	hri_tc_write_RC_reg(hw, 0, cfg->rc);
  400be0:	69eb      	ldr	r3, [r5, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  400be2:	61e3      	str	r3, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  400be4:	2310      	movs	r3, #16
  400be6:	6263      	str	r3, [r4, #36]	; 0x24
	hri_tc_write_FMR_reg(hw, cfg->fmr);
  400be8:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  400bea:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	_tc_init_irq_param(hw, device);
  400bee:	4639      	mov	r1, r7
  400bf0:	4620      	mov	r0, r4
  400bf2:	4b1b      	ldr	r3, [pc, #108]	; (400c60 <_timer_init+0xb4>)
  400bf4:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  400bf6:	f995 3004 	ldrsb.w	r3, [r5, #4]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  400bfa:	2b00      	cmp	r3, #0
  400bfc:	db0d      	blt.n	400c1a <_timer_init+0x6e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400bfe:	095a      	lsrs	r2, r3, #5
  400c00:	f003 031f 	and.w	r3, r3, #31
  400c04:	2101      	movs	r1, #1
  400c06:	fa01 f303 	lsl.w	r3, r1, r3
  400c0a:	3220      	adds	r2, #32
  400c0c:	4915      	ldr	r1, [pc, #84]	; (400c64 <_timer_init+0xb8>)
  400c0e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  400c12:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400c16:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  400c1a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  400c1e:	2b00      	cmp	r3, #0
  400c20:	db09      	blt.n	400c36 <_timer_init+0x8a>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400c22:	095a      	lsrs	r2, r3, #5
  400c24:	f003 031f 	and.w	r3, r3, #31
  400c28:	2101      	movs	r1, #1
  400c2a:	fa01 f303 	lsl.w	r3, r1, r3
  400c2e:	3260      	adds	r2, #96	; 0x60
  400c30:	490c      	ldr	r1, [pc, #48]	; (400c64 <_timer_init+0xb8>)
  400c32:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  400c36:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  400c3a:	2b00      	cmp	r3, #0
  400c3c:	db08      	blt.n	400c50 <_timer_init+0xa4>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400c3e:	0959      	lsrs	r1, r3, #5
  400c40:	f003 031f 	and.w	r3, r3, #31
  400c44:	2201      	movs	r2, #1
  400c46:	fa02 f303 	lsl.w	r3, r2, r3
  400c4a:	4a06      	ldr	r2, [pc, #24]	; (400c64 <_timer_init+0xb8>)
  400c4c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  400c50:	2000      	movs	r0, #0
  400c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400c54:	00400b49 	.word	0x00400b49
  400c58:	00401060 	.word	0x00401060
  400c5c:	004007e5 	.word	0x004007e5
  400c60:	00400b81 	.word	0x00400b81
  400c64:	e000e100 	.word	0xe000e100

00400c68 <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  400c68:	2000      	movs	r0, #0
  400c6a:	4770      	bx	lr

00400c6c <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  400c6c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  400c6e:	4b02      	ldr	r3, [pc, #8]	; (400c78 <TC0_Handler+0xc>)
  400c70:	6818      	ldr	r0, [r3, #0]
  400c72:	4b02      	ldr	r3, [pc, #8]	; (400c7c <TC0_Handler+0x10>)
  400c74:	4798      	blx	r3
  400c76:	bd08      	pop	{r3, pc}
  400c78:	20400040 	.word	0x20400040
  400c7c:	00400b99 	.word	0x00400b99

00400c80 <_rand_sync_init>:
#include <err_codes.h>
#include <hpl_rand_sync.h>
#include <utils_assert.h>

int32_t _rand_sync_init(struct _rand_sync_dev *const dev, void *const hw)
{
  400c80:	b538      	push	{r3, r4, r5, lr}
	ASSERT(dev && hw);
  400c82:	4604      	mov	r4, r0
  400c84:	460d      	mov	r5, r1
  400c86:	2800      	cmp	r0, #0
  400c88:	bf18      	it	ne
  400c8a:	2900      	cmpne	r1, #0
  400c8c:	bf14      	ite	ne
  400c8e:	2001      	movne	r0, #1
  400c90:	2000      	moveq	r0, #0
  400c92:	2228      	movs	r2, #40	; 0x28
  400c94:	4903      	ldr	r1, [pc, #12]	; (400ca4 <_rand_sync_init+0x24>)
  400c96:	4b04      	ldr	r3, [pc, #16]	; (400ca8 <_rand_sync_init+0x28>)
  400c98:	4798      	blx	r3

	dev->prvt   = hw;
  400c9a:	6025      	str	r5, [r4, #0]
	dev->n_bits = 32;
  400c9c:	2320      	movs	r3, #32
  400c9e:	7123      	strb	r3, [r4, #4]

	return ERR_NONE;
}
  400ca0:	2000      	movs	r0, #0
  400ca2:	bd38      	pop	{r3, r4, r5, pc}
  400ca4:	00401074 	.word	0x00401074
  400ca8:	004007e5 	.word	0x004007e5

00400cac <_uart_get_hardware_index>:
/**
 * \brief Retrieve ordinal number of the given uart hardware instance
 * \param[in] p The pointer to interrupt parameter
 */
static uint8_t _uart_get_hardware_index(const void *const hw)
{
  400cac:	b510      	push	{r4, lr}
	ASSERT(hw);
  400cae:	4604      	mov	r4, r0
  400cb0:	f240 2219 	movw	r2, #537	; 0x219
  400cb4:	4912      	ldr	r1, [pc, #72]	; (400d00 <_uart_get_hardware_index+0x54>)
  400cb6:	3000      	adds	r0, #0
  400cb8:	bf18      	it	ne
  400cba:	2001      	movne	r0, #1
  400cbc:	4b11      	ldr	r3, [pc, #68]	; (400d04 <_uart_get_hardware_index+0x58>)
  400cbe:	4798      	blx	r3
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)UART0) / sizeof(Uart);
#endif
	if (UART0 == hw) {
  400cc0:	4b11      	ldr	r3, [pc, #68]	; (400d08 <_uart_get_hardware_index+0x5c>)
  400cc2:	429c      	cmp	r4, r3
  400cc4:	d013      	beq.n	400cee <_uart_get_hardware_index+0x42>
		return 0;
	} else if (UART1 == hw) {
  400cc6:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400cca:	429c      	cmp	r4, r3
  400ccc:	d011      	beq.n	400cf2 <_uart_get_hardware_index+0x46>
		return 1;
	} else if (UART2 == hw) {
  400cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  400cd2:	429c      	cmp	r4, r3
  400cd4:	d00f      	beq.n	400cf6 <_uart_get_hardware_index+0x4a>
		return 2;
	} else if (UART3 == hw) {
  400cd6:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400cda:	429c      	cmp	r4, r3
  400cdc:	d00d      	beq.n	400cfa <_uart_get_hardware_index+0x4e>
		return 3;
	} else if (UART4 == hw) {
  400cde:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400ce2:	429c      	cmp	r4, r3
  400ce4:	d001      	beq.n	400cea <_uart_get_hardware_index+0x3e>
		return 4;
	} else {
		return ERR_INVALID_DATA;
  400ce6:	20ff      	movs	r0, #255	; 0xff
	}
}
  400ce8:	bd10      	pop	{r4, pc}
		return 4;
  400cea:	2004      	movs	r0, #4
  400cec:	bd10      	pop	{r4, pc}
		return 0;
  400cee:	2000      	movs	r0, #0
  400cf0:	bd10      	pop	{r4, pc}
		return 1;
  400cf2:	2001      	movs	r0, #1
  400cf4:	bd10      	pop	{r4, pc}
		return 2;
  400cf6:	2002      	movs	r0, #2
  400cf8:	bd10      	pop	{r4, pc}
		return 3;
  400cfa:	2003      	movs	r0, #3
  400cfc:	bd10      	pop	{r4, pc}
  400cfe:	bf00      	nop
  400d00:	00401098 	.word	0x00401098
  400d04:	004007e5 	.word	0x004007e5
  400d08:	400e0800 	.word	0x400e0800

00400d0c <_get_uart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given uart hardware instance
 */
static uint8_t _get_uart_index(const void *const hw)
{
  400d0c:	b510      	push	{r4, lr}
	ASSERT(hw);
  400d0e:	4604      	mov	r4, r0
  400d10:	f44f 7227 	mov.w	r2, #668	; 0x29c
  400d14:	490e      	ldr	r1, [pc, #56]	; (400d50 <_get_uart_index+0x44>)
  400d16:	3000      	adds	r0, #0
  400d18:	bf18      	it	ne
  400d1a:	2001      	movne	r0, #1
  400d1c:	4b0d      	ldr	r3, [pc, #52]	; (400d54 <_get_uart_index+0x48>)
  400d1e:	4798      	blx	r3
	uint8_t uart_offset = _uart_get_hardware_index(hw);
  400d20:	4620      	mov	r0, r4
  400d22:	4b0d      	ldr	r3, [pc, #52]	; (400d58 <_get_uart_index+0x4c>)
  400d24:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_uarts); i++) {
  400d26:	2300      	movs	r3, #0
  400d28:	b143      	cbz	r3, 400d3c <_get_uart_index+0x30>
		if (_uarts[i].number == uart_offset) {
			return i;
		}
	}

	ASSERT(false);
  400d2a:	f240 22a6 	movw	r2, #678	; 0x2a6
  400d2e:	4908      	ldr	r1, [pc, #32]	; (400d50 <_get_uart_index+0x44>)
  400d30:	2000      	movs	r0, #0
  400d32:	4b08      	ldr	r3, [pc, #32]	; (400d54 <_get_uart_index+0x48>)
  400d34:	4798      	blx	r3
	return 0;
  400d36:	2300      	movs	r3, #0
}
  400d38:	4618      	mov	r0, r3
  400d3a:	bd10      	pop	{r4, pc}
		if (_uarts[i].number == uart_offset) {
  400d3c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  400d40:	008a      	lsls	r2, r1, #2
  400d42:	4906      	ldr	r1, [pc, #24]	; (400d5c <_get_uart_index+0x50>)
  400d44:	5c8a      	ldrb	r2, [r1, r2]
  400d46:	4290      	cmp	r0, r2
  400d48:	d0f6      	beq.n	400d38 <_get_uart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_uarts); i++) {
  400d4a:	3301      	adds	r3, #1
  400d4c:	b2db      	uxtb	r3, r3
  400d4e:	e7eb      	b.n	400d28 <_get_uart_index+0x1c>
  400d50:	00401098 	.word	0x00401098
  400d54:	004007e5 	.word	0x004007e5
  400d58:	00400cad 	.word	0x00400cad
  400d5c:	0040108c 	.word	0x0040108c

00400d60 <_uart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _uart_init(void *const hw)
{
  400d60:	b510      	push	{r4, lr}
	ASSERT(hw);
  400d62:	4604      	mov	r4, r0
  400d64:	f240 22b3 	movw	r2, #691	; 0x2b3
  400d68:	490d      	ldr	r1, [pc, #52]	; (400da0 <_uart_init+0x40>)
  400d6a:	3000      	adds	r0, #0
  400d6c:	bf18      	it	ne
  400d6e:	2001      	movne	r0, #1
  400d70:	4b0c      	ldr	r3, [pc, #48]	; (400da4 <_uart_init+0x44>)
  400d72:	4798      	blx	r3
	uint8_t i = _get_uart_index(hw);
  400d74:	4620      	mov	r0, r4
  400d76:	4b0c      	ldr	r3, [pc, #48]	; (400da8 <_uart_init+0x48>)
  400d78:	4798      	blx	r3
}

static inline void hri_uart_write_WPMR_reg(const void *const hw, hri_uart_wpmr_reg_t data)
{
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_WPMR = data;
  400d7a:	4b0c      	ldr	r3, [pc, #48]	; (400dac <_uart_init+0x4c>)
  400d7c:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
}

static inline void hri_uart_write_CR_reg(const void *const hw, hri_uart_cr_reg_t data)
{
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_CR = data;
  400d80:	23ac      	movs	r3, #172	; 0xac
  400d82:	6023      	str	r3, [r4, #0]
  400d84:	f44f 7380 	mov.w	r3, #256	; 0x100
  400d88:	6023      	str	r3, [r4, #0]
	/* Disable and reset TX and RX. */
	hri_uart_write_CR_reg(hw, UART_CR_RSTRX | UART_CR_RXDIS | UART_CR_RSTTX | UART_CR_TXDIS);
	/* Reset status bits. */
	hri_uart_write_CR_reg(hw, UART_CR_RSTSTA);

	hri_uart_write_MR_reg(hw, _uarts[i].mr);
  400d8a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  400d8e:	0082      	lsls	r2, r0, #2
  400d90:	4b07      	ldr	r3, [pc, #28]	; (400db0 <_uart_init+0x50>)
  400d92:	4413      	add	r3, r2
  400d94:	685b      	ldr	r3, [r3, #4]
	((Uart *)hw)->UART_MR = data;
  400d96:	6063      	str	r3, [r4, #4]
	((Uart *)hw)->UART_BRGR = data;
  400d98:	23f4      	movs	r3, #244	; 0xf4
  400d9a:	6223      	str	r3, [r4, #32]
	hri_uart_write_BRGR_reg(hw, _uarts[i].brgr);

	return ERR_NONE;
}
  400d9c:	2000      	movs	r0, #0
  400d9e:	bd10      	pop	{r4, pc}
  400da0:	00401098 	.word	0x00401098
  400da4:	004007e5 	.word	0x004007e5
  400da8:	00400d0d 	.word	0x00400d0d
  400dac:	55415200 	.word	0x55415200
  400db0:	0040108c 	.word	0x0040108c

00400db4 <_usart_sync_init>:
{
  400db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400db6:	460c      	mov	r4, r1
	ASSERT(device);
  400db8:	4e09      	ldr	r6, [pc, #36]	; (400de0 <_usart_sync_init+0x2c>)
  400dba:	4607      	mov	r7, r0
  400dbc:	22a9      	movs	r2, #169	; 0xa9
  400dbe:	4631      	mov	r1, r6
  400dc0:	3000      	adds	r0, #0
  400dc2:	bf18      	it	ne
  400dc4:	2001      	movne	r0, #1
  400dc6:	4d07      	ldr	r5, [pc, #28]	; (400de4 <_usart_sync_init+0x30>)
  400dc8:	47a8      	blx	r5
	ASSERT(hw);
  400dca:	22aa      	movs	r2, #170	; 0xaa
  400dcc:	4631      	mov	r1, r6
  400dce:	1c20      	adds	r0, r4, #0
  400dd0:	bf18      	it	ne
  400dd2:	2001      	movne	r0, #1
  400dd4:	47a8      	blx	r5
	device->hw = hw;
  400dd6:	603c      	str	r4, [r7, #0]
	return _uart_init(hw);
  400dd8:	4620      	mov	r0, r4
  400dda:	4b03      	ldr	r3, [pc, #12]	; (400de8 <_usart_sync_init+0x34>)
  400ddc:	4798      	blx	r3
}
  400dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400de0:	00401098 	.word	0x00401098
  400de4:	004007e5 	.word	0x004007e5
  400de8:	00400d61 	.word	0x00400d61

00400dec <_usart_sync_write_byte>:
{
  400dec:	b538      	push	{r3, r4, r5, lr}
  400dee:	460c      	mov	r4, r1
	ASSERT(device);
  400df0:	4605      	mov	r5, r0
  400df2:	f240 1295 	movw	r2, #405	; 0x195
  400df6:	4904      	ldr	r1, [pc, #16]	; (400e08 <_usart_sync_write_byte+0x1c>)
  400df8:	3000      	adds	r0, #0
  400dfa:	bf18      	it	ne
  400dfc:	2001      	movne	r0, #1
  400dfe:	4b03      	ldr	r3, [pc, #12]	; (400e0c <_usart_sync_write_byte+0x20>)
  400e00:	4798      	blx	r3
	hri_uart_write_THR_reg(device->hw, (hri_uart_thr_reg_t)data);
  400e02:	682b      	ldr	r3, [r5, #0]
}

static inline void hri_uart_write_THR_reg(const void *const hw, hri_uart_thr_reg_t data)
{
	UART_CRITICAL_SECTION_ENTER();
	((Uart *)hw)->UART_THR = data;
  400e04:	61dc      	str	r4, [r3, #28]
  400e06:	bd38      	pop	{r3, r4, r5, pc}
  400e08:	00401098 	.word	0x00401098
  400e0c:	004007e5 	.word	0x004007e5

00400e10 <_usart_sync_read_byte>:
{
  400e10:	b510      	push	{r4, lr}
	ASSERT(device);
  400e12:	4604      	mov	r4, r0
  400e14:	f240 12a7 	movw	r2, #423	; 0x1a7
  400e18:	4904      	ldr	r1, [pc, #16]	; (400e2c <_usart_sync_read_byte+0x1c>)
  400e1a:	3000      	adds	r0, #0
  400e1c:	bf18      	it	ne
  400e1e:	2001      	movne	r0, #1
  400e20:	4b03      	ldr	r3, [pc, #12]	; (400e30 <_usart_sync_read_byte+0x20>)
  400e22:	4798      	blx	r3
	return (uint8_t)(hri_uart_read_RHR_RXCHR_bf(device->hw));
  400e24:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_RHR & UART_RHR_RXCHR_Msk) >> UART_RHR_RXCHR_Pos;
  400e26:	6998      	ldr	r0, [r3, #24]
}
  400e28:	b2c0      	uxtb	r0, r0
  400e2a:	bd10      	pop	{r4, pc}
  400e2c:	00401098 	.word	0x00401098
  400e30:	004007e5 	.word	0x004007e5

00400e34 <_usart_sync_is_ready_to_send>:
{
  400e34:	b510      	push	{r4, lr}
	ASSERT(device);
  400e36:	4604      	mov	r4, r0
  400e38:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
  400e3c:	4905      	ldr	r1, [pc, #20]	; (400e54 <_usart_sync_is_ready_to_send+0x20>)
  400e3e:	3000      	adds	r0, #0
  400e40:	bf18      	it	ne
  400e42:	2001      	movne	r0, #1
  400e44:	4b04      	ldr	r3, [pc, #16]	; (400e58 <_usart_sync_is_ready_to_send+0x24>)
  400e46:	4798      	blx	r3
	return hri_uart_get_SR_TXRDY_bit(device->hw);
  400e48:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_SR & UART_SR_TXRDY) > 0;
  400e4a:	6958      	ldr	r0, [r3, #20]
}
  400e4c:	f3c0 0040 	ubfx	r0, r0, #1, #1
  400e50:	bd10      	pop	{r4, pc}
  400e52:	bf00      	nop
  400e54:	00401098 	.word	0x00401098
  400e58:	004007e5 	.word	0x004007e5

00400e5c <_usart_sync_is_transmit_done>:
{
  400e5c:	b510      	push	{r4, lr}
	ASSERT(device);
  400e5e:	4604      	mov	r4, r0
  400e60:	f240 12b9 	movw	r2, #441	; 0x1b9
  400e64:	4905      	ldr	r1, [pc, #20]	; (400e7c <_usart_sync_is_transmit_done+0x20>)
  400e66:	3000      	adds	r0, #0
  400e68:	bf18      	it	ne
  400e6a:	2001      	movne	r0, #1
  400e6c:	4b04      	ldr	r3, [pc, #16]	; (400e80 <_usart_sync_is_transmit_done+0x24>)
  400e6e:	4798      	blx	r3
	return hri_uart_get_SR_TXEMPTY_bit(device->hw);
  400e70:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_SR & UART_SR_TXEMPTY) > 0;
  400e72:	6958      	ldr	r0, [r3, #20]
}
  400e74:	f3c0 2040 	ubfx	r0, r0, #9, #1
  400e78:	bd10      	pop	{r4, pc}
  400e7a:	bf00      	nop
  400e7c:	00401098 	.word	0x00401098
  400e80:	004007e5 	.word	0x004007e5

00400e84 <_usart_sync_is_byte_received>:
{
  400e84:	b510      	push	{r4, lr}
	ASSERT(device);
  400e86:	4604      	mov	r4, r0
  400e88:	f240 12cb 	movw	r2, #459	; 0x1cb
  400e8c:	4905      	ldr	r1, [pc, #20]	; (400ea4 <_usart_sync_is_byte_received+0x20>)
  400e8e:	3000      	adds	r0, #0
  400e90:	bf18      	it	ne
  400e92:	2001      	movne	r0, #1
  400e94:	4b04      	ldr	r3, [pc, #16]	; (400ea8 <_usart_sync_is_byte_received+0x24>)
  400e96:	4798      	blx	r3
	return hri_uart_get_SR_RXRDY_bit(device->hw);
  400e98:	6823      	ldr	r3, [r4, #0]
	return (((Uart *)hw)->UART_SR & UART_SR_RXRDY) > 0;
  400e9a:	6958      	ldr	r0, [r3, #20]
  400e9c:	f000 0001 	and.w	r0, r0, #1
}
  400ea0:	bd10      	pop	{r4, pc}
  400ea2:	bf00      	nop
  400ea4:	00401098 	.word	0x00401098
  400ea8:	004007e5 	.word	0x004007e5

00400eac <_uart_get_usart_sync>:
}
  400eac:	2000      	movs	r0, #0
  400eae:	4770      	bx	lr

00400eb0 <read_SPI_data>:


// SPI functions

void read_SPI_data(void)
{
  400eb0:	b570      	push	{r4, r5, r6, lr}
  400eb2:	b084      	sub	sp, #16
	struct io_descriptor *io;
	spi_m_sync_get_io_descriptor(&SPI_0, &io);
  400eb4:	a903      	add	r1, sp, #12
  400eb6:	4810      	ldr	r0, [pc, #64]	; (400ef8 <read_SPI_data+0x48>)
  400eb8:	4b10      	ldr	r3, [pc, #64]	; (400efc <read_SPI_data+0x4c>)
  400eba:	4798      	blx	r3
	
	uint8_t read_data[2]; // Array to hold the read data
	uint16_t data_device; // Variable to store the final integer value

	// List of CS pins for all devices
	uint8_t cs_pins[4] = {CS_PIN_DEVICE1, CS_PIN_DEVICE2, CS_PIN_DEVICE3, CS_PIN_DEVICE4};
  400ebc:	4b10      	ldr	r3, [pc, #64]	; (400f00 <read_SPI_data+0x50>)
  400ebe:	681b      	ldr	r3, [r3, #0]
  400ec0:	9301      	str	r3, [sp, #4]

	for (int i = 0; i < 4; i++) {
  400ec2:	2600      	movs	r6, #0
  400ec4:	e013      	b.n	400eee <read_SPI_data+0x3e>
		

		gpio_set_pin_level(cs_pins[i], false); // set the pin low (select the device)
  400ec6:	ab04      	add	r3, sp, #16
  400ec8:	4433      	add	r3, r6
  400eca:	f813 5c0c 	ldrb.w	r5, [r3, #-12]
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
  400ece:	096a      	lsrs	r2, r5, #5
  400ed0:	f005 031f 	and.w	r3, r5, #31
  400ed4:	2501      	movs	r5, #1
  400ed6:	409d      	lsls	r5, r3
 * \brief Transfer gpio_port to hardware address
 */
static inline void *port_to_reg(const enum gpio_port port)
{
	/* PIO instance offset is 0x200 */
	return (void *)((uint32_t)PIOA + port * 0x200);
  400ed8:	4c0a      	ldr	r4, [pc, #40]	; (400f04 <read_SPI_data+0x54>)
  400eda:	eb04 2442 	add.w	r4, r4, r2, lsl #9
	((Pio *)hw)->PIO_CODR = mask;
  400ede:	6365      	str	r5, [r4, #52]	; 0x34
		io_read(io, read_data, 2); // Read 2 bytes of data
  400ee0:	2202      	movs	r2, #2
  400ee2:	a902      	add	r1, sp, #8
  400ee4:	9803      	ldr	r0, [sp, #12]
  400ee6:	4b08      	ldr	r3, [pc, #32]	; (400f08 <read_SPI_data+0x58>)
  400ee8:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  400eea:	6325      	str	r5, [r4, #48]	; 0x30
	for (int i = 0; i < 4; i++) {
  400eec:	3601      	adds	r6, #1
  400eee:	2e03      	cmp	r6, #3
  400ef0:	dde9      	ble.n	400ec6 <read_SPI_data+0x16>
		data_device = (read_data[0]<<8) | read_data[1]; // Assume the data is in big-endian byte order

		// Use or store the data as needed
		// ...
	}
}
  400ef2:	b004      	add	sp, #16
  400ef4:	bd70      	pop	{r4, r5, r6, pc}
  400ef6:	bf00      	nop
  400ef8:	2040004c 	.word	0x2040004c
  400efc:	004005ad 	.word	0x004005ad
  400f00:	004010b0 	.word	0x004010b0
  400f04:	400e0e00 	.word	0x400e0e00
  400f08:	00400401 	.word	0x00400401

00400f0c <main>:

int main(void)
{
  400f0c:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  400f0e:	4b0a      	ldr	r3, [pc, #40]	; (400f38 <main+0x2c>)
  400f10:	4798      	blx	r3
	((Pio *)hw)->PIO_OER = mask;
  400f12:	4b0a      	ldr	r3, [pc, #40]	; (400f3c <main+0x30>)
  400f14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  400f18:	611a      	str	r2, [r3, #16]
  400f1a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400f1e:	611a      	str	r2, [r3, #16]
  400f20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400f24:	611a      	str	r2, [r3, #16]
  400f26:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400f2a:	611a      	str	r2, [r3, #16]
	gpio_set_pin_direction(CS_PIN_DEVICE2, GPIO_DIRECTION_OUT);
	gpio_set_pin_direction(CS_PIN_DEVICE3, GPIO_DIRECTION_OUT);
	gpio_set_pin_direction(CS_PIN_DEVICE4, GPIO_DIRECTION_OUT);
	
	// Enable SPI
	spi_m_sync_enable(&SPI_0);
  400f2c:	4804      	ldr	r0, [pc, #16]	; (400f40 <main+0x34>)
  400f2e:	4b05      	ldr	r3, [pc, #20]	; (400f44 <main+0x38>)
  400f30:	4798      	blx	r3

	while (1) {
		read_SPI_data();
  400f32:	4b05      	ldr	r3, [pc, #20]	; (400f48 <main+0x3c>)
  400f34:	4798      	blx	r3
  400f36:	e7fc      	b.n	400f32 <main+0x26>
  400f38:	004001d5 	.word	0x004001d5
  400f3c:	400e0e00 	.word	0x400e0e00
  400f40:	2040004c 	.word	0x2040004c
  400f44:	004004cd 	.word	0x004004cd
  400f48:	00400eb1 	.word	0x00400eb1

00400f4c <__libc_init_array>:
  400f4c:	b570      	push	{r4, r5, r6, lr}
  400f4e:	4e0d      	ldr	r6, [pc, #52]	; (400f84 <__libc_init_array+0x38>)
  400f50:	4c0d      	ldr	r4, [pc, #52]	; (400f88 <__libc_init_array+0x3c>)
  400f52:	1ba4      	subs	r4, r4, r6
  400f54:	10a4      	asrs	r4, r4, #2
  400f56:	2500      	movs	r5, #0
  400f58:	42a5      	cmp	r5, r4
  400f5a:	d109      	bne.n	400f70 <__libc_init_array+0x24>
  400f5c:	4e0b      	ldr	r6, [pc, #44]	; (400f8c <__libc_init_array+0x40>)
  400f5e:	4c0c      	ldr	r4, [pc, #48]	; (400f90 <__libc_init_array+0x44>)
  400f60:	f000 f8a8 	bl	4010b4 <_init>
  400f64:	1ba4      	subs	r4, r4, r6
  400f66:	10a4      	asrs	r4, r4, #2
  400f68:	2500      	movs	r5, #0
  400f6a:	42a5      	cmp	r5, r4
  400f6c:	d105      	bne.n	400f7a <__libc_init_array+0x2e>
  400f6e:	bd70      	pop	{r4, r5, r6, pc}
  400f70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  400f74:	4798      	blx	r3
  400f76:	3501      	adds	r5, #1
  400f78:	e7ee      	b.n	400f58 <__libc_init_array+0xc>
  400f7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  400f7e:	4798      	blx	r3
  400f80:	3501      	adds	r5, #1
  400f82:	e7f2      	b.n	400f6a <__libc_init_array+0x1e>
  400f84:	004010c0 	.word	0x004010c0
  400f88:	004010c0 	.word	0x004010c0
  400f8c:	004010c0 	.word	0x004010c0
  400f90:	004010c4 	.word	0x004010c4
  400f94:	682f2e2e 	.word	0x682f2e2e
  400f98:	732f6c61 	.word	0x732f6c61
  400f9c:	682f6372 	.word	0x682f6372
  400fa0:	695f6c61 	.word	0x695f6c61
  400fa4:	00632e6f 	.word	0x00632e6f
  400fa8:	682f2e2e 	.word	0x682f2e2e
  400fac:	732f6c61 	.word	0x732f6c61
  400fb0:	682f6372 	.word	0x682f6372
  400fb4:	725f6c61 	.word	0x725f6c61
  400fb8:	5f646e61 	.word	0x5f646e61
  400fbc:	636e7973 	.word	0x636e7973
  400fc0:	0000632e 	.word	0x0000632e
  400fc4:	682f2e2e 	.word	0x682f2e2e
  400fc8:	732f6c61 	.word	0x732f6c61
  400fcc:	682f6372 	.word	0x682f6372
  400fd0:	735f6c61 	.word	0x735f6c61
  400fd4:	6d5f6970 	.word	0x6d5f6970
  400fd8:	6e79735f 	.word	0x6e79735f
  400fdc:	00632e63 	.word	0x00632e63
  400fe0:	682f2e2e 	.word	0x682f2e2e
  400fe4:	732f6c61 	.word	0x732f6c61
  400fe8:	682f6372 	.word	0x682f6372
  400fec:	745f6c61 	.word	0x745f6c61
  400ff0:	72656d69 	.word	0x72656d69
  400ff4:	0000632e 	.word	0x0000632e
  400ff8:	682f2e2e 	.word	0x682f2e2e
  400ffc:	732f6c61 	.word	0x732f6c61
  401000:	682f6372 	.word	0x682f6372
  401004:	755f6c61 	.word	0x755f6c61
  401008:	74726173 	.word	0x74726173
  40100c:	6e79735f 	.word	0x6e79735f
  401010:	00632e63 	.word	0x00632e63
  401014:	682f2e2e 	.word	0x682f2e2e
  401018:	752f6c61 	.word	0x752f6c61
  40101c:	736c6974 	.word	0x736c6974
  401020:	6372732f 	.word	0x6372732f
  401024:	6974752f 	.word	0x6974752f
  401028:	6c5f736c 	.word	0x6c5f736c
  40102c:	2e747369 	.word	0x2e747369
  401030:	00000063 	.word	0x00000063

00401034 <spi_regs>:
  401034:	00000000 80000000 00000001 0496dc02     ................
  401044:	0000ffff 682f2e2e 732f6c70 682f6970     ....../hpl/spi/h
  401054:	735f6c70 632e6970 00000000 682f2e2e     pl_spi.c....../h
  401064:	742f6c70 70682f63 63745f6c 0000632e     pl/tc/hpl_tc.c..
  401074:	682f2e2e 742f6c70 2f676e72 5f6c7068     ../hpl/trng/hpl_
  401084:	676e7274 0000632e                       trng.c..

0040108c <_uarts>:
  40108c:	00000000 00000800 000000f4 682f2e2e     ............../h
  40109c:	752f6c70 2f747261 5f6c7068 74726175     pl/uart/hpl_uart
  4010ac:	0000632e 1f1e1d1c                       .c......

004010b4 <_init>:
  4010b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4010b6:	bf00      	nop
  4010b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4010ba:	bc08      	pop	{r3}
  4010bc:	469e      	mov	lr, r3
  4010be:	4770      	bx	lr

004010c0 <__init_array_start>:
  4010c0:	0040018d 	.word	0x0040018d

004010c4 <_fini>:
  4010c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4010c6:	bf00      	nop
  4010c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4010ca:	bc08      	pop	{r3}
  4010cc:	469e      	mov	lr, r3
  4010ce:	4770      	bx	lr

004010d0 <__fini_array_start>:
  4010d0:	00400169 	.word	0x00400169
