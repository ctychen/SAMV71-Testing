
ADCSPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019fc  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000104  20400000  004019fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000011dc  20400104  00401b00  00020104  2**2
                  ALLOC
  3 .heap         00000200  204012e0  00402cdc  00020104  2**0
                  ALLOC
  4 .stack        00000400  204014e0  00402edc  00020104  2**0
                  ALLOC
  5 .ARM.attributes 0000002e  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020132  2**0
                  CONTENTS, READONLY
  7 .debug_info   00012cd8  00000000  00000000  0002018b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002cab  00000000  00000000  00032e63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000800f  00000000  00000000  00035b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a38  00000000  00000000  0003db1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000009a8  00000000  00000000  0003e555  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0003de72  00000000  00000000  0003eefd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00011f9f  00000000  00000000  0007cd6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00146056  00000000  00000000  0008ed0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001ab8  00000000  00000000  001d4d64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	e0 18 40 20 f9 02 40 00 f5 02 40 00 f5 02 40 00     ..@ ..@...@...@.
  400010:	f5 02 40 00 f5 02 40 00 f5 02 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	f5 02 40 00 f5 02 40 00 00 00 00 00 f5 02 40 00     ..@...@.......@.
  40003c:	f5 02 40 00 f5 02 40 00 f5 02 40 00 f5 02 40 00     ..@...@...@...@.
  40004c:	f5 02 40 00 f5 02 40 00 f5 02 40 00 f5 02 40 00     ..@...@...@...@.
  40005c:	f5 02 40 00 f5 02 40 00 00 00 00 00 f5 02 40 00     ..@...@.......@.
  40006c:	f5 02 40 00 f5 02 40 00 f5 02 40 00 89 15 40 00     ..@...@...@...@.
  40007c:	f5 02 40 00 f5 02 40 00 f5 02 40 00 f5 02 40 00     ..@...@...@...@.
  40008c:	f5 02 40 00 f5 02 40 00 f5 02 40 00 f5 02 40 00     ..@...@...@...@.
  40009c:	9d 11 40 00 f5 02 40 00 f5 02 40 00 f5 02 40 00     ..@...@...@...@.
  4000ac:	f5 02 40 00 f5 02 40 00 f5 02 40 00 f5 02 40 00     ..@...@...@...@.
  4000bc:	f5 02 40 00 f5 02 40 00 f5 02 40 00 f5 02 40 00     ..@...@...@...@.
  4000cc:	f5 02 40 00 f5 02 40 00 f5 02 40 00 f5 02 40 00     ..@...@...@...@.
  4000dc:	f5 02 40 00 f5 02 40 00 f5 02 40 00 f5 02 40 00     ..@...@...@...@.
  4000ec:	f5 02 40 00 f5 02 40 00 f5 02 40 00 f5 02 40 00     ..@...@...@...@.
  4000fc:	f5 02 40 00 f5 02 40 00 f5 02 40 00 f5 02 40 00     ..@...@...@...@.
  40010c:	f5 02 40 00 f5 02 40 00 f5 02 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 f5 02 40 00 f5 02 40 00 f5 02 40 00     ......@...@...@.
  40012c:	f5 02 40 00 f5 02 40 00 f5 02 40 00 f5 02 40 00     ..@...@...@...@.
  40013c:	f5 02 40 00 f5 02 40 00 f5 02 40 00 f5 02 40 00     ..@...@...@...@.
  40014c:	f5 02 40 00 f5 02 40 00 f5 02 40 00 f5 02 40 00     ..@...@...@...@.
  40015c:	f5 02 40 00 f5 02 40 00 f5 02 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400104 	.word	0x20400104
  400184:	00000000 	.word	0x00000000
  400188:	004019fc 	.word	0x004019fc

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	004019fc 	.word	0x004019fc
  4001c8:	20400108 	.word	0x20400108
  4001cc:	004019fc 	.word	0x004019fc
  4001d0:	00000000 	.word	0x00000000

004001d4 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
  4001d4:	b508      	push	{r3, lr}
	system_init();
  4001d6:	4b01      	ldr	r3, [pc, #4]	; (4001dc <atmel_start_init+0x8>)
  4001d8:	4798      	blx	r3
  4001da:	bd08      	pop	{r3, pc}
  4001dc:	0040051d 	.word	0x0040051d

004001e0 <dequeue>:
	queueSize++;

}


BufferItem dequeue() {
  4001e0:	b430      	push	{r4, r5}
  4001e2:	b086      	sub	sp, #24
  4001e4:	4602      	mov	r2, r0
	if (queueSize > 0) {
  4001e6:	4b21      	ldr	r3, [pc, #132]	; (40026c <dequeue+0x8c>)
  4001e8:	881b      	ldrh	r3, [r3, #0]
  4001ea:	b29b      	uxth	r3, r3
  4001ec:	b983      	cbnz	r3, 400210 <dequeue+0x30>
		queueStart = (queueStart + 1) % BUFFER_QUEUE_SIZE;
		queueSize--;
		return item;
	}
	// else, return an empty item
	BufferItem emptyItem = {{0x00}};
  4001ee:	2300      	movs	r3, #0
  4001f0:	9303      	str	r3, [sp, #12]
  4001f2:	9304      	str	r3, [sp, #16]
  4001f4:	f8cd 3013 	str.w	r3, [sp, #19]
	return emptyItem;
  4001f8:	ab03      	add	r3, sp, #12
  4001fa:	cb03      	ldmia	r3!, {r0, r1}
  4001fc:	6010      	str	r0, [r2, #0]
  4001fe:	6051      	str	r1, [r2, #4]
  400200:	8819      	ldrh	r1, [r3, #0]
  400202:	789b      	ldrb	r3, [r3, #2]
  400204:	8111      	strh	r1, [r2, #8]
  400206:	7293      	strb	r3, [r2, #10]
}
  400208:	4610      	mov	r0, r2
  40020a:	b006      	add	sp, #24
  40020c:	bc30      	pop	{r4, r5}
  40020e:	4770      	bx	lr
		BufferItem item = bufferQueue[queueStart];
  400210:	4c16      	ldr	r4, [pc, #88]	; (40026c <dequeue+0x8c>)
  400212:	8863      	ldrh	r3, [r4, #2]
  400214:	b29b      	uxth	r3, r3
  400216:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  40021a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
  40021e:	4914      	ldr	r1, [pc, #80]	; (400270 <dequeue+0x90>)
  400220:	440b      	add	r3, r1
  400222:	466d      	mov	r5, sp
  400224:	6818      	ldr	r0, [r3, #0]
  400226:	6859      	ldr	r1, [r3, #4]
  400228:	c503      	stmia	r5!, {r0, r1}
  40022a:	8919      	ldrh	r1, [r3, #8]
  40022c:	7a9b      	ldrb	r3, [r3, #10]
  40022e:	8029      	strh	r1, [r5, #0]
  400230:	70ab      	strb	r3, [r5, #2]
		queueStart = (queueStart + 1) % BUFFER_QUEUE_SIZE;
  400232:	8861      	ldrh	r1, [r4, #2]
  400234:	b289      	uxth	r1, r1
  400236:	3101      	adds	r1, #1
  400238:	480e      	ldr	r0, [pc, #56]	; (400274 <dequeue+0x94>)
  40023a:	fb80 3001 	smull	r3, r0, r0, r1
  40023e:	17cb      	asrs	r3, r1, #31
  400240:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
  400244:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  400248:	0058      	lsls	r0, r3, #1
  40024a:	1a0b      	subs	r3, r1, r0
  40024c:	b29b      	uxth	r3, r3
  40024e:	8063      	strh	r3, [r4, #2]
		queueSize--;
  400250:	8823      	ldrh	r3, [r4, #0]
  400252:	b29b      	uxth	r3, r3
  400254:	3b01      	subs	r3, #1
  400256:	b29b      	uxth	r3, r3
  400258:	8023      	strh	r3, [r4, #0]
		return item;
  40025a:	466b      	mov	r3, sp
  40025c:	cb03      	ldmia	r3!, {r0, r1}
  40025e:	6010      	str	r0, [r2, #0]
  400260:	6051      	str	r1, [r2, #4]
  400262:	8819      	ldrh	r1, [r3, #0]
  400264:	789b      	ldrb	r3, [r3, #2]
  400266:	8111      	strh	r1, [r2, #8]
  400268:	7293      	strb	r3, [r2, #10]
  40026a:	e7cd      	b.n	400208 <dequeue+0x28>
  40026c:	20400120 	.word	0x20400120
  400270:	20400244 	.word	0x20400244
  400274:	66666667 	.word	0x66666667

00400278 <enqueue>:
void enqueue(BufferItem item) {
  400278:	b570      	push	{r4, r5, r6, lr}
  40027a:	b088      	sub	sp, #32
  40027c:	ab08      	add	r3, sp, #32
  40027e:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (queueSize >= BUFFER_QUEUE_SIZE) {
  400282:	4b18      	ldr	r3, [pc, #96]	; (4002e4 <enqueue+0x6c>)
  400284:	881b      	ldrh	r3, [r3, #0]
  400286:	b29b      	uxth	r3, r3
  400288:	2b09      	cmp	r3, #9
  40028a:	d826      	bhi.n	4002da <enqueue+0x62>
	bufferQueue[queueEnd] = item;
  40028c:	4a15      	ldr	r2, [pc, #84]	; (4002e4 <enqueue+0x6c>)
  40028e:	8893      	ldrh	r3, [r2, #4]
  400290:	b29b      	uxth	r3, r3
  400292:	4e15      	ldr	r6, [pc, #84]	; (4002e8 <enqueue+0x70>)
  400294:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  400298:	eb03 0341 	add.w	r3, r3, r1, lsl #1
  40029c:	18f5      	adds	r5, r6, r3
  40029e:	ac05      	add	r4, sp, #20
  4002a0:	cc03      	ldmia	r4!, {r0, r1}
  4002a2:	50f0      	str	r0, [r6, r3]
  4002a4:	6069      	str	r1, [r5, #4]
  4002a6:	8821      	ldrh	r1, [r4, #0]
  4002a8:	78a3      	ldrb	r3, [r4, #2]
  4002aa:	8129      	strh	r1, [r5, #8]
  4002ac:	72ab      	strb	r3, [r5, #10]
	queueEnd = (queueEnd + 1) % BUFFER_QUEUE_SIZE;
  4002ae:	8891      	ldrh	r1, [r2, #4]
  4002b0:	b289      	uxth	r1, r1
  4002b2:	3101      	adds	r1, #1
  4002b4:	480d      	ldr	r0, [pc, #52]	; (4002ec <enqueue+0x74>)
  4002b6:	fb80 3001 	smull	r3, r0, r0, r1
  4002ba:	17cb      	asrs	r3, r1, #31
  4002bc:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
  4002c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4002c4:	0058      	lsls	r0, r3, #1
  4002c6:	1a0b      	subs	r3, r1, r0
  4002c8:	b29b      	uxth	r3, r3
  4002ca:	8093      	strh	r3, [r2, #4]
	queueSize++;
  4002cc:	8813      	ldrh	r3, [r2, #0]
  4002ce:	b29b      	uxth	r3, r3
  4002d0:	3301      	adds	r3, #1
  4002d2:	b29b      	uxth	r3, r3
  4002d4:	8013      	strh	r3, [r2, #0]
}
  4002d6:	b008      	add	sp, #32
  4002d8:	bd70      	pop	{r4, r5, r6, pc}
		dequeue();
  4002da:	4668      	mov	r0, sp
  4002dc:	4b04      	ldr	r3, [pc, #16]	; (4002f0 <enqueue+0x78>)
  4002de:	4798      	blx	r3
  4002e0:	e7d4      	b.n	40028c <enqueue+0x14>
  4002e2:	bf00      	nop
  4002e4:	20400120 	.word	0x20400120
  4002e8:	20400244 	.word	0x20400244
  4002ec:	66666667 	.word	0x66666667
  4002f0:	004001e1 	.word	0x004001e1

004002f4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4002f4:	e7fe      	b.n	4002f4 <Dummy_Handler>
	...

004002f8 <Reset_Handler>:
{
  4002f8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4002fa:	4b10      	ldr	r3, [pc, #64]	; (40033c <Reset_Handler+0x44>)
  4002fc:	4a10      	ldr	r2, [pc, #64]	; (400340 <Reset_Handler+0x48>)
  4002fe:	429a      	cmp	r2, r3
  400300:	d009      	beq.n	400316 <Reset_Handler+0x1e>
  400302:	4b0e      	ldr	r3, [pc, #56]	; (40033c <Reset_Handler+0x44>)
  400304:	4a0e      	ldr	r2, [pc, #56]	; (400340 <Reset_Handler+0x48>)
  400306:	e003      	b.n	400310 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
  400308:	6811      	ldr	r1, [r2, #0]
  40030a:	6019      	str	r1, [r3, #0]
  40030c:	3304      	adds	r3, #4
  40030e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  400310:	490c      	ldr	r1, [pc, #48]	; (400344 <Reset_Handler+0x4c>)
  400312:	428b      	cmp	r3, r1
  400314:	d3f8      	bcc.n	400308 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
  400316:	4b0c      	ldr	r3, [pc, #48]	; (400348 <Reset_Handler+0x50>)
  400318:	e002      	b.n	400320 <Reset_Handler+0x28>
                *pDest++ = 0;
  40031a:	2200      	movs	r2, #0
  40031c:	601a      	str	r2, [r3, #0]
  40031e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400320:	4a0a      	ldr	r2, [pc, #40]	; (40034c <Reset_Handler+0x54>)
  400322:	4293      	cmp	r3, r2
  400324:	d3f9      	bcc.n	40031a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400326:	4a0a      	ldr	r2, [pc, #40]	; (400350 <Reset_Handler+0x58>)
  400328:	4b0a      	ldr	r3, [pc, #40]	; (400354 <Reset_Handler+0x5c>)
  40032a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40032e:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400330:	4b09      	ldr	r3, [pc, #36]	; (400358 <Reset_Handler+0x60>)
  400332:	4798      	blx	r3
        main();
  400334:	4b09      	ldr	r3, [pc, #36]	; (40035c <Reset_Handler+0x64>)
  400336:	4798      	blx	r3
  400338:	e7fe      	b.n	400338 <Reset_Handler+0x40>
  40033a:	bf00      	nop
  40033c:	20400000 	.word	0x20400000
  400340:	004019fc 	.word	0x004019fc
  400344:	20400104 	.word	0x20400104
  400348:	20400104 	.word	0x20400104
  40034c:	204012e0 	.word	0x204012e0
  400350:	e000ed00 	.word	0xe000ed00
  400354:	00400000 	.word	0x00400000
  400358:	00401849 	.word	0x00401849
  40035c:	00401731 	.word	0x00401731

00400360 <TIMER_0_init>:
 * \brief Timer initialization function
 *
 * Enables Timer peripheral, clocks and initializes Timer driver
 */
static void TIMER_0_init(void)
{
  400360:	b508      	push	{r3, lr}
}

static inline hri_pmc_pcsr0_reg_t hri_pmc_get_PCSR0_reg(const void *const hw, hri_pmc_pcsr0_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400362:	4b08      	ldr	r3, [pc, #32]	; (400384 <TIMER_0_init+0x24>)
  400364:	699b      	ldr	r3, [r3, #24]
 *
 */
static inline void _pmc_enable_periph_clock(uint32_t periph_id)
{
	if (periph_id < 32) {
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  400366:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
  40036a:	d103      	bne.n	400374 <TIMER_0_init+0x14>
	((Pmc *)hw)->PMC_PCER0 = mask;
  40036c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400370:	4b04      	ldr	r3, [pc, #16]	; (400384 <TIMER_0_init+0x24>)
  400372:	611a      	str	r2, [r3, #16]
	_pmc_enable_periph_clock(ID_TC0_CHANNEL0);
	TIMER_0_PORT_init();
	timer_init(&TIMER_0, TC0, _tc_get_timer());
  400374:	4b04      	ldr	r3, [pc, #16]	; (400388 <TIMER_0_init+0x28>)
  400376:	4798      	blx	r3
  400378:	4602      	mov	r2, r0
  40037a:	4904      	ldr	r1, [pc, #16]	; (40038c <TIMER_0_init+0x2c>)
  40037c:	4804      	ldr	r0, [pc, #16]	; (400390 <TIMER_0_init+0x30>)
  40037e:	4b05      	ldr	r3, [pc, #20]	; (400394 <TIMER_0_init+0x34>)
  400380:	4798      	blx	r3
  400382:	bd08      	pop	{r3, pc}
  400384:	400e0600 	.word	0x400e0600
  400388:	00401199 	.word	0x00401199
  40038c:	4000c000 	.word	0x4000c000
  400390:	20400324 	.word	0x20400324
  400394:	00400835 	.word	0x00400835

00400398 <SPI_0_PORT_init>:
}

static inline void hri_pio_set_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  400398:	4b11      	ldr	r3, [pc, #68]	; (4003e0 <SPI_0_PORT_init+0x48>)
  40039a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40039c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  4003a0:	671a      	str	r2, [r3, #112]	; 0x70
}

static inline void hri_pio_clear_ABCDSR_reg(const void *const hw, uint8_t index, hri_pio_abcdsr_reg_t mask)
{
	PIO_CRITICAL_SECTION_ENTER();
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4003a2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4003a4:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
  4003a8:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4003aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  4003ae:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4003b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4003b2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  4003b6:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4003b8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4003ba:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  4003be:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4003c0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4003c4:	605a      	str	r2, [r3, #4]
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4003c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4003c8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  4003cc:	671a      	str	r2, [r3, #112]	; 0x70
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  4003ce:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4003d0:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
  4003d4:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4003d6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4003da:	605a      	str	r2, [r3, #4]
  4003dc:	4770      	bx	lr
  4003de:	bf00      	nop
  4003e0:	400e1400 	.word	0x400e1400

004003e4 <SPI_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  4003e4:	4b04      	ldr	r3, [pc, #16]	; (4003f8 <SPI_0_CLOCK_init+0x14>)
  4003e6:	699b      	ldr	r3, [r3, #24]
  4003e8:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
  4003ec:	d103      	bne.n	4003f6 <SPI_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  4003ee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4003f2:	4b01      	ldr	r3, [pc, #4]	; (4003f8 <SPI_0_CLOCK_init+0x14>)
  4003f4:	611a      	str	r2, [r3, #16]
  4003f6:	4770      	bx	lr
  4003f8:	400e0600 	.word	0x400e0600

004003fc <SPI_0_init>:
{
  4003fc:	b510      	push	{r4, lr}
	SPI_0_CLOCK_init();
  4003fe:	4b08      	ldr	r3, [pc, #32]	; (400420 <SPI_0_init+0x24>)
  400400:	4798      	blx	r3
	spi_m_sync_set_func_ptr(&SPI_0, _spi_get_spi_m_sync());
  400402:	4b08      	ldr	r3, [pc, #32]	; (400424 <SPI_0_init+0x28>)
  400404:	4798      	blx	r3
  400406:	4c08      	ldr	r4, [pc, #32]	; (400428 <SPI_0_init+0x2c>)
  400408:	4601      	mov	r1, r0
  40040a:	4620      	mov	r0, r4
  40040c:	4b07      	ldr	r3, [pc, #28]	; (40042c <SPI_0_init+0x30>)
  40040e:	4798      	blx	r3
	spi_m_sync_init(&SPI_0, SPI0);
  400410:	4907      	ldr	r1, [pc, #28]	; (400430 <SPI_0_init+0x34>)
  400412:	4620      	mov	r0, r4
  400414:	4b07      	ldr	r3, [pc, #28]	; (400434 <SPI_0_init+0x38>)
  400416:	4798      	blx	r3
	SPI_0_PORT_init();
  400418:	4b07      	ldr	r3, [pc, #28]	; (400438 <SPI_0_init+0x3c>)
  40041a:	4798      	blx	r3
  40041c:	bd10      	pop	{r4, pc}
  40041e:	bf00      	nop
  400420:	004003e5 	.word	0x004003e5
  400424:	00401049 	.word	0x00401049
  400428:	204002bc 	.word	0x204002bc
  40042c:	00400601 	.word	0x00400601
  400430:	40008000 	.word	0x40008000
  400434:	00400621 	.word	0x00400621
  400438:	00400399 	.word	0x00400399

0040043c <RAND_0_CLOCK_init>:
}

static inline hri_pmc_pcsr1_reg_t hri_pmc_get_PCSR1_reg(const void *const hw, hri_pmc_pcsr1_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Pmc *)hw)->PMC_PCSR1;
  40043c:	4b05      	ldr	r3, [pc, #20]	; (400454 <RAND_0_CLOCK_init+0x18>)
  40043e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
			hri_pmc_set_PCSR0_reg(PMC, (1 << periph_id));
		}
	} else if (periph_id < 64) {
		periph_id -= 32;
		if (!hri_pmc_get_PCSR1_reg(PMC, (1 << periph_id))) {
  400442:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
  400446:	d104      	bne.n	400452 <RAND_0_CLOCK_init+0x16>
	((Pmc *)hw)->PMC_PCER1 = mask;
  400448:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  40044c:	4b01      	ldr	r3, [pc, #4]	; (400454 <RAND_0_CLOCK_init+0x18>)
  40044e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  400452:	4770      	bx	lr
  400454:	400e0600 	.word	0x400e0600

00400458 <RAND_0_init>:
{
	_pmc_enable_periph_clock(ID_TRNG);
}

void RAND_0_init(void)
{
  400458:	b508      	push	{r3, lr}
	RAND_0_CLOCK_init();
  40045a:	4b03      	ldr	r3, [pc, #12]	; (400468 <RAND_0_init+0x10>)
  40045c:	4798      	blx	r3
	rand_sync_init(&RAND_0, TRNG);
  40045e:	4903      	ldr	r1, [pc, #12]	; (40046c <RAND_0_init+0x14>)
  400460:	4803      	ldr	r0, [pc, #12]	; (400470 <RAND_0_init+0x18>)
  400462:	4b04      	ldr	r3, [pc, #16]	; (400474 <RAND_0_init+0x1c>)
  400464:	4798      	blx	r3
  400466:	bd08      	pop	{r3, pc}
  400468:	0040043d 	.word	0x0040043d
  40046c:	40070000 	.word	0x40070000
  400470:	204002b4 	.word	0x204002b4
  400474:	004005d5 	.word	0x004005d5

00400478 <USART_0_CLOCK_init>:
	tmp = ((Pmc *)hw)->PMC_PCSR0;
  400478:	4b04      	ldr	r3, [pc, #16]	; (40048c <USART_0_CLOCK_init+0x14>)
  40047a:	699b      	ldr	r3, [r3, #24]
		if (!hri_pmc_get_PCSR0_reg(PMC, (1 << periph_id))) {
  40047c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
  400480:	d103      	bne.n	40048a <USART_0_CLOCK_init+0x12>
	((Pmc *)hw)->PMC_PCER0 = mask;
  400482:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  400486:	4b01      	ldr	r3, [pc, #4]	; (40048c <USART_0_CLOCK_init+0x14>)
  400488:	611a      	str	r2, [r3, #16]
  40048a:	4770      	bx	lr
  40048c:	400e0600 	.word	0x400e0600

00400490 <USART_0_PORT_init>:
	((Pio *)hw)->PIO_ABCDSR[index] &= ~mask;
  400490:	4b0f      	ldr	r3, [pc, #60]	; (4004d0 <USART_0_PORT_init+0x40>)
  400492:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400494:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400498:	671a      	str	r2, [r3, #112]	; 0x70
  40049a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  40049c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  4004a0:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4004a2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4004a6:	605a      	str	r2, [r3, #4]
}

static inline void hri_matrix_set_CCFG_SYSIO_reg(const void *const hw, hri_matrix_ccfg_sysio_reg_t mask)
{
	MATRIX_CRITICAL_SECTION_ENTER();
	((Matrix *)hw)->CCFG_SYSIO |= mask;
  4004a8:	4a0a      	ldr	r2, [pc, #40]	; (4004d4 <USART_0_PORT_init+0x44>)
  4004aa:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  4004ae:	f043 0310 	orr.w	r3, r3, #16
  4004b2:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	((Pio *)hw)->PIO_ABCDSR[index] |= mask;
  4004b6:	4b08      	ldr	r3, [pc, #32]	; (4004d8 <USART_0_PORT_init+0x48>)
  4004b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4004ba:	f042 0210 	orr.w	r2, r2, #16
  4004be:	671a      	str	r2, [r3, #112]	; 0x70
  4004c0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4004c2:	f042 0210 	orr.w	r2, r2, #16
  4004c6:	675a      	str	r2, [r3, #116]	; 0x74
	((Pio *)hw)->PIO_PDR = mask;
  4004c8:	2210      	movs	r2, #16
  4004ca:	605a      	str	r2, [r3, #4]
  4004cc:	4770      	bx	lr
  4004ce:	bf00      	nop
  4004d0:	400e0e00 	.word	0x400e0e00
  4004d4:	40088000 	.word	0x40088000
  4004d8:	400e1000 	.word	0x400e1000

004004dc <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
  4004dc:	b510      	push	{r4, lr}
  4004de:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
  4004e0:	4b07      	ldr	r3, [pc, #28]	; (400500 <USART_0_init+0x24>)
  4004e2:	4798      	blx	r3
	USART_0_PORT_init();
  4004e4:	4b07      	ldr	r3, [pc, #28]	; (400504 <USART_0_init+0x28>)
  4004e6:	4798      	blx	r3
	usart_async_init(&USART_0, USART1, USART_0_buffer, USART_0_BUFFER_SIZE, _usart_get_usart_async());
  4004e8:	4b07      	ldr	r3, [pc, #28]	; (400508 <USART_0_init+0x2c>)
  4004ea:	4798      	blx	r3
  4004ec:	9000      	str	r0, [sp, #0]
  4004ee:	2310      	movs	r3, #16
  4004f0:	4a06      	ldr	r2, [pc, #24]	; (40050c <USART_0_init+0x30>)
  4004f2:	4907      	ldr	r1, [pc, #28]	; (400510 <USART_0_init+0x34>)
  4004f4:	4807      	ldr	r0, [pc, #28]	; (400514 <USART_0_init+0x38>)
  4004f6:	4c08      	ldr	r4, [pc, #32]	; (400518 <USART_0_init+0x3c>)
  4004f8:	47a0      	blx	r4
}
  4004fa:	b002      	add	sp, #8
  4004fc:	bd10      	pop	{r4, pc}
  4004fe:	bf00      	nop
  400500:	00400479 	.word	0x00400479
  400504:	00400491 	.word	0x00400491
  400508:	00401585 	.word	0x00401585
  40050c:	20400128 	.word	0x20400128
  400510:	40028000 	.word	0x40028000
  400514:	204002d4 	.word	0x204002d4
  400518:	00400aa9 	.word	0x00400aa9

0040051c <system_init>:

void system_init(void)
{
  40051c:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
  40051e:	4b08      	ldr	r3, [pc, #32]	; (400540 <system_init+0x24>)
  400520:	4798      	blx	r3
}

static inline void hri_wdt_set_MR_WDDIS_bit(const void *const hw)
{
	WDT_CRITICAL_SECTION_ENTER();
	((Wdt *)hw)->WDT_MR |= WDT_MR_WDDIS;
  400522:	4a08      	ldr	r2, [pc, #32]	; (400544 <system_init+0x28>)
  400524:	6853      	ldr	r3, [r2, #4]
  400526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  40052a:	6053      	str	r3, [r2, #4]
	init_mcu();

	/* Disable Watchdog */
	hri_wdt_set_MR_WDDIS_bit(WDT);

	SPI_0_init();
  40052c:	4b06      	ldr	r3, [pc, #24]	; (400548 <system_init+0x2c>)
  40052e:	4798      	blx	r3
	TIMER_0_init();
  400530:	4b06      	ldr	r3, [pc, #24]	; (40054c <system_init+0x30>)
  400532:	4798      	blx	r3

	RAND_0_init();
  400534:	4b06      	ldr	r3, [pc, #24]	; (400550 <system_init+0x34>)
  400536:	4798      	blx	r3
	USART_0_init();
  400538:	4b06      	ldr	r3, [pc, #24]	; (400554 <system_init+0x38>)
  40053a:	4798      	blx	r3
  40053c:	bd08      	pop	{r3, pc}
  40053e:	bf00      	nop
  400540:	00400d49 	.word	0x00400d49
  400544:	400e1850 	.word	0x400e1850
  400548:	004003fd 	.word	0x004003fd
  40054c:	00400361 	.word	0x00400361
  400550:	00400459 	.word	0x00400459
  400554:	004004dd 	.word	0x004004dd

00400558 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400558:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
  40055c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  40055e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  400560:	f3bf 8f5f 	dmb	sy
  400564:	4770      	bx	lr

00400566 <atomic_leave_critical>:
  400566:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
  40056a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
  40056c:	f383 8810 	msr	PRIMASK, r3
  400570:	4770      	bx	lr
	...

00400574 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
  400574:	b570      	push	{r4, r5, r6, lr}
  400576:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  400578:	4604      	mov	r4, r0
  40057a:	460d      	mov	r5, r1
  40057c:	2800      	cmp	r0, #0
  40057e:	bf18      	it	ne
  400580:	2900      	cmpne	r1, #0
  400582:	bf14      	ite	ne
  400584:	2001      	movne	r0, #1
  400586:	2000      	moveq	r0, #0
  400588:	2234      	movs	r2, #52	; 0x34
  40058a:	4904      	ldr	r1, [pc, #16]	; (40059c <io_write+0x28>)
  40058c:	4b04      	ldr	r3, [pc, #16]	; (4005a0 <io_write+0x2c>)
  40058e:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
  400590:	6823      	ldr	r3, [r4, #0]
  400592:	4632      	mov	r2, r6
  400594:	4629      	mov	r1, r5
  400596:	4620      	mov	r0, r4
  400598:	4798      	blx	r3
}
  40059a:	bd70      	pop	{r4, r5, r6, pc}
  40059c:	00401890 	.word	0x00401890
  4005a0:	00400bdd 	.word	0x00400bdd

004005a4 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
  4005a4:	b570      	push	{r4, r5, r6, lr}
  4005a6:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
  4005a8:	4604      	mov	r4, r0
  4005aa:	460d      	mov	r5, r1
  4005ac:	2800      	cmp	r0, #0
  4005ae:	bf18      	it	ne
  4005b0:	2900      	cmpne	r1, #0
  4005b2:	bf14      	ite	ne
  4005b4:	2001      	movne	r0, #1
  4005b6:	2000      	moveq	r0, #0
  4005b8:	223d      	movs	r2, #61	; 0x3d
  4005ba:	4904      	ldr	r1, [pc, #16]	; (4005cc <io_read+0x28>)
  4005bc:	4b04      	ldr	r3, [pc, #16]	; (4005d0 <io_read+0x2c>)
  4005be:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
  4005c0:	6863      	ldr	r3, [r4, #4]
  4005c2:	4632      	mov	r2, r6
  4005c4:	4629      	mov	r1, r5
  4005c6:	4620      	mov	r0, r4
  4005c8:	4798      	blx	r3
}
  4005ca:	bd70      	pop	{r4, r5, r6, pc}
  4005cc:	00401890 	.word	0x00401890
  4005d0:	00400bdd 	.word	0x00400bdd

004005d4 <rand_sync_init>:
#include "hal_rand_sync.h"

#define HAL_RNG_SYNC_VERSION 0x00000001u

int32_t rand_sync_init(struct rand_sync_desc *const desc, void *const hw)
{
  4005d4:	b538      	push	{r3, r4, r5, lr}
  4005d6:	460d      	mov	r5, r1
	ASSERT(desc);
  4005d8:	4604      	mov	r4, r0
  4005da:	2229      	movs	r2, #41	; 0x29
  4005dc:	4905      	ldr	r1, [pc, #20]	; (4005f4 <rand_sync_init+0x20>)
  4005de:	3000      	adds	r0, #0
  4005e0:	bf18      	it	ne
  4005e2:	2001      	movne	r0, #1
  4005e4:	4b04      	ldr	r3, [pc, #16]	; (4005f8 <rand_sync_init+0x24>)
  4005e6:	4798      	blx	r3

	return _rand_sync_init(&desc->dev, hw);
  4005e8:	4629      	mov	r1, r5
  4005ea:	4620      	mov	r0, r4
  4005ec:	4b03      	ldr	r3, [pc, #12]	; (4005fc <rand_sync_init+0x28>)
  4005ee:	4798      	blx	r3
}
  4005f0:	bd38      	pop	{r3, r4, r5, pc}
  4005f2:	bf00      	nop
  4005f4:	004018a4 	.word	0x004018a4
  4005f8:	00400bdd 	.word	0x00400bdd
  4005fc:	004011b1 	.word	0x004011b1

00400600 <spi_m_sync_set_func_ptr>:

/**
 *  \brief Initialize the SPI HAL instance function pointer for HPL APIs.
 */
void spi_m_sync_set_func_ptr(struct spi_m_sync_descriptor *spi, void *const func)
{
  400600:	b538      	push	{r3, r4, r5, lr}
  400602:	460d      	mov	r5, r1
	ASSERT(spi);
  400604:	4604      	mov	r4, r0
  400606:	2239      	movs	r2, #57	; 0x39
  400608:	4903      	ldr	r1, [pc, #12]	; (400618 <spi_m_sync_set_func_ptr+0x18>)
  40060a:	3000      	adds	r0, #0
  40060c:	bf18      	it	ne
  40060e:	2001      	movne	r0, #1
  400610:	4b02      	ldr	r3, [pc, #8]	; (40061c <spi_m_sync_set_func_ptr+0x1c>)
  400612:	4798      	blx	r3
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
  400614:	6025      	str	r5, [r4, #0]
  400616:	bd38      	pop	{r3, r4, r5, pc}
  400618:	004018c0 	.word	0x004018c0
  40061c:	00400bdd 	.word	0x00400bdd

00400620 <spi_m_sync_init>:
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
  400620:	b538      	push	{r3, r4, r5, lr}
	int32_t rc = 0;
	ASSERT(spi && hw);
  400622:	4604      	mov	r4, r0
  400624:	460d      	mov	r5, r1
  400626:	2800      	cmp	r0, #0
  400628:	bf18      	it	ne
  40062a:	2900      	cmpne	r1, #0
  40062c:	bf14      	ite	ne
  40062e:	2001      	movne	r0, #1
  400630:	2000      	moveq	r0, #0
  400632:	2240      	movs	r2, #64	; 0x40
  400634:	4909      	ldr	r1, [pc, #36]	; (40065c <spi_m_sync_init+0x3c>)
  400636:	4b0a      	ldr	r3, [pc, #40]	; (400660 <spi_m_sync_init+0x40>)
  400638:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
  40063a:	4620      	mov	r0, r4
  40063c:	f840 5f04 	str.w	r5, [r0, #4]!
	rc            = _spi_m_sync_init(&spi->dev, hw);
  400640:	4629      	mov	r1, r5
  400642:	4b08      	ldr	r3, [pc, #32]	; (400664 <spi_m_sync_init+0x44>)
  400644:	4798      	blx	r3

	if (rc < 0) {
  400646:	2800      	cmp	r0, #0
  400648:	db07      	blt.n	40065a <spi_m_sync_init+0x3a>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
  40064a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40064e:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
  400650:	4b05      	ldr	r3, [pc, #20]	; (400668 <spi_m_sync_init+0x48>)
  400652:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
  400654:	4b05      	ldr	r3, [pc, #20]	; (40066c <spi_m_sync_init+0x4c>)
  400656:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
  400658:	2000      	movs	r0, #0
}
  40065a:	bd38      	pop	{r3, r4, r5, pc}
  40065c:	004018c0 	.word	0x004018c0
  400660:	00400bdd 	.word	0x00400bdd
  400664:	00400e6d 	.word	0x00400e6d
  400668:	00400715 	.word	0x00400715
  40066c:	004006d9 	.word	0x004006d9

00400670 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
  400670:	b510      	push	{r4, lr}
	ASSERT(spi);
  400672:	4604      	mov	r4, r0
  400674:	2257      	movs	r2, #87	; 0x57
  400676:	4905      	ldr	r1, [pc, #20]	; (40068c <spi_m_sync_enable+0x1c>)
  400678:	3000      	adds	r0, #0
  40067a:	bf18      	it	ne
  40067c:	2001      	movne	r0, #1
  40067e:	4b04      	ldr	r3, [pc, #16]	; (400690 <spi_m_sync_enable+0x20>)
  400680:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
  400682:	1d20      	adds	r0, r4, #4
  400684:	4b03      	ldr	r3, [pc, #12]	; (400694 <spi_m_sync_enable+0x24>)
  400686:	4798      	blx	r3
  400688:	bd10      	pop	{r4, pc}
  40068a:	bf00      	nop
  40068c:	004018c0 	.word	0x004018c0
  400690:	00400bdd 	.word	0x00400bdd
  400694:	00400f15 	.word	0x00400f15

00400698 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
  400698:	b530      	push	{r4, r5, lr}
  40069a:	b085      	sub	sp, #20
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
  40069c:	4605      	mov	r5, r0
  40069e:	460c      	mov	r4, r1
  4006a0:	2800      	cmp	r0, #0
  4006a2:	bf18      	it	ne
  4006a4:	2900      	cmpne	r1, #0
  4006a6:	bf14      	ite	ne
  4006a8:	2001      	movne	r0, #1
  4006aa:	2000      	moveq	r0, #0
  4006ac:	22b3      	movs	r2, #179	; 0xb3
  4006ae:	4907      	ldr	r1, [pc, #28]	; (4006cc <spi_m_sync_transfer+0x34>)
  4006b0:	4b07      	ldr	r3, [pc, #28]	; (4006d0 <spi_m_sync_transfer+0x38>)
  4006b2:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
  4006b4:	6823      	ldr	r3, [r4, #0]
  4006b6:	9301      	str	r3, [sp, #4]
	msg.rxbuf = p_xfer->rxbuf;
  4006b8:	6863      	ldr	r3, [r4, #4]
  4006ba:	9302      	str	r3, [sp, #8]
	msg.size  = p_xfer->size;
  4006bc:	68a3      	ldr	r3, [r4, #8]
  4006be:	9303      	str	r3, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
  4006c0:	a901      	add	r1, sp, #4
  4006c2:	1d28      	adds	r0, r5, #4
  4006c4:	4b03      	ldr	r3, [pc, #12]	; (4006d4 <spi_m_sync_transfer+0x3c>)
  4006c6:	4798      	blx	r3
}
  4006c8:	b005      	add	sp, #20
  4006ca:	bd30      	pop	{r4, r5, pc}
  4006cc:	004018c0 	.word	0x004018c0
  4006d0:	00400bdd 	.word	0x00400bdd
  4006d4:	00400f49 	.word	0x00400f49

004006d8 <_spi_m_sync_io_write>:
{
  4006d8:	b570      	push	{r4, r5, r6, lr}
  4006da:	b084      	sub	sp, #16
  4006dc:	460e      	mov	r6, r1
  4006de:	4615      	mov	r5, r2
	ASSERT(io);
  4006e0:	4604      	mov	r4, r0
  4006e2:	22a3      	movs	r2, #163	; 0xa3
  4006e4:	4908      	ldr	r1, [pc, #32]	; (400708 <_spi_m_sync_io_write+0x30>)
  4006e6:	3000      	adds	r0, #0
  4006e8:	bf18      	it	ne
  4006ea:	2001      	movne	r0, #1
  4006ec:	4b07      	ldr	r3, [pc, #28]	; (40070c <_spi_m_sync_io_write+0x34>)
  4006ee:	4798      	blx	r3
	xfer.rxbuf = 0;
  4006f0:	2300      	movs	r3, #0
  4006f2:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
  4006f4:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
  4006f6:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  4006f8:	a901      	add	r1, sp, #4
  4006fa:	f1a4 000c 	sub.w	r0, r4, #12
  4006fe:	4b04      	ldr	r3, [pc, #16]	; (400710 <_spi_m_sync_io_write+0x38>)
  400700:	4798      	blx	r3
}
  400702:	b004      	add	sp, #16
  400704:	bd70      	pop	{r4, r5, r6, pc}
  400706:	bf00      	nop
  400708:	004018c0 	.word	0x004018c0
  40070c:	00400bdd 	.word	0x00400bdd
  400710:	00400699 	.word	0x00400699

00400714 <_spi_m_sync_io_read>:
{
  400714:	b570      	push	{r4, r5, r6, lr}
  400716:	b084      	sub	sp, #16
  400718:	460e      	mov	r6, r1
  40071a:	4615      	mov	r5, r2
	ASSERT(io);
  40071c:	4604      	mov	r4, r0
  40071e:	2287      	movs	r2, #135	; 0x87
  400720:	4908      	ldr	r1, [pc, #32]	; (400744 <_spi_m_sync_io_read+0x30>)
  400722:	3000      	adds	r0, #0
  400724:	bf18      	it	ne
  400726:	2001      	movne	r0, #1
  400728:	4b07      	ldr	r3, [pc, #28]	; (400748 <_spi_m_sync_io_read+0x34>)
  40072a:	4798      	blx	r3
	xfer.rxbuf = buf;
  40072c:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
  40072e:	2300      	movs	r3, #0
  400730:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
  400732:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
  400734:	a901      	add	r1, sp, #4
  400736:	f1a4 000c 	sub.w	r0, r4, #12
  40073a:	4b04      	ldr	r3, [pc, #16]	; (40074c <_spi_m_sync_io_read+0x38>)
  40073c:	4798      	blx	r3
}
  40073e:	b004      	add	sp, #16
  400740:	bd70      	pop	{r4, r5, r6, pc}
  400742:	bf00      	nop
  400744:	004018c0 	.word	0x004018c0
  400748:	00400bdd 	.word	0x00400bdd
  40074c:	00400699 	.word	0x00400699

00400750 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
  400750:	b538      	push	{r3, r4, r5, lr}
	ASSERT(spi && io);
  400752:	4604      	mov	r4, r0
  400754:	460d      	mov	r5, r1
  400756:	2800      	cmp	r0, #0
  400758:	bf18      	it	ne
  40075a:	2900      	cmpne	r1, #0
  40075c:	bf14      	ite	ne
  40075e:	2001      	movne	r0, #1
  400760:	2000      	moveq	r0, #0
  400762:	22bd      	movs	r2, #189	; 0xbd
  400764:	4903      	ldr	r1, [pc, #12]	; (400774 <spi_m_sync_get_io_descriptor+0x24>)
  400766:	4b04      	ldr	r3, [pc, #16]	; (400778 <spi_m_sync_get_io_descriptor+0x28>)
  400768:	4798      	blx	r3
	*io = &spi->io;
  40076a:	340c      	adds	r4, #12
  40076c:	602c      	str	r4, [r5, #0]
	return 0;
}
  40076e:	2000      	movs	r0, #0
  400770:	bd38      	pop	{r3, r4, r5, pc}
  400772:	bf00      	nop
  400774:	004018c0 	.word	0x004018c0
  400778:	00400bdd 	.word	0x00400bdd

0040077c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
  40077c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
  40077e:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
  400780:	b117      	cbz	r7, 400788 <timer_add_timer_task+0xc>
  400782:	463c      	mov	r4, r7
  400784:	2600      	movs	r6, #0
  400786:	e00b      	b.n	4007a0 <timer_add_timer_task+0x24>
		list_insert_as_head(list, new_task);
  400788:	4b0e      	ldr	r3, [pc, #56]	; (4007c4 <timer_add_timer_task+0x48>)
  40078a:	4798      	blx	r3
		return;
  40078c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
  40078e:	68a5      	ldr	r5, [r4, #8]
  400790:	442b      	add	r3, r5
  400792:	1a9b      	subs	r3, r3, r2
  400794:	3301      	adds	r3, #1
		}
		if (time_left >= new_task->interval)
  400796:	688d      	ldr	r5, [r1, #8]
  400798:	42ab      	cmp	r3, r5
  40079a:	d209      	bcs.n	4007b0 <timer_add_timer_task+0x34>
			break;
		prev = it;
  40079c:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
  40079e:	6824      	ldr	r4, [r4, #0]
  4007a0:	b134      	cbz	r4, 4007b0 <timer_add_timer_task+0x34>
		if (it->time_label <= time) {
  4007a2:	6863      	ldr	r3, [r4, #4]
  4007a4:	4293      	cmp	r3, r2
  4007a6:	d8f2      	bhi.n	40078e <timer_add_timer_task+0x12>
			time_left = it->interval - (time - it->time_label);
  4007a8:	68a5      	ldr	r5, [r4, #8]
  4007aa:	1a9b      	subs	r3, r3, r2
  4007ac:	442b      	add	r3, r5
  4007ae:	e7f2      	b.n	400796 <timer_add_timer_task+0x1a>
	}

	if (it == head) {
  4007b0:	42bc      	cmp	r4, r7
  4007b2:	d003      	beq.n	4007bc <timer_add_timer_task+0x40>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
  4007b4:	4630      	mov	r0, r6
  4007b6:	4b04      	ldr	r3, [pc, #16]	; (4007c8 <timer_add_timer_task+0x4c>)
  4007b8:	4798      	blx	r3
  4007ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
  4007bc:	4b01      	ldr	r3, [pc, #4]	; (4007c4 <timer_add_timer_task+0x48>)
  4007be:	4798      	blx	r3
  4007c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4007c2:	bf00      	nop
  4007c4:	00400bf9 	.word	0x00400bf9
  4007c8:	00400c25 	.word	0x00400c25

004007cc <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
  4007cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4007ce:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
  4007d0:	6906      	ldr	r6, [r0, #16]
  4007d2:	3601      	adds	r6, #1
  4007d4:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
  4007d6:	7e03      	ldrb	r3, [r0, #24]
  4007d8:	f013 0f01 	tst.w	r3, #1
  4007dc:	d105      	bne.n	4007ea <timer_process_counted+0x1e>
  4007de:	7e03      	ldrb	r3, [r0, #24]
  4007e0:	f013 0f02 	tst.w	r3, #2
  4007e4:	d101      	bne.n	4007ea <timer_process_counted+0x1e>
  4007e6:	4605      	mov	r5, r0
  4007e8:	e009      	b.n	4007fe <timer_process_counted+0x32>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
  4007ea:	7e03      	ldrb	r3, [r0, #24]
  4007ec:	f043 0302 	orr.w	r3, r3, #2
  4007f0:	7603      	strb	r3, [r0, #24]
		return;
  4007f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4007f4:	696f      	ldr	r7, [r5, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
  4007f6:	68e3      	ldr	r3, [r4, #12]
  4007f8:	4620      	mov	r0, r4
  4007fa:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
  4007fc:	463c      	mov	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
  4007fe:	b19c      	cbz	r4, 400828 <timer_process_counted+0x5c>
  400800:	6863      	ldr	r3, [r4, #4]
  400802:	1af3      	subs	r3, r6, r3
  400804:	68a2      	ldr	r2, [r4, #8]
  400806:	4293      	cmp	r3, r2
  400808:	d30e      	bcc.n	400828 <timer_process_counted+0x5c>
		list_remove_head(&timer->tasks);
  40080a:	f105 0714 	add.w	r7, r5, #20
  40080e:	4638      	mov	r0, r7
  400810:	4b06      	ldr	r3, [pc, #24]	; (40082c <timer_process_counted+0x60>)
  400812:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
  400814:	7c23      	ldrb	r3, [r4, #16]
  400816:	2b01      	cmp	r3, #1
  400818:	d1ec      	bne.n	4007f4 <timer_process_counted+0x28>
			tmp->time_label = time;
  40081a:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
  40081c:	4632      	mov	r2, r6
  40081e:	4621      	mov	r1, r4
  400820:	4638      	mov	r0, r7
  400822:	4b03      	ldr	r3, [pc, #12]	; (400830 <timer_process_counted+0x64>)
  400824:	4798      	blx	r3
  400826:	e7e5      	b.n	4007f4 <timer_process_counted+0x28>
  400828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40082a:	bf00      	nop
  40082c:	00400c2d 	.word	0x00400c2d
  400830:	0040077d 	.word	0x0040077d

00400834 <timer_init>:
{
  400834:	b538      	push	{r3, r4, r5, lr}
	ASSERT(descr && hw);
  400836:	4604      	mov	r4, r0
  400838:	460d      	mov	r5, r1
  40083a:	2800      	cmp	r0, #0
  40083c:	bf18      	it	ne
  40083e:	2900      	cmpne	r1, #0
  400840:	bf14      	ite	ne
  400842:	2001      	movne	r0, #1
  400844:	2000      	moveq	r0, #0
  400846:	223b      	movs	r2, #59	; 0x3b
  400848:	4905      	ldr	r1, [pc, #20]	; (400860 <timer_init+0x2c>)
  40084a:	4b06      	ldr	r3, [pc, #24]	; (400864 <timer_init+0x30>)
  40084c:	4798      	blx	r3
	_timer_init(&descr->device, hw);
  40084e:	4629      	mov	r1, r5
  400850:	4620      	mov	r0, r4
  400852:	4b05      	ldr	r3, [pc, #20]	; (400868 <timer_init+0x34>)
  400854:	4798      	blx	r3
	descr->time                           = 0;
  400856:	2000      	movs	r0, #0
  400858:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
  40085a:	4b04      	ldr	r3, [pc, #16]	; (40086c <timer_init+0x38>)
  40085c:	6023      	str	r3, [r4, #0]
}
  40085e:	bd38      	pop	{r3, r4, r5, pc}
  400860:	004018dc 	.word	0x004018dc
  400864:	00400bdd 	.word	0x00400bdd
  400868:	004010b1 	.word	0x004010b1
  40086c:	004007cd 	.word	0x004007cd

00400870 <timer_start>:
{
  400870:	b510      	push	{r4, lr}
	ASSERT(descr);
  400872:	4604      	mov	r4, r0
  400874:	2253      	movs	r2, #83	; 0x53
  400876:	4909      	ldr	r1, [pc, #36]	; (40089c <timer_start+0x2c>)
  400878:	3000      	adds	r0, #0
  40087a:	bf18      	it	ne
  40087c:	2001      	movne	r0, #1
  40087e:	4b08      	ldr	r3, [pc, #32]	; (4008a0 <timer_start+0x30>)
  400880:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
  400882:	4620      	mov	r0, r4
  400884:	4b07      	ldr	r3, [pc, #28]	; (4008a4 <timer_start+0x34>)
  400886:	4798      	blx	r3
  400888:	b920      	cbnz	r0, 400894 <timer_start+0x24>
	_timer_start(&descr->device);
  40088a:	4620      	mov	r0, r4
  40088c:	4b06      	ldr	r3, [pc, #24]	; (4008a8 <timer_start+0x38>)
  40088e:	4798      	blx	r3
	return ERR_NONE;
  400890:	2000      	movs	r0, #0
  400892:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
  400894:	f06f 0010 	mvn.w	r0, #16
}
  400898:	bd10      	pop	{r4, pc}
  40089a:	bf00      	nop
  40089c:	004018dc 	.word	0x004018dc
  4008a0:	00400bdd 	.word	0x00400bdd
  4008a4:	00401175 	.word	0x00401175
  4008a8:	0040116d 	.word	0x0040116d

004008ac <timer_add_task>:
{
  4008ac:	b570      	push	{r4, r5, r6, lr}
  4008ae:	b082      	sub	sp, #8
	ASSERT(descr && task);
  4008b0:	4604      	mov	r4, r0
  4008b2:	460d      	mov	r5, r1
  4008b4:	2800      	cmp	r0, #0
  4008b6:	bf18      	it	ne
  4008b8:	2900      	cmpne	r1, #0
  4008ba:	bf14      	ite	ne
  4008bc:	2001      	movne	r0, #1
  4008be:	2000      	moveq	r0, #0
  4008c0:	227a      	movs	r2, #122	; 0x7a
  4008c2:	491d      	ldr	r1, [pc, #116]	; (400938 <timer_add_task+0x8c>)
  4008c4:	4b1d      	ldr	r3, [pc, #116]	; (40093c <timer_add_task+0x90>)
  4008c6:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
  4008c8:	7e23      	ldrb	r3, [r4, #24]
  4008ca:	f043 0301 	orr.w	r3, r3, #1
  4008ce:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
  4008d0:	f104 0614 	add.w	r6, r4, #20
  4008d4:	4629      	mov	r1, r5
  4008d6:	4630      	mov	r0, r6
  4008d8:	4b19      	ldr	r3, [pc, #100]	; (400940 <timer_add_task+0x94>)
  4008da:	4798      	blx	r3
  4008dc:	b988      	cbnz	r0, 400902 <timer_add_task+0x56>
	task->time_label = descr->time;
  4008de:	6923      	ldr	r3, [r4, #16]
  4008e0:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
  4008e2:	6922      	ldr	r2, [r4, #16]
  4008e4:	4629      	mov	r1, r5
  4008e6:	4630      	mov	r0, r6
  4008e8:	4b16      	ldr	r3, [pc, #88]	; (400944 <timer_add_task+0x98>)
  4008ea:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
  4008ec:	7e23      	ldrb	r3, [r4, #24]
  4008ee:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  4008f2:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
  4008f4:	7e23      	ldrb	r3, [r4, #24]
  4008f6:	f013 0f02 	tst.w	r3, #2
  4008fa:	d10e      	bne.n	40091a <timer_add_task+0x6e>
	return ERR_NONE;
  4008fc:	2000      	movs	r0, #0
}
  4008fe:	b002      	add	sp, #8
  400900:	bd70      	pop	{r4, r5, r6, pc}
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
  400902:	7e23      	ldrb	r3, [r4, #24]
  400904:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  400908:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
  40090a:	227f      	movs	r2, #127	; 0x7f
  40090c:	490a      	ldr	r1, [pc, #40]	; (400938 <timer_add_task+0x8c>)
  40090e:	2000      	movs	r0, #0
  400910:	4b0a      	ldr	r3, [pc, #40]	; (40093c <timer_add_task+0x90>)
  400912:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
  400914:	f06f 0011 	mvn.w	r0, #17
  400918:	e7f1      	b.n	4008fe <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
  40091a:	a801      	add	r0, sp, #4
  40091c:	4b0a      	ldr	r3, [pc, #40]	; (400948 <timer_add_task+0x9c>)
  40091e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
  400920:	7e23      	ldrb	r3, [r4, #24]
  400922:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
  400926:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
  400928:	4620      	mov	r0, r4
  40092a:	4b08      	ldr	r3, [pc, #32]	; (40094c <timer_add_task+0xa0>)
  40092c:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
  40092e:	a801      	add	r0, sp, #4
  400930:	4b07      	ldr	r3, [pc, #28]	; (400950 <timer_add_task+0xa4>)
  400932:	4798      	blx	r3
	return ERR_NONE;
  400934:	2000      	movs	r0, #0
  400936:	e7e2      	b.n	4008fe <timer_add_task+0x52>
  400938:	004018dc 	.word	0x004018dc
  40093c:	00400bdd 	.word	0x00400bdd
  400940:	00400be3 	.word	0x00400be3
  400944:	0040077d 	.word	0x0040077d
  400948:	00400559 	.word	0x00400559
  40094c:	00401181 	.word	0x00401181
  400950:	00400567 	.word	0x00400567

00400954 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
  400954:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
  400956:	2300      	movs	r3, #0
  400958:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
  40095a:	69c3      	ldr	r3, [r0, #28]
  40095c:	b11b      	cbz	r3, 400966 <usart_transmission_complete+0x12>
  40095e:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
  400962:	4610      	mov	r0, r2
  400964:	4798      	blx	r3
  400966:	bd08      	pop	{r3, pc}

00400968 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
  400968:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
  40096a:	2300      	movs	r3, #0
  40096c:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
  40096e:	6a43      	ldr	r3, [r0, #36]	; 0x24
  400970:	b11b      	cbz	r3, 40097a <usart_error+0x12>
  400972:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
  400976:	4610      	mov	r0, r2
  400978:	4798      	blx	r3
  40097a:	bd08      	pop	{r3, pc}

0040097c <usart_fill_rx_buffer>:
{
  40097c:	b538      	push	{r3, r4, r5, lr}
  40097e:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
  400980:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
  400984:	302c      	adds	r0, #44	; 0x2c
  400986:	4b03      	ldr	r3, [pc, #12]	; (400994 <usart_fill_rx_buffer+0x18>)
  400988:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
  40098a:	6a23      	ldr	r3, [r4, #32]
  40098c:	b10b      	cbz	r3, 400992 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
  40098e:	4628      	mov	r0, r5
  400990:	4798      	blx	r3
  400992:	bd38      	pop	{r3, r4, r5, pc}
  400994:	00400cc5 	.word	0x00400cc5

00400998 <usart_async_write>:
{
  400998:	b570      	push	{r4, r5, r6, lr}
  40099a:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
  40099c:	4604      	mov	r4, r0
  40099e:	460e      	mov	r6, r1
  4009a0:	2800      	cmp	r0, #0
  4009a2:	bf18      	it	ne
  4009a4:	2900      	cmpne	r1, #0
  4009a6:	d002      	beq.n	4009ae <usart_async_write+0x16>
  4009a8:	b9da      	cbnz	r2, 4009e2 <usart_async_write+0x4a>
  4009aa:	2000      	movs	r0, #0
  4009ac:	e000      	b.n	4009b0 <usart_async_write+0x18>
  4009ae:	2000      	movs	r0, #0
  4009b0:	f240 123b 	movw	r2, #315	; 0x13b
  4009b4:	490d      	ldr	r1, [pc, #52]	; (4009ec <usart_async_write+0x54>)
  4009b6:	4b0e      	ldr	r3, [pc, #56]	; (4009f0 <usart_async_write+0x58>)
  4009b8:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
  4009ba:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
  4009be:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
  4009c2:	429a      	cmp	r2, r3
  4009c4:	d10f      	bne.n	4009e6 <usart_async_write+0x4e>
	descr->tx_buffer        = (uint8_t *)buf;
  4009c6:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
  4009c8:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
  4009cc:	2300      	movs	r3, #0
  4009ce:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
  4009d2:	2301      	movs	r3, #1
  4009d4:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
  4009d6:	f104 0008 	add.w	r0, r4, #8
  4009da:	4b06      	ldr	r3, [pc, #24]	; (4009f4 <usart_async_write+0x5c>)
  4009dc:	4798      	blx	r3
	return (int32_t)length;
  4009de:	4628      	mov	r0, r5
  4009e0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
  4009e2:	2001      	movs	r0, #1
  4009e4:	e7e4      	b.n	4009b0 <usart_async_write+0x18>
		return ERR_NO_RESOURCE;
  4009e6:	f06f 001b 	mvn.w	r0, #27
}
  4009ea:	bd70      	pop	{r4, r5, r6, pc}
  4009ec:	004018f4 	.word	0x004018f4
  4009f0:	00400bdd 	.word	0x00400bdd
  4009f4:	004014b1 	.word	0x004014b1

004009f8 <usart_process_byte_sent>:
{
  4009f8:	b510      	push	{r4, lr}
  4009fa:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
  4009fc:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
  4009fe:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
  400a02:	4293      	cmp	r3, r2
  400a04:	d009      	beq.n	400a1a <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
  400a06:	6c02      	ldr	r2, [r0, #64]	; 0x40
  400a08:	1c59      	adds	r1, r3, #1
  400a0a:	8781      	strh	r1, [r0, #60]	; 0x3c
  400a0c:	5cd1      	ldrb	r1, [r2, r3]
  400a0e:	4b04      	ldr	r3, [pc, #16]	; (400a20 <usart_process_byte_sent+0x28>)
  400a10:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
  400a12:	4620      	mov	r0, r4
  400a14:	4b03      	ldr	r3, [pc, #12]	; (400a24 <usart_process_byte_sent+0x2c>)
  400a16:	4798      	blx	r3
  400a18:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
  400a1a:	4b03      	ldr	r3, [pc, #12]	; (400a28 <usart_process_byte_sent+0x30>)
  400a1c:	4798      	blx	r3
  400a1e:	bd10      	pop	{r4, pc}
  400a20:	0040148d 	.word	0x0040148d
  400a24:	004014b1 	.word	0x004014b1
  400a28:	004014d5 	.word	0x004014d5

00400a2c <usart_async_read>:
{
  400a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400a30:	b082      	sub	sp, #8
  400a32:	4617      	mov	r7, r2
	ASSERT(descr && buf && length);
  400a34:	4605      	mov	r5, r0
  400a36:	4688      	mov	r8, r1
  400a38:	2800      	cmp	r0, #0
  400a3a:	bf18      	it	ne
  400a3c:	2900      	cmpne	r1, #0
  400a3e:	d002      	beq.n	400a46 <usart_async_read+0x1a>
  400a40:	b9a2      	cbnz	r2, 400a6c <usart_async_read+0x40>
  400a42:	2000      	movs	r0, #0
  400a44:	e000      	b.n	400a48 <usart_async_read+0x1c>
  400a46:	2000      	movs	r0, #0
  400a48:	f44f 72ac 	mov.w	r2, #344	; 0x158
  400a4c:	4910      	ldr	r1, [pc, #64]	; (400a90 <usart_async_read+0x64>)
  400a4e:	4b11      	ldr	r3, [pc, #68]	; (400a94 <usart_async_read+0x68>)
  400a50:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
  400a52:	a801      	add	r0, sp, #4
  400a54:	4b10      	ldr	r3, [pc, #64]	; (400a98 <usart_async_read+0x6c>)
  400a56:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
  400a58:	3534      	adds	r5, #52	; 0x34
  400a5a:	4628      	mov	r0, r5
  400a5c:	4b0f      	ldr	r3, [pc, #60]	; (400a9c <usart_async_read+0x70>)
  400a5e:	4798      	blx	r3
  400a60:	4606      	mov	r6, r0
	CRITICAL_SECTION_LEAVE()
  400a62:	a801      	add	r0, sp, #4
  400a64:	4b0e      	ldr	r3, [pc, #56]	; (400aa0 <usart_async_read+0x74>)
  400a66:	4798      	blx	r3
	uint16_t                       was_read = 0;
  400a68:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
  400a6a:	e007      	b.n	400a7c <usart_async_read+0x50>
	ASSERT(descr && buf && length);
  400a6c:	2001      	movs	r0, #1
  400a6e:	e7eb      	b.n	400a48 <usart_async_read+0x1c>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
  400a70:	3401      	adds	r4, #1
  400a72:	b2a4      	uxth	r4, r4
  400a74:	4441      	add	r1, r8
  400a76:	4628      	mov	r0, r5
  400a78:	4b0a      	ldr	r3, [pc, #40]	; (400aa4 <usart_async_read+0x78>)
  400a7a:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
  400a7c:	4621      	mov	r1, r4
  400a7e:	42a6      	cmp	r6, r4
  400a80:	d901      	bls.n	400a86 <usart_async_read+0x5a>
  400a82:	42bc      	cmp	r4, r7
  400a84:	d3f4      	bcc.n	400a70 <usart_async_read+0x44>
}
  400a86:	4620      	mov	r0, r4
  400a88:	b002      	add	sp, #8
  400a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400a8e:	bf00      	nop
  400a90:	004018f4 	.word	0x004018f4
  400a94:	00400bdd 	.word	0x00400bdd
  400a98:	00400559 	.word	0x00400559
  400a9c:	00400d05 	.word	0x00400d05
  400aa0:	00400567 	.word	0x00400567
  400aa4:	00400c81 	.word	0x00400c81

00400aa8 <usart_async_init>:
{
  400aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400aaa:	4615      	mov	r5, r2
  400aac:	461e      	mov	r6, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
  400aae:	4604      	mov	r4, r0
  400ab0:	460f      	mov	r7, r1
  400ab2:	2800      	cmp	r0, #0
  400ab4:	bf18      	it	ne
  400ab6:	2900      	cmpne	r1, #0
  400ab8:	d008      	beq.n	400acc <usart_async_init+0x24>
  400aba:	1c13      	adds	r3, r2, #0
  400abc:	bf18      	it	ne
  400abe:	2301      	movne	r3, #1
  400ac0:	b116      	cbz	r6, 400ac8 <usart_async_init+0x20>
  400ac2:	b10b      	cbz	r3, 400ac8 <usart_async_init+0x20>
  400ac4:	2001      	movs	r0, #1
  400ac6:	e002      	b.n	400ace <usart_async_init+0x26>
  400ac8:	2000      	movs	r0, #0
  400aca:	e000      	b.n	400ace <usart_async_init+0x26>
  400acc:	2000      	movs	r0, #0
  400ace:	223a      	movs	r2, #58	; 0x3a
  400ad0:	4910      	ldr	r1, [pc, #64]	; (400b14 <usart_async_init+0x6c>)
  400ad2:	4b11      	ldr	r3, [pc, #68]	; (400b18 <usart_async_init+0x70>)
  400ad4:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
  400ad6:	4632      	mov	r2, r6
  400ad8:	4629      	mov	r1, r5
  400ada:	f104 0034 	add.w	r0, r4, #52	; 0x34
  400ade:	4b0f      	ldr	r3, [pc, #60]	; (400b1c <usart_async_init+0x74>)
  400ae0:	4798      	blx	r3
  400ae2:	b9a0      	cbnz	r0, 400b0e <usart_async_init+0x66>
	init_status = _usart_async_init(&descr->device, hw);
  400ae4:	4639      	mov	r1, r7
  400ae6:	f104 0008 	add.w	r0, r4, #8
  400aea:	4b0d      	ldr	r3, [pc, #52]	; (400b20 <usart_async_init+0x78>)
  400aec:	4798      	blx	r3
	if (init_status) {
  400aee:	4603      	mov	r3, r0
  400af0:	b958      	cbnz	r0, 400b0a <usart_async_init+0x62>
	descr->io.read  = usart_async_read;
  400af2:	4a0c      	ldr	r2, [pc, #48]	; (400b24 <usart_async_init+0x7c>)
  400af4:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
  400af6:	4a0c      	ldr	r2, [pc, #48]	; (400b28 <usart_async_init+0x80>)
  400af8:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
  400afa:	4a0c      	ldr	r2, [pc, #48]	; (400b2c <usart_async_init+0x84>)
  400afc:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
  400afe:	4a0c      	ldr	r2, [pc, #48]	; (400b30 <usart_async_init+0x88>)
  400b00:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
  400b02:	4a0c      	ldr	r2, [pc, #48]	; (400b34 <usart_async_init+0x8c>)
  400b04:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
  400b06:	4a0c      	ldr	r2, [pc, #48]	; (400b38 <usart_async_init+0x90>)
  400b08:	6162      	str	r2, [r4, #20]
}
  400b0a:	4618      	mov	r0, r3
  400b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ERR_INVALID_ARG;
  400b0e:	f06f 030c 	mvn.w	r3, #12
  400b12:	e7fa      	b.n	400b0a <usart_async_init+0x62>
  400b14:	004018f4 	.word	0x004018f4
  400b18:	00400bdd 	.word	0x00400bdd
  400b1c:	00400c3d 	.word	0x00400c3d
  400b20:	004013ad 	.word	0x004013ad
  400b24:	00400a2d 	.word	0x00400a2d
  400b28:	00400999 	.word	0x00400999
  400b2c:	004009f9 	.word	0x004009f9
  400b30:	0040097d 	.word	0x0040097d
  400b34:	00400955 	.word	0x00400955
  400b38:	00400969 	.word	0x00400969

00400b3c <usart_async_enable>:
{
  400b3c:	b510      	push	{r4, lr}
	ASSERT(descr);
  400b3e:	4604      	mov	r4, r0
  400b40:	2261      	movs	r2, #97	; 0x61
  400b42:	4906      	ldr	r1, [pc, #24]	; (400b5c <usart_async_enable+0x20>)
  400b44:	3000      	adds	r0, #0
  400b46:	bf18      	it	ne
  400b48:	2001      	movne	r0, #1
  400b4a:	4b05      	ldr	r3, [pc, #20]	; (400b60 <usart_async_enable+0x24>)
  400b4c:	4798      	blx	r3
	_usart_async_enable(&descr->device);
  400b4e:	f104 0008 	add.w	r0, r4, #8
  400b52:	4b04      	ldr	r3, [pc, #16]	; (400b64 <usart_async_enable+0x28>)
  400b54:	4798      	blx	r3
}
  400b56:	2000      	movs	r0, #0
  400b58:	bd10      	pop	{r4, pc}
  400b5a:	bf00      	nop
  400b5c:	004018f4 	.word	0x004018f4
  400b60:	00400bdd 	.word	0x00400bdd
  400b64:	00401459 	.word	0x00401459

00400b68 <usart_async_register_callback>:
{
  400b68:	b570      	push	{r4, r5, r6, lr}
  400b6a:	460c      	mov	r4, r1
  400b6c:	4616      	mov	r6, r2
	ASSERT(descr);
  400b6e:	4605      	mov	r5, r0
  400b70:	2283      	movs	r2, #131	; 0x83
  400b72:	4917      	ldr	r1, [pc, #92]	; (400bd0 <usart_async_register_callback+0x68>)
  400b74:	3000      	adds	r0, #0
  400b76:	bf18      	it	ne
  400b78:	2001      	movne	r0, #1
  400b7a:	4b16      	ldr	r3, [pc, #88]	; (400bd4 <usart_async_register_callback+0x6c>)
  400b7c:	4798      	blx	r3
	switch (type) {
  400b7e:	2c01      	cmp	r4, #1
  400b80:	d010      	beq.n	400ba4 <usart_async_register_callback+0x3c>
  400b82:	b124      	cbz	r4, 400b8e <usart_async_register_callback+0x26>
  400b84:	2c02      	cmp	r4, #2
  400b86:	d018      	beq.n	400bba <usart_async_register_callback+0x52>
		return ERR_INVALID_ARG;
  400b88:	f06f 000c 	mvn.w	r0, #12
}
  400b8c:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.rx_done = cb;
  400b8e:	62ae      	str	r6, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
  400b90:	1c32      	adds	r2, r6, #0
  400b92:	bf18      	it	ne
  400b94:	2201      	movne	r2, #1
  400b96:	2101      	movs	r1, #1
  400b98:	f105 0008 	add.w	r0, r5, #8
  400b9c:	4b0e      	ldr	r3, [pc, #56]	; (400bd8 <usart_async_register_callback+0x70>)
  400b9e:	4798      	blx	r3
	return ERR_NONE;
  400ba0:	2000      	movs	r0, #0
		break;
  400ba2:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
  400ba4:	626e      	str	r6, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
  400ba6:	1c32      	adds	r2, r6, #0
  400ba8:	bf18      	it	ne
  400baa:	2201      	movne	r2, #1
  400bac:	2102      	movs	r1, #2
  400bae:	f105 0008 	add.w	r0, r5, #8
  400bb2:	4b09      	ldr	r3, [pc, #36]	; (400bd8 <usart_async_register_callback+0x70>)
  400bb4:	4798      	blx	r3
	return ERR_NONE;
  400bb6:	2000      	movs	r0, #0
		break;
  400bb8:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.error = cb;
  400bba:	62ee      	str	r6, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
  400bbc:	1c32      	adds	r2, r6, #0
  400bbe:	bf18      	it	ne
  400bc0:	2201      	movne	r2, #1
  400bc2:	2103      	movs	r1, #3
  400bc4:	f105 0008 	add.w	r0, r5, #8
  400bc8:	4b03      	ldr	r3, [pc, #12]	; (400bd8 <usart_async_register_callback+0x70>)
  400bca:	4798      	blx	r3
	return ERR_NONE;
  400bcc:	2000      	movs	r0, #0
		break;
  400bce:	bd70      	pop	{r4, r5, r6, pc}
  400bd0:	004018f4 	.word	0x004018f4
  400bd4:	00400bdd 	.word	0x00400bdd
  400bd8:	004014fd 	.word	0x004014fd

00400bdc <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
  400bdc:	b900      	cbnz	r0, 400be0 <assert+0x4>
		__asm("BKPT #0");
  400bde:	be00      	bkpt	0x0000
  400be0:	4770      	bx	lr

00400be2 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
  400be2:	6803      	ldr	r3, [r0, #0]
  400be4:	b11b      	cbz	r3, 400bee <is_list_element+0xc>
		if (it == element) {
  400be6:	428b      	cmp	r3, r1
  400be8:	d003      	beq.n	400bf2 <is_list_element+0x10>
	for (it = list->head; it; it = it->next) {
  400bea:	681b      	ldr	r3, [r3, #0]
  400bec:	e7fa      	b.n	400be4 <is_list_element+0x2>
			return true;
		}
	}

	return false;
  400bee:	2000      	movs	r0, #0
  400bf0:	4770      	bx	lr
			return true;
  400bf2:	2001      	movs	r0, #1
}
  400bf4:	4770      	bx	lr
	...

00400bf8 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
  400bf8:	b538      	push	{r3, r4, r5, lr}
  400bfa:	4604      	mov	r4, r0
  400bfc:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
  400bfe:	4b06      	ldr	r3, [pc, #24]	; (400c18 <list_insert_as_head+0x20>)
  400c00:	4798      	blx	r3
  400c02:	f080 0001 	eor.w	r0, r0, #1
  400c06:	2239      	movs	r2, #57	; 0x39
  400c08:	4904      	ldr	r1, [pc, #16]	; (400c1c <list_insert_as_head+0x24>)
  400c0a:	b2c0      	uxtb	r0, r0
  400c0c:	4b04      	ldr	r3, [pc, #16]	; (400c20 <list_insert_as_head+0x28>)
  400c0e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
  400c10:	6823      	ldr	r3, [r4, #0]
  400c12:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
  400c14:	6025      	str	r5, [r4, #0]
  400c16:	bd38      	pop	{r3, r4, r5, pc}
  400c18:	00400be3 	.word	0x00400be3
  400c1c:	00401914 	.word	0x00401914
  400c20:	00400bdd 	.word	0x00400bdd

00400c24 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
  400c24:	6803      	ldr	r3, [r0, #0]
  400c26:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
  400c28:	6001      	str	r1, [r0, #0]
  400c2a:	4770      	bx	lr

00400c2c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
  400c2c:	6803      	ldr	r3, [r0, #0]
  400c2e:	b11b      	cbz	r3, 400c38 <list_remove_head+0xc>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
  400c30:	681a      	ldr	r2, [r3, #0]
  400c32:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
  400c34:	4618      	mov	r0, r3
  400c36:	4770      	bx	lr
	}

	return NULL;
  400c38:	2000      	movs	r0, #0
}
  400c3a:	4770      	bx	lr

00400c3c <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
  400c3c:	b570      	push	{r4, r5, r6, lr}
  400c3e:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
  400c40:	4604      	mov	r4, r0
  400c42:	460e      	mov	r6, r1
  400c44:	2800      	cmp	r0, #0
  400c46:	bf18      	it	ne
  400c48:	2900      	cmpne	r1, #0
  400c4a:	d002      	beq.n	400c52 <ringbuffer_init+0x16>
  400c4c:	b97a      	cbnz	r2, 400c6e <ringbuffer_init+0x32>
  400c4e:	2000      	movs	r0, #0
  400c50:	e000      	b.n	400c54 <ringbuffer_init+0x18>
  400c52:	2000      	movs	r0, #0
  400c54:	2228      	movs	r2, #40	; 0x28
  400c56:	4908      	ldr	r1, [pc, #32]	; (400c78 <ringbuffer_init+0x3c>)
  400c58:	4b08      	ldr	r3, [pc, #32]	; (400c7c <ringbuffer_init+0x40>)
  400c5a:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
  400c5c:	1e6b      	subs	r3, r5, #1
  400c5e:	421d      	tst	r5, r3
  400c60:	d107      	bne.n	400c72 <ringbuffer_init+0x36>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
  400c62:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
  400c64:	2000      	movs	r0, #0
  400c66:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
  400c68:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
  400c6a:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
  400c6c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
  400c6e:	2001      	movs	r0, #1
  400c70:	e7f0      	b.n	400c54 <ringbuffer_init+0x18>
		return ERR_INVALID_ARG;
  400c72:	f06f 000c 	mvn.w	r0, #12
}
  400c76:	bd70      	pop	{r4, r5, r6, pc}
  400c78:	00401934 	.word	0x00401934
  400c7c:	00400bdd 	.word	0x00400bdd

00400c80 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
  400c80:	b538      	push	{r3, r4, r5, lr}
	ASSERT(rb && data);
  400c82:	4604      	mov	r4, r0
  400c84:	460d      	mov	r5, r1
  400c86:	2800      	cmp	r0, #0
  400c88:	bf18      	it	ne
  400c8a:	2900      	cmpne	r1, #0
  400c8c:	bf14      	ite	ne
  400c8e:	2001      	movne	r0, #1
  400c90:	2000      	moveq	r0, #0
  400c92:	2240      	movs	r2, #64	; 0x40
  400c94:	4909      	ldr	r1, [pc, #36]	; (400cbc <ringbuffer_get+0x3c>)
  400c96:	4b0a      	ldr	r3, [pc, #40]	; (400cc0 <ringbuffer_get+0x40>)
  400c98:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
  400c9a:	68e2      	ldr	r2, [r4, #12]
  400c9c:	68a3      	ldr	r3, [r4, #8]
  400c9e:	429a      	cmp	r2, r3
  400ca0:	d009      	beq.n	400cb6 <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
  400ca2:	6822      	ldr	r2, [r4, #0]
  400ca4:	6861      	ldr	r1, [r4, #4]
  400ca6:	400b      	ands	r3, r1
  400ca8:	5cd3      	ldrb	r3, [r2, r3]
  400caa:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
  400cac:	68a3      	ldr	r3, [r4, #8]
  400cae:	3301      	adds	r3, #1
  400cb0:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
  400cb2:	2000      	movs	r0, #0
  400cb4:	bd38      	pop	{r3, r4, r5, pc}
	}

	return ERR_NOT_FOUND;
  400cb6:	f06f 0009 	mvn.w	r0, #9
}
  400cba:	bd38      	pop	{r3, r4, r5, pc}
  400cbc:	00401934 	.word	0x00401934
  400cc0:	00400bdd 	.word	0x00400bdd

00400cc4 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
  400cc4:	b538      	push	{r3, r4, r5, lr}
  400cc6:	460d      	mov	r5, r1
	ASSERT(rb);
  400cc8:	4604      	mov	r4, r0
  400cca:	2251      	movs	r2, #81	; 0x51
  400ccc:	490b      	ldr	r1, [pc, #44]	; (400cfc <ringbuffer_put+0x38>)
  400cce:	3000      	adds	r0, #0
  400cd0:	bf18      	it	ne
  400cd2:	2001      	movne	r0, #1
  400cd4:	4b0a      	ldr	r3, [pc, #40]	; (400d00 <ringbuffer_put+0x3c>)
  400cd6:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
  400cd8:	6822      	ldr	r2, [r4, #0]
  400cda:	68e3      	ldr	r3, [r4, #12]
  400cdc:	6861      	ldr	r1, [r4, #4]
  400cde:	400b      	ands	r3, r1
  400ce0:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
  400ce2:	68e3      	ldr	r3, [r4, #12]
  400ce4:	68a2      	ldr	r2, [r4, #8]
  400ce6:	1a9a      	subs	r2, r3, r2
  400ce8:	6861      	ldr	r1, [r4, #4]
  400cea:	428a      	cmp	r2, r1
  400cec:	d901      	bls.n	400cf2 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
  400cee:	1a59      	subs	r1, r3, r1
  400cf0:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
  400cf2:	3301      	adds	r3, #1
  400cf4:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
  400cf6:	2000      	movs	r0, #0
  400cf8:	bd38      	pop	{r3, r4, r5, pc}
  400cfa:	bf00      	nop
  400cfc:	00401934 	.word	0x00401934
  400d00:	00400bdd 	.word	0x00400bdd

00400d04 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
  400d04:	b510      	push	{r4, lr}
	ASSERT(rb);
  400d06:	4604      	mov	r4, r0
  400d08:	2267      	movs	r2, #103	; 0x67
  400d0a:	4905      	ldr	r1, [pc, #20]	; (400d20 <ringbuffer_num+0x1c>)
  400d0c:	3000      	adds	r0, #0
  400d0e:	bf18      	it	ne
  400d10:	2001      	movne	r0, #1
  400d12:	4b04      	ldr	r3, [pc, #16]	; (400d24 <ringbuffer_num+0x20>)
  400d14:	4798      	blx	r3

	return rb->write_index - rb->read_index;
  400d16:	68e0      	ldr	r0, [r4, #12]
  400d18:	68a3      	ldr	r3, [r4, #8]
}
  400d1a:	1ac0      	subs	r0, r0, r3
  400d1c:	bd10      	pop	{r4, pc}
  400d1e:	bf00      	nop
  400d20:	00401934 	.word	0x00401934
  400d24:	00400bdd 	.word	0x00400bdd

00400d28 <_irq_set>:
/**
 * \brief Set the given IRQ
 */
void _irq_set(uint8_t n)
{
	NVIC_SetPendingIRQ((IRQn_Type)n);
  400d28:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  400d2a:	2b00      	cmp	r3, #0
  400d2c:	db09      	blt.n	400d42 <_irq_set+0x1a>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400d2e:	095b      	lsrs	r3, r3, #5
  400d30:	f000 001f 	and.w	r0, r0, #31
  400d34:	2201      	movs	r2, #1
  400d36:	fa02 f000 	lsl.w	r0, r2, r0
  400d3a:	3340      	adds	r3, #64	; 0x40
  400d3c:	4a01      	ldr	r2, [pc, #4]	; (400d44 <_irq_set+0x1c>)
  400d3e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  400d42:	4770      	bx	lr
  400d44:	e000e100 	.word	0xe000e100

00400d48 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
  400d48:	b500      	push	{lr}
  400d4a:	b083      	sub	sp, #12
/**
 * \brief Enable FPU
 */
static inline void _fpu_enable(void)
{
	CRITICAL_SECTION_ENTER()
  400d4c:	a801      	add	r0, sp, #4
  400d4e:	4b0e      	ldr	r3, [pc, #56]	; (400d88 <_init_chip+0x40>)
  400d50:	4798      	blx	r3
	/** Set bits 20-23 to enable CP10 and CP11 coprocessors */
	SCB->CPACR |= (0xFu << 20);
  400d52:	4a0e      	ldr	r2, [pc, #56]	; (400d8c <_init_chip+0x44>)
  400d54:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  400d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
  400d60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400d64:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	CRITICAL_SECTION_LEAVE()
  400d68:	a801      	add	r0, sp, #4
  400d6a:	4b09      	ldr	r3, [pc, #36]	; (400d90 <_init_chip+0x48>)
  400d6c:	4798      	blx	r3

static inline void hri_efc_write_EEFC_FMR_FWS_bf(const void *const hw, hri_efc_eefc_fmr_reg_t data)
{
	uint32_t tmp;
	EFC_CRITICAL_SECTION_ENTER();
	tmp = ((Efc *)hw)->EEFC_FMR;
  400d6e:	4a09      	ldr	r2, [pc, #36]	; (400d94 <_init_chip+0x4c>)
  400d70:	6813      	ldr	r3, [r2, #0]
	tmp &= ~EEFC_FMR_FWS_Msk;
  400d72:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
	tmp |= EEFC_FMR_FWS(data);
  400d76:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
	((Efc *)hw)->EEFC_FMR = tmp;
  400d7a:	6013      	str	r3, [r2, #0]
#if CONF_DMA_ENABLE
	_pmc_enable_periph_clock(ID_XDMAC);
	_dma_init();

#endif
	_pmc_init();
  400d7c:	4b06      	ldr	r3, [pc, #24]	; (400d98 <_init_chip+0x50>)
  400d7e:	4798      	blx	r3
}
  400d80:	b003      	add	sp, #12
  400d82:	f85d fb04 	ldr.w	pc, [sp], #4
  400d86:	bf00      	nop
  400d88:	00400559 	.word	0x00400559
  400d8c:	e000ed00 	.word	0xe000ed00
  400d90:	00400567 	.word	0x00400567
  400d94:	400e0c00 	.word	0x400e0c00
  400d98:	00400e39 	.word	0x00400e39

00400d9c <_pmc_init_sources>:
	PMC_CRITICAL_SECTION_LEAVE();
}

static inline hri_pmc_ckgr_mor_reg_t hri_pmc_read_CKGR_MOR_reg(const void *const hw)
{
	return ((Pmc *)hw)->CKGR_MOR;
  400d9c:	490e      	ldr	r1, [pc, #56]	; (400dd8 <_pmc_init_sources+0x3c>)
  400d9e:	6a0a      	ldr	r2, [r1, #32]
	/* Enable Main XTAL oscillator */
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTEN;
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY | CKGR_MOR_MOSCSEL;
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
#else
	data = hri_pmc_read_CKGR_MOR_reg(PMC) & ~CKGR_MOR_MOSCXTBY;
  400da0:	f022 0202 	bic.w	r2, r2, #2
	data |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(CONF_XOSC20M_STARTUP_TIME);
  400da4:	4b0d      	ldr	r3, [pc, #52]	; (400ddc <_pmc_init_sources+0x40>)
  400da6:	4313      	orrs	r3, r2
	((Pmc *)hw)->CKGR_MOR = data;
  400da8:	620b      	str	r3, [r1, #32]
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MOSCXTS) > 0;
  400daa:	4b0b      	ldr	r3, [pc, #44]	; (400dd8 <_pmc_init_sources+0x3c>)
  400dac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	hri_pmc_write_CKGR_MOR_reg(PMC, data);
	while (!hri_pmc_get_SR_MOSCXTS_bit(PMC)) {
  400dae:	f013 0f01 	tst.w	r3, #1
  400db2:	d0fa      	beq.n	400daa <_pmc_init_sources+0xe>
	((Pmc *)hw)->CKGR_MOR |= mask;
  400db4:	4b08      	ldr	r3, [pc, #32]	; (400dd8 <_pmc_init_sources+0x3c>)
  400db6:	6a19      	ldr	r1, [r3, #32]
  400db8:	4a09      	ldr	r2, [pc, #36]	; (400de0 <_pmc_init_sources+0x44>)
  400dba:	430a      	orrs	r2, r1
  400dbc:	621a      	str	r2, [r3, #32]

static inline void hri_pmc_write_CKGR_PLLAR_MULA_bf(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->CKGR_PLLAR;
  400dbe:	6a99      	ldr	r1, [r3, #40]	; 0x28
	tmp &= ~CKGR_PLLAR_MULA_Msk;
  400dc0:	4a08      	ldr	r2, [pc, #32]	; (400de4 <_pmc_init_sources+0x48>)
  400dc2:	400a      	ands	r2, r1
	tmp |= CKGR_PLLAR_MULA(data);
	((Pmc *)hw)->CKGR_PLLAR = tmp;
  400dc4:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline void hri_pmc_write_CKGR_PLLAR_reg(const void *const hw, hri_pmc_ckgr_pllar_reg_t data)
{
	PMC_CRITICAL_SECTION_ENTER();
	((Pmc *)hw)->CKGR_PLLAR = data;
  400dc6:	4a08      	ldr	r2, [pc, #32]	; (400de8 <_pmc_init_sources+0x4c>)
  400dc8:	629a      	str	r2, [r3, #40]	; 0x28
	return (((Pmc *)hw)->PMC_SR & PMC_SR_LOCKA) > 0;
  400dca:	4b03      	ldr	r3, [pc, #12]	; (400dd8 <_pmc_init_sources+0x3c>)
  400dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
#if (CONF_PLLACK_ENABLE == 1)
	data = CKGR_PLLAR_MULA(CONF_PLLACK_MUL - 1) | CKGR_PLLAR_DIVA(CONF_PLLACK_DIV) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	/* Stop PLL first */
	hri_pmc_write_CKGR_PLLAR_MULA_bf(PMC, 0);
	hri_pmc_write_CKGR_PLLAR_reg(PMC, (CKGR_PLLAR_ONE | data));
	while (!hri_pmc_get_SR_LOCKA_bit(PMC)) {
  400dce:	f013 0f02 	tst.w	r3, #2
  400dd2:	d0fa      	beq.n	400dca <_pmc_init_sources+0x2e>
#if (CONF_CLK_CFDEN_ENABLE == 1)
	/* Enable main clock failure detection */
	hri_pmc_set_CKGR_MOR_CFDEN_bit(PMC);
#endif
#endif
}
  400dd4:	4770      	bx	lr
  400dd6:	bf00      	nop
  400dd8:	400e0600 	.word	0x400e0600
  400ddc:	00373e01 	.word	0x00373e01
  400de0:	01370000 	.word	0x01370000
  400de4:	f800ffff 	.word	0xf800ffff
  400de8:	20183f01 	.word	0x20183f01

00400dec <_pmc_init_master_clock>:

static inline void hri_pmc_write_MCKR_PRES_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400dec:	4a11      	ldr	r2, [pc, #68]	; (400e34 <_pmc_init_master_clock+0x48>)
  400dee:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_PRES_Msk;
  400df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	tmp |= PMC_MCKR_PRES(data);
	((Pmc *)hw)->PMC_MCKR = tmp;
  400df4:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400df6:	4b0f      	ldr	r3, [pc, #60]	; (400e34 <_pmc_init_master_clock+0x48>)
  400df8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
		/* Wait until master clock is ready */
	}
#elif ((CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_PLLACK) || (CONF_CLK_GEN_MCKR_SRC == CLK_SRC_OPTION_UPLLCKDIV))
	hri_pmc_write_MCKR_PRES_bf(PMC, CONF_MCKR_PRESC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400dfa:	f013 0f08 	tst.w	r3, #8
  400dfe:	d0fa      	beq.n	400df6 <_pmc_init_master_clock+0xa>

static inline void hri_pmc_write_MCKR_MDIV_bf(const void *const hw, hri_pmc_mckr_reg_t data)
{
	uint32_t tmp;
	PMC_CRITICAL_SECTION_ENTER();
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400e00:	4a0c      	ldr	r2, [pc, #48]	; (400e34 <_pmc_init_master_clock+0x48>)
  400e02:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_MDIV_Msk;
  400e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
	tmp |= PMC_MCKR_MDIV(data);
  400e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	((Pmc *)hw)->PMC_MCKR = tmp;
  400e0c:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400e0e:	4b09      	ldr	r3, [pc, #36]	; (400e34 <_pmc_init_master_clock+0x48>)
  400e10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_MDIV_bf(PMC, CONF_MCK_DIV);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400e12:	f013 0f08 	tst.w	r3, #8
  400e16:	d0fa      	beq.n	400e0e <_pmc_init_master_clock+0x22>
	tmp = ((Pmc *)hw)->PMC_MCKR;
  400e18:	4a06      	ldr	r2, [pc, #24]	; (400e34 <_pmc_init_master_clock+0x48>)
  400e1a:	6b13      	ldr	r3, [r2, #48]	; 0x30
	tmp &= ~PMC_MCKR_CSS_Msk;
  400e1c:	f023 0303 	bic.w	r3, r3, #3
	tmp |= PMC_MCKR_CSS(data);
  400e20:	f043 0302 	orr.w	r3, r3, #2
	((Pmc *)hw)->PMC_MCKR = tmp;
  400e24:	6313      	str	r3, [r2, #48]	; 0x30
	return (((Pmc *)hw)->PMC_SR & PMC_SR_MCKRDY) > 0;
  400e26:	4b03      	ldr	r3, [pc, #12]	; (400e34 <_pmc_init_master_clock+0x48>)
  400e28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
		/* Wait until master clock is ready */
	}
	hri_pmc_write_MCKR_CSS_bf(PMC, CONF_CLK_GEN_MCKR_SRC);
	while (!hri_pmc_get_SR_MCKRDY_bit(PMC)) {
  400e2a:	f013 0f08 	tst.w	r3, #8
  400e2e:	d0fa      	beq.n	400e26 <_pmc_init_master_clock+0x3a>
		/* Wait until master clock is ready */
	}
#endif
#endif
}
  400e30:	4770      	bx	lr
  400e32:	bf00      	nop
  400e34:	400e0600 	.word	0x400e0600

00400e38 <_pmc_init>:
/**
 * \brief Initializes cortex M7 core clock
 *
 */
void _pmc_init(void)
{
  400e38:	b508      	push	{r3, lr}
	_pmc_init_sources();
  400e3a:	4b02      	ldr	r3, [pc, #8]	; (400e44 <_pmc_init+0xc>)
  400e3c:	4798      	blx	r3
	_pmc_init_master_clock();
  400e3e:	4b02      	ldr	r3, [pc, #8]	; (400e48 <_pmc_init+0x10>)
  400e40:	4798      	blx	r3
  400e42:	bd08      	pop	{r3, pc}
  400e44:	00400d9d 	.word	0x00400d9d
  400e48:	00400ded 	.word	0x00400ded

00400e4c <_spi_sync_enable>:
}

static inline void hri_spi_write_CR_reg(const void *const hw, hri_spi_cr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_CR = data;
  400e4c:	2301      	movs	r3, #1
  400e4e:	6003      	str	r3, [r0, #0]
static int32_t _spi_sync_enable(void *const hw)
{
	hri_spi_write_CR_reg(hw, SPI_CR_SPIEN);

	return ERR_NONE;
}
  400e50:	2000      	movs	r0, #0
  400e52:	4770      	bx	lr

00400e54 <_spi_get_hardware_index>:
 * \brief Retrieve ordinal number of the given SPI hardware instance
 */
static uint8_t _spi_get_hardware_index(const void *const hw)
{

	uint8_t index = ((uint32_t)hw - (uint32_t)SPI0) >> 16;
  400e54:	4b04      	ldr	r3, [pc, #16]	; (400e68 <_spi_get_hardware_index+0x14>)
  400e56:	4403      	add	r3, r0
  400e58:	f3c3 4307 	ubfx	r3, r3, #16, #8

	if (index == 5) {
  400e5c:	2b05      	cmp	r3, #5
  400e5e:	d001      	beq.n	400e64 <_spi_get_hardware_index+0x10>
		return 1;
	} else {
		return 0;
  400e60:	2000      	movs	r0, #0
	}
}
  400e62:	4770      	bx	lr
		return 1;
  400e64:	2001      	movs	r0, #1
  400e66:	4770      	bx	lr
  400e68:	bfff8000 	.word	0xbfff8000

00400e6c <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
  400e6c:	b570      	push	{r4, r5, r6, lr}
  400e6e:	4606      	mov	r6, r0
  400e70:	460c      	mov	r4, r1
	uint8_t n = _spi_get_hardware_index((const void *)hw_addr);
  400e72:	4608      	mov	r0, r1
  400e74:	4b20      	ldr	r3, [pc, #128]	; (400ef8 <_spi_m_sync_init+0x8c>)
  400e76:	4798      	blx	r3
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  400e78:	2300      	movs	r3, #0
  400e7a:	b33b      	cbz	r3, 400ecc <_spi_m_sync_init+0x60>
	return NULL;
  400e7c:	2500      	movs	r5, #0
	const struct spi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
  400e7e:	f44f 729a 	mov.w	r2, #308	; 0x134
  400e82:	491e      	ldr	r1, [pc, #120]	; (400efc <_spi_m_sync_init+0x90>)
  400e84:	2e00      	cmp	r6, #0
  400e86:	bf18      	it	ne
  400e88:	2c00      	cmpne	r4, #0
  400e8a:	bf14      	ite	ne
  400e8c:	2001      	movne	r0, #1
  400e8e:	2000      	moveq	r0, #0
  400e90:	4b1b      	ldr	r3, [pc, #108]	; (400f00 <_spi_m_sync_init+0x94>)
  400e92:	4798      	blx	r3

	if (regs == NULL) {
  400e94:	b355      	cbz	r5, 400eec <_spi_m_sync_init+0x80>
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  400e96:	6923      	ldr	r3, [r4, #16]
		return ERR_INVALID_ARG;
	}

	if (hri_spi_get_SR_SPIENS_bit(hw)) {
  400e98:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400e9c:	d129      	bne.n	400ef2 <_spi_m_sync_init+0x86>
	((Spi *)hw)->SPI_CR = data;
  400e9e:	2380      	movs	r3, #128	; 0x80
  400ea0:	6023      	str	r3, [r4, #0]
		return ERR_DENIED;
	}
	hri_spi_write_CR_reg(hw, SPI_CR_SWRST);
	dev->prvt = hw;
  400ea2:	6034      	str	r4, [r6, #0]
	hri_spi_write_CR_reg(hw, (regs->cr & ~(SPI_CR_SPIEN | SPI_CR_SPIDIS | SPI_CR_SWRST | SPI_CR_LASTXFER)));
  400ea4:	686a      	ldr	r2, [r5, #4]
  400ea6:	4b17      	ldr	r3, [pc, #92]	; (400f04 <_spi_m_sync_init+0x98>)
  400ea8:	4013      	ands	r3, r2
  400eaa:	6023      	str	r3, [r4, #0]
	hri_spi_write_MR_reg(hw, ((regs->mr | SPI_MR_PCS(0x0E) | SPI_MR_MODFDIS) & ~SPI_MR_LLB));
  400eac:	68ab      	ldr	r3, [r5, #8]
  400eae:	4a16      	ldr	r2, [pc, #88]	; (400f08 <_spi_m_sync_init+0x9c>)
  400eb0:	401a      	ands	r2, r3
  400eb2:	4b16      	ldr	r3, [pc, #88]	; (400f0c <_spi_m_sync_init+0xa0>)
  400eb4:	4313      	orrs	r3, r2
	((Spi *)hw)->SPI_MR = data;
  400eb6:	6063      	str	r3, [r4, #4]
	hri_spi_write_CSR_reg(hw, 0, regs->csr);
  400eb8:	68eb      	ldr	r3, [r5, #12]
	((Spi *)hw)->SPI_CSR[index] = data;
  400eba:	6323      	str	r3, [r4, #48]	; 0x30

	dev->dummy_byte = regs->dummy_byte;
  400ebc:	8a2b      	ldrh	r3, [r5, #16]
  400ebe:	80f3      	strh	r3, [r6, #6]
	dev->char_size  = regs->csr & SPI_CSR_BITS_Msk;
  400ec0:	68eb      	ldr	r3, [r5, #12]
  400ec2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  400ec6:	7133      	strb	r3, [r6, #4]

	return ERR_NONE;
  400ec8:	2000      	movs	r0, #0
  400eca:	bd70      	pop	{r4, r5, r6, pc}
		if (spi_regs[i].number == n) {
  400ecc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  400ed0:	008a      	lsls	r2, r1, #2
  400ed2:	490f      	ldr	r1, [pc, #60]	; (400f10 <_spi_m_sync_init+0xa4>)
  400ed4:	5c8a      	ldrb	r2, [r1, r2]
  400ed6:	4290      	cmp	r0, r2
  400ed8:	d002      	beq.n	400ee0 <_spi_m_sync_init+0x74>
	for (i = 0; i < sizeof(spi_regs) / sizeof(struct spi_regs_cfg); i++) {
  400eda:	3301      	adds	r3, #1
  400edc:	b2db      	uxtb	r3, r3
  400ede:	e7cc      	b.n	400e7a <_spi_m_sync_init+0xe>
			return &spi_regs[i];
  400ee0:	eb03 0583 	add.w	r5, r3, r3, lsl #2
  400ee4:	00ab      	lsls	r3, r5, #2
  400ee6:	460d      	mov	r5, r1
  400ee8:	441d      	add	r5, r3
  400eea:	e7c8      	b.n	400e7e <_spi_m_sync_init+0x12>
		return ERR_INVALID_ARG;
  400eec:	f06f 000c 	mvn.w	r0, #12
  400ef0:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_DENIED;
  400ef2:	f06f 0010 	mvn.w	r0, #16
}
  400ef6:	bd70      	pop	{r4, r5, r6, pc}
  400ef8:	00400e55 	.word	0x00400e55
  400efc:	0040196c 	.word	0x0040196c
  400f00:	00400bdd 	.word	0x00400bdd
  400f04:	feffff7c 	.word	0xfeffff7c
  400f08:	fff1ff6f 	.word	0xfff1ff6f
  400f0c:	000e0010 	.word	0x000e0010
  400f10:	00401958 	.word	0x00401958

00400f14 <_spi_m_sync_enable>:

	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
  400f14:	b510      	push	{r4, lr}
	ASSERT(dev && dev->prvt);
  400f16:	4604      	mov	r4, r0
  400f18:	b168      	cbz	r0, 400f36 <_spi_m_sync_enable+0x22>
  400f1a:	6803      	ldr	r3, [r0, #0]
  400f1c:	b14b      	cbz	r3, 400f32 <_spi_m_sync_enable+0x1e>
  400f1e:	2001      	movs	r0, #1
  400f20:	f44f 72b9 	mov.w	r2, #370	; 0x172
  400f24:	4905      	ldr	r1, [pc, #20]	; (400f3c <_spi_m_sync_enable+0x28>)
  400f26:	4b06      	ldr	r3, [pc, #24]	; (400f40 <_spi_m_sync_enable+0x2c>)
  400f28:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
  400f2a:	6820      	ldr	r0, [r4, #0]
  400f2c:	4b05      	ldr	r3, [pc, #20]	; (400f44 <_spi_m_sync_enable+0x30>)
  400f2e:	4798      	blx	r3
}
  400f30:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
  400f32:	2000      	movs	r0, #0
  400f34:	e7f4      	b.n	400f20 <_spi_m_sync_enable+0xc>
  400f36:	2000      	movs	r0, #0
  400f38:	e7f2      	b.n	400f20 <_spi_m_sync_enable+0xc>
  400f3a:	bf00      	nop
  400f3c:	0040196c 	.word	0x0040196c
  400f40:	00400bdd 	.word	0x00400bdd
  400f44:	00400e4d 	.word	0x00400e4d

00400f48 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
  400f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400f4c:	b086      	sub	sp, #24
  400f4e:	4607      	mov	r7, r0
  400f50:	460d      	mov	r5, r1
	void *                 hw   = dev->prvt;
  400f52:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
  400f54:	680b      	ldr	r3, [r1, #0]
  400f56:	9301      	str	r3, [sp, #4]
  400f58:	684b      	ldr	r3, [r1, #4]
  400f5a:	9302      	str	r3, [sp, #8]
  400f5c:	2300      	movs	r3, #0
  400f5e:	9303      	str	r3, [sp, #12]
  400f60:	9304      	str	r3, [sp, #16]
  400f62:	7903      	ldrb	r3, [r0, #4]
  400f64:	f88d 3014 	strb.w	r3, [sp, #20]

	ASSERT(dev && hw);
  400f68:	1c26      	adds	r6, r4, #0
  400f6a:	bf18      	it	ne
  400f6c:	2601      	movne	r6, #1
  400f6e:	f240 2231 	movw	r2, #561	; 0x231
  400f72:	4933      	ldr	r1, [pc, #204]	; (401040 <_spi_m_sync_trans+0xf8>)
  400f74:	2800      	cmp	r0, #0
  400f76:	bf0c      	ite	eq
  400f78:	2000      	moveq	r0, #0
  400f7a:	f006 0001 	andne.w	r0, r6, #1
  400f7e:	4b31      	ldr	r3, [pc, #196]	; (401044 <_spi_m_sync_trans+0xfc>)
  400f80:	4798      	blx	r3
	return (((Spi *)hw)->SPI_SR & SPI_SR_SPIENS) > 0;
  400f82:	6923      	ldr	r3, [r4, #16]

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_spi_get_SR_SPIENS_bit(hw)) {
  400f84:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400f88:	d122      	bne.n	400fd0 <_spi_m_sync_trans+0x88>
		return ERR_NOT_INITIALIZED;
  400f8a:	f06f 0013 	mvn.w	r0, #19
  400f8e:	e053      	b.n	401038 <_spi_m_sync_trans+0xf0>
		return false;
  400f90:	2300      	movs	r3, #0
  400f92:	e035      	b.n	401000 <_spi_m_sync_trans+0xb8>
			data |= (*ctrl->txbuf) << 8;
  400f94:	7850      	ldrb	r0, [r2, #1]
  400f96:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
			ctrl->txbuf++;
  400f9a:	3202      	adds	r2, #2
  400f9c:	9201      	str	r2, [sp, #4]
	ctrl->txcnt++;
  400f9e:	3301      	adds	r3, #1
  400fa0:	9303      	str	r3, [sp, #12]
}

static inline void hri_spi_write_TDR_reg(const void *const hw, hri_spi_tdr_reg_t data)
{
	SPI_CRITICAL_SECTION_ENTER();
	((Spi *)hw)->SPI_TDR = data;
  400fa2:	60e1      	str	r1, [r4, #12]
	return ((Spi *)hw)->SPI_SR;
  400fa4:	f8d4 8010 	ldr.w	r8, [r4, #16]
	ASSERT(hw);
  400fa8:	f240 2222 	movw	r2, #546	; 0x222
  400fac:	4924      	ldr	r1, [pc, #144]	; (401040 <_spi_m_sync_trans+0xf8>)
  400fae:	4630      	mov	r0, r6
  400fb0:	4b24      	ldr	r3, [pc, #144]	; (401044 <_spi_m_sync_trans+0xfc>)
  400fb2:	4798      	blx	r3
	if (SPI_SR_OVRES & iflag) {
  400fb4:	f018 0f08 	tst.w	r8, #8
  400fb8:	d038      	beq.n	40102c <_spi_m_sync_trans+0xe4>
		return ERR_OVERFLOW;
  400fba:	f06f 0012 	mvn.w	r0, #18
			if (ctrl.rxcnt >= ctrl.txcnt) {
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
			}
		}
		rc = _spi_err_check(hri_spi_read_SR_reg(hw), hw);
		if (rc < 0) {
  400fbe:	2800      	cmp	r0, #0
  400fc0:	db36      	blt.n	401030 <_spi_m_sync_trans+0xe8>
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
  400fc2:	9803      	ldr	r0, [sp, #12]
  400fc4:	68ab      	ldr	r3, [r5, #8]
  400fc6:	4298      	cmp	r0, r3
  400fc8:	d302      	bcc.n	400fd0 <_spi_m_sync_trans+0x88>
  400fca:	9a04      	ldr	r2, [sp, #16]
  400fcc:	4293      	cmp	r3, r2
  400fce:	d92f      	bls.n	401030 <_spi_m_sync_trans+0xe8>
  400fd0:	6923      	ldr	r3, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_RDRF)) {
  400fd2:	f013 0f01 	tst.w	r3, #1
  400fd6:	d0db      	beq.n	400f90 <_spi_m_sync_trans+0x48>
	return (((Spi *)hw)->SPI_RDR & SPI_RDR_RD_Msk) >> SPI_RDR_RD_Pos;
  400fd8:	68a3      	ldr	r3, [r4, #8]
  400fda:	b29b      	uxth	r3, r3
	if (ctrl->rxbuf) {
  400fdc:	9a02      	ldr	r2, [sp, #8]
  400fde:	b15a      	cbz	r2, 400ff8 <_spi_m_sync_trans+0xb0>
		*ctrl->rxbuf++ = (uint8_t)data;
  400fe0:	1c51      	adds	r1, r2, #1
  400fe2:	9102      	str	r1, [sp, #8]
  400fe4:	7013      	strb	r3, [r2, #0]
		if (ctrl->char_size > 1) {
  400fe6:	f89d 2014 	ldrb.w	r2, [sp, #20]
  400fea:	2a01      	cmp	r2, #1
  400fec:	d904      	bls.n	400ff8 <_spi_m_sync_trans+0xb0>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
  400fee:	460a      	mov	r2, r1
  400ff0:	3101      	adds	r1, #1
  400ff2:	9102      	str	r1, [sp, #8]
  400ff4:	0a1b      	lsrs	r3, r3, #8
  400ff6:	7013      	strb	r3, [r2, #0]
	ctrl->rxcnt++;
  400ff8:	9b04      	ldr	r3, [sp, #16]
  400ffa:	3301      	adds	r3, #1
  400ffc:	9304      	str	r3, [sp, #16]
	return true;
  400ffe:	2301      	movs	r3, #1
		if (!_spi_rx_check_and_receive(hw, &ctrl)) {
  401000:	2b00      	cmp	r3, #0
  401002:	d1cf      	bne.n	400fa4 <_spi_m_sync_trans+0x5c>
			if (ctrl.rxcnt >= ctrl.txcnt) {
  401004:	9b03      	ldr	r3, [sp, #12]
  401006:	9a04      	ldr	r2, [sp, #16]
  401008:	429a      	cmp	r2, r3
  40100a:	d3cb      	bcc.n	400fa4 <_spi_m_sync_trans+0x5c>
				_spi_tx_check_and_send(hw, &ctrl, dev->dummy_byte);
  40100c:	88f9      	ldrh	r1, [r7, #6]
	return ((Spi *)hw)->SPI_SR;
  40100e:	6922      	ldr	r2, [r4, #16]
	if (!(hri_spi_read_SR_reg(hw) & SPI_SR_TDRE)) {
  401010:	f012 0f02 	tst.w	r2, #2
  401014:	d0c6      	beq.n	400fa4 <_spi_m_sync_trans+0x5c>
	if (ctrl->txbuf) {
  401016:	9a01      	ldr	r2, [sp, #4]
  401018:	2a00      	cmp	r2, #0
  40101a:	d0c0      	beq.n	400f9e <_spi_m_sync_trans+0x56>
		data = *ctrl->txbuf++;
  40101c:	1c51      	adds	r1, r2, #1
  40101e:	9101      	str	r1, [sp, #4]
  401020:	7811      	ldrb	r1, [r2, #0]
		if (ctrl->char_size > 1) {
  401022:	f89d 0014 	ldrb.w	r0, [sp, #20]
  401026:	2801      	cmp	r0, #1
  401028:	d8b4      	bhi.n	400f94 <_spi_m_sync_trans+0x4c>
  40102a:	e7b8      	b.n	400f9e <_spi_m_sync_trans+0x56>
	return ERR_NONE;
  40102c:	2000      	movs	r0, #0
  40102e:	e7c6      	b.n	400fbe <_spi_m_sync_trans+0x76>
	tmp = ((Spi *)hw)->SPI_SR;
  401030:	6923      	ldr	r3, [r4, #16]
	while (!(hri_spi_get_SR_reg(hw, SPI_SR_TXEMPTY))) {
  401032:	f413 7f00 	tst.w	r3, #512	; 0x200
  401036:	d0fb      	beq.n	401030 <_spi_m_sync_trans+0xe8>

	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
  401038:	b006      	add	sp, #24
  40103a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40103e:	bf00      	nop
  401040:	0040196c 	.word	0x0040196c
  401044:	00400bdd 	.word	0x00400bdd

00401048 <_spi_get_spi_m_sync>:
 * \brief Retrieve usart sync helper functions
 */
void *_spi_get_spi_m_sync(void)
{
	return (void *)NULL;
}
  401048:	2000      	movs	r0, #0
  40104a:	4770      	bx	lr

0040104c <get_cfg>:

static struct tc_configuration *get_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  40104c:	2300      	movs	r3, #0
  40104e:	b13b      	cbz	r3, 401060 <get_cfg+0x14>
		if (_tcs[i].hw == hw) {
			return &(_tcs[i]);
		}
	}

	return NULL;
  401050:	2000      	movs	r0, #0
  401052:	4770      	bx	lr
			return &(_tcs[i]);
  401054:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
  401058:	00a3      	lsls	r3, r4, #2
  40105a:	4608      	mov	r0, r1
  40105c:	4418      	add	r0, r3
  40105e:	e00c      	b.n	40107a <get_cfg+0x2e>
{
  401060:	b410      	push	{r4}
		if (_tcs[i].hw == hw) {
  401062:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  401066:	008a      	lsls	r2, r1, #2
  401068:	4905      	ldr	r1, [pc, #20]	; (401080 <get_cfg+0x34>)
  40106a:	588a      	ldr	r2, [r1, r2]
  40106c:	4282      	cmp	r2, r0
  40106e:	d0f1      	beq.n	401054 <get_cfg+0x8>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
  401070:	3301      	adds	r3, #1
  401072:	b2db      	uxtb	r3, r3
  401074:	2b00      	cmp	r3, #0
  401076:	d0f4      	beq.n	401062 <get_cfg+0x16>
	return NULL;
  401078:	2000      	movs	r0, #0
}
  40107a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40107e:	4770      	bx	lr
  401080:	20400000 	.word	0x20400000

00401084 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
  401084:	4b03      	ldr	r3, [pc, #12]	; (401094 <_tc_init_irq_param+0x10>)
  401086:	4298      	cmp	r0, r3
  401088:	d000      	beq.n	40108c <_tc_init_irq_param+0x8>
  40108a:	4770      	bx	lr
		_tc0_dev = (struct _timer_device *)dev;
  40108c:	4b02      	ldr	r3, [pc, #8]	; (401098 <_tc_init_irq_param+0x14>)
  40108e:	6019      	str	r1, [r3, #0]
	}
}
  401090:	e7fb      	b.n	40108a <_tc_init_irq_param+0x6>
  401092:	bf00      	nop
  401094:	4000c000 	.word	0x4000c000
  401098:	20400138 	.word	0x20400138

0040109c <tc_interrupt_handler>:
 * \internal TC interrupt handler
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
  40109c:	b508      	push	{r3, lr}
	void *const hw = device->hw;
  40109e:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPBS) > 0;
}

static inline bool hri_tc_get_SR_CPCS_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CPCS) > 0;
  4010a0:	6a1b      	ldr	r3, [r3, #32]

	if (hri_tc_get_SR_CPCS_bit(hw, 0)) {
  4010a2:	f013 0f10 	tst.w	r3, #16
  4010a6:	d100      	bne.n	4010aa <tc_interrupt_handler+0xe>
  4010a8:	bd08      	pop	{r3, pc}
		device->timer_cb.period_expired(device);
  4010aa:	6803      	ldr	r3, [r0, #0]
  4010ac:	4798      	blx	r3
	}
}
  4010ae:	e7fb      	b.n	4010a8 <tc_interrupt_handler+0xc>

004010b0 <_timer_init>:
{
  4010b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4010b2:	4607      	mov	r7, r0
  4010b4:	460c      	mov	r4, r1
	struct tc_configuration *cfg     = get_cfg(hw);
  4010b6:	4608      	mov	r0, r1
  4010b8:	4b27      	ldr	r3, [pc, #156]	; (401158 <_timer_init+0xa8>)
  4010ba:	4798      	blx	r3
  4010bc:	4605      	mov	r5, r0
	uint32_t                 ch_mode = cfg->channel_mode;
  4010be:	6886      	ldr	r6, [r0, #8]
	device->hw = hw;
  4010c0:	60fc      	str	r4, [r7, #12]
	ASSERT(ARRAY_SIZE(_tcs));
  4010c2:	2291      	movs	r2, #145	; 0x91
  4010c4:	4925      	ldr	r1, [pc, #148]	; (40115c <_timer_init+0xac>)
  4010c6:	2001      	movs	r0, #1
  4010c8:	4b25      	ldr	r3, [pc, #148]	; (401160 <_timer_init+0xb0>)
  4010ca:	4798      	blx	r3
	if (ch_mode & TC_CMR_WAVE) {
  4010cc:	f416 4f00 	tst.w	r6, #32768	; 0x8000
  4010d0:	d001      	beq.n	4010d6 <_timer_init+0x26>
		ch_mode |= (0x02 << 13) | (0x01 << 16) | (0x02 << 18);
  4010d2:	f446 2614 	orr.w	r6, r6, #606208	; 0x94000
}

static inline void hri_tc_write_CMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_cmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_CMR = data;
  4010d6:	6066      	str	r6, [r4, #4]
	hri_tc_write_RA_reg(hw, 0, cfg->ra);
  4010d8:	696b      	ldr	r3, [r5, #20]
}

static inline void hri_tc_write_RA_reg(const void *const hw, uint8_t submodule_index, hri_tc_ra_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RA = data;
  4010da:	6163      	str	r3, [r4, #20]
	hri_tc_write_RB_reg(hw, 0, cfg->rb);
  4010dc:	69ab      	ldr	r3, [r5, #24]
}

static inline void hri_tc_write_RB_reg(const void *const hw, uint8_t submodule_index, hri_tc_rb_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_RB = data;
  4010de:	61a3      	str	r3, [r4, #24]
	hri_tc_write_EMR_reg(hw, 0, cfg->ext_mode);
  4010e0:	68eb      	ldr	r3, [r5, #12]
}

static inline void hri_tc_write_EMR_reg(const void *const hw, uint8_t submodule_index, hri_tc_emr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TcChannel[submodule_index].TC_EMR = data;
  4010e2:	6323      	str	r3, [r4, #48]	; 0x30
	hri_tc_write_RC_reg(hw, 0, cfg->rc);
  4010e4:	69eb      	ldr	r3, [r5, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_RC = data;
  4010e6:	61e3      	str	r3, [r4, #28]
	((Tc *)hw)->TcChannel[submodule_index].TC_IER = mask;
  4010e8:	2310      	movs	r3, #16
  4010ea:	6263      	str	r3, [r4, #36]	; 0x24
	hri_tc_write_FMR_reg(hw, cfg->fmr);
  4010ec:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tc_write_FMR_reg(const void *const hw, hri_tc_fmr_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->TC_FMR = data;
  4010ee:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	_tc_init_irq_param(hw, device);
  4010f2:	4639      	mov	r1, r7
  4010f4:	4620      	mov	r0, r4
  4010f6:	4b1b      	ldr	r3, [pc, #108]	; (401164 <_timer_init+0xb4>)
  4010f8:	4798      	blx	r3
	NVIC_DisableIRQ(cfg->irq);
  4010fa:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  4010fe:	2b00      	cmp	r3, #0
  401100:	db0d      	blt.n	40111e <_timer_init+0x6e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401102:	095a      	lsrs	r2, r3, #5
  401104:	f003 031f 	and.w	r3, r3, #31
  401108:	2101      	movs	r1, #1
  40110a:	fa01 f303 	lsl.w	r3, r1, r3
  40110e:	3220      	adds	r2, #32
  401110:	4915      	ldr	r1, [pc, #84]	; (401168 <_timer_init+0xb8>)
  401112:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  401116:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40111a:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(cfg->irq);
  40111e:	f995 3004 	ldrsb.w	r3, [r5, #4]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  401122:	2b00      	cmp	r3, #0
  401124:	db09      	blt.n	40113a <_timer_init+0x8a>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401126:	095a      	lsrs	r2, r3, #5
  401128:	f003 031f 	and.w	r3, r3, #31
  40112c:	2101      	movs	r1, #1
  40112e:	fa01 f303 	lsl.w	r3, r1, r3
  401132:	3260      	adds	r2, #96	; 0x60
  401134:	490c      	ldr	r1, [pc, #48]	; (401168 <_timer_init+0xb8>)
  401136:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ(cfg->irq);
  40113a:	f995 3004 	ldrsb.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
  40113e:	2b00      	cmp	r3, #0
  401140:	db08      	blt.n	401154 <_timer_init+0xa4>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  401142:	0959      	lsrs	r1, r3, #5
  401144:	f003 031f 	and.w	r3, r3, #31
  401148:	2201      	movs	r2, #1
  40114a:	fa02 f303 	lsl.w	r3, r2, r3
  40114e:	4a06      	ldr	r2, [pc, #24]	; (401168 <_timer_init+0xb8>)
  401150:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
  401154:	2000      	movs	r0, #0
  401156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401158:	0040104d 	.word	0x0040104d
  40115c:	00401984 	.word	0x00401984
  401160:	00400bdd 	.word	0x00400bdd
  401164:	00401085 	.word	0x00401085
  401168:	e000e100 	.word	0xe000e100

0040116c <_timer_start>:
	hri_tc_write_CCR_reg(device->hw, 0, TC_CCR_CLKEN | TC_CCR_SWTRG);
  40116c:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->TcChannel[submodule_index].TC_CCR = data;
  40116e:	2205      	movs	r2, #5
  401170:	601a      	str	r2, [r3, #0]
  401172:	4770      	bx	lr

00401174 <_timer_is_started>:
	return hri_tc_get_SR_CLKSTA_bit(device->hw, 0);
  401174:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->TcChannel[submodule_index].TC_SR & TC_SR_CLKSTA) > 0;
  401176:	6a18      	ldr	r0, [r3, #32]
}
  401178:	f3c0 4000 	ubfx	r0, r0, #16, #1
  40117c:	4770      	bx	lr
	...

00401180 <_timer_set_irq>:
{
  401180:	b508      	push	{r3, lr}
	struct tc_configuration *cfg = get_cfg(device->hw);
  401182:	68c0      	ldr	r0, [r0, #12]
  401184:	4b02      	ldr	r3, [pc, #8]	; (401190 <_timer_set_irq+0x10>)
  401186:	4798      	blx	r3
	_irq_set((IRQn_Type)(cfg->irq));
  401188:	7900      	ldrb	r0, [r0, #4]
  40118a:	4b02      	ldr	r3, [pc, #8]	; (401194 <_timer_set_irq+0x14>)
  40118c:	4798      	blx	r3
  40118e:	bd08      	pop	{r3, pc}
  401190:	0040104d 	.word	0x0040104d
  401194:	00400d29 	.word	0x00400d29

00401198 <_tc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_tc_get_timer(void)
{
	return NULL;
}
  401198:	2000      	movs	r0, #0
  40119a:	4770      	bx	lr

0040119c <TC0_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC0_Handler(void)
{
  40119c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc0_dev);
  40119e:	4b02      	ldr	r3, [pc, #8]	; (4011a8 <TC0_Handler+0xc>)
  4011a0:	6818      	ldr	r0, [r3, #0]
  4011a2:	4b02      	ldr	r3, [pc, #8]	; (4011ac <TC0_Handler+0x10>)
  4011a4:	4798      	blx	r3
  4011a6:	bd08      	pop	{r3, pc}
  4011a8:	20400138 	.word	0x20400138
  4011ac:	0040109d 	.word	0x0040109d

004011b0 <_rand_sync_init>:
#include <err_codes.h>
#include <hpl_rand_sync.h>
#include <utils_assert.h>

int32_t _rand_sync_init(struct _rand_sync_dev *const dev, void *const hw)
{
  4011b0:	b538      	push	{r3, r4, r5, lr}
	ASSERT(dev && hw);
  4011b2:	4604      	mov	r4, r0
  4011b4:	460d      	mov	r5, r1
  4011b6:	2800      	cmp	r0, #0
  4011b8:	bf18      	it	ne
  4011ba:	2900      	cmpne	r1, #0
  4011bc:	bf14      	ite	ne
  4011be:	2001      	movne	r0, #1
  4011c0:	2000      	moveq	r0, #0
  4011c2:	2228      	movs	r2, #40	; 0x28
  4011c4:	4903      	ldr	r1, [pc, #12]	; (4011d4 <_rand_sync_init+0x24>)
  4011c6:	4b04      	ldr	r3, [pc, #16]	; (4011d8 <_rand_sync_init+0x28>)
  4011c8:	4798      	blx	r3

	dev->prvt   = hw;
  4011ca:	6025      	str	r5, [r4, #0]
	dev->n_bits = 32;
  4011cc:	2320      	movs	r3, #32
  4011ce:	7123      	strb	r3, [r4, #4]

	return ERR_NONE;
}
  4011d0:	2000      	movs	r0, #0
  4011d2:	bd38      	pop	{r3, r4, r5, pc}
  4011d4:	00401998 	.word	0x00401998
  4011d8:	00400bdd 	.word	0x00400bdd

004011dc <_usart_init_irq_param>:
/**
 * \brief Init irq param with the given usart hardware instance
 */
static void _usart_init_irq_param(const void *const hw, struct _usart_async_device *dev)
{
	if (hw == USART1) {
  4011dc:	4b03      	ldr	r3, [pc, #12]	; (4011ec <_usart_init_irq_param+0x10>)
  4011de:	4298      	cmp	r0, r3
  4011e0:	d000      	beq.n	4011e4 <_usart_init_irq_param+0x8>
  4011e2:	4770      	bx	lr
		_usart1_dev = dev;
  4011e4:	4b02      	ldr	r3, [pc, #8]	; (4011f0 <_usart_init_irq_param+0x14>)
  4011e6:	6019      	str	r1, [r3, #0]
	}
}
  4011e8:	e7fb      	b.n	4011e2 <_usart_init_irq_param+0x6>
  4011ea:	bf00      	nop
  4011ec:	40028000 	.word	0x40028000
  4011f0:	2040013c 	.word	0x2040013c

004011f4 <_usart_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given usart hardware instance
 */
static uint8_t _usart_get_hardware_index(const void *const hw)
{
  4011f4:	b510      	push	{r4, lr}
	ASSERT(hw);
  4011f6:	4604      	mov	r4, r0
  4011f8:	f240 222f 	movw	r2, #559	; 0x22f
  4011fc:	4905      	ldr	r1, [pc, #20]	; (401214 <_usart_get_hardware_index+0x20>)
  4011fe:	3000      	adds	r0, #0
  401200:	bf18      	it	ne
  401202:	2001      	movne	r0, #1
  401204:	4b04      	ldr	r3, [pc, #16]	; (401218 <_usart_get_hardware_index+0x24>)
  401206:	4798      	blx	r3

#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)USART0) / sizeof(Usart);
#endif

	return ((uint32_t)hw - (uint32_t)USART0) >> 14;
  401208:	4804      	ldr	r0, [pc, #16]	; (40121c <_usart_get_hardware_index+0x28>)
  40120a:	4420      	add	r0, r4
}
  40120c:	f3c0 3087 	ubfx	r0, r0, #14, #8
  401210:	bd10      	pop	{r4, pc}
  401212:	bf00      	nop
  401214:	004019bc 	.word	0x004019bc
  401218:	00400bdd 	.word	0x00400bdd
  40121c:	bffdc000 	.word	0xbffdc000

00401220 <_get_usart_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given usart hardware instance
 */
static uint8_t _get_usart_index(const void *const hw)
{
  401220:	b510      	push	{r4, lr}
	ASSERT(hw);
  401222:	4604      	mov	r4, r0
  401224:	f44f 722d 	mov.w	r2, #692	; 0x2b4
  401228:	490e      	ldr	r1, [pc, #56]	; (401264 <_get_usart_index+0x44>)
  40122a:	3000      	adds	r0, #0
  40122c:	bf18      	it	ne
  40122e:	2001      	movne	r0, #1
  401230:	4b0d      	ldr	r3, [pc, #52]	; (401268 <_get_usart_index+0x48>)
  401232:	4798      	blx	r3
	uint8_t usart_offset = _usart_get_hardware_index(hw);
  401234:	4620      	mov	r0, r4
  401236:	4b0d      	ldr	r3, [pc, #52]	; (40126c <_get_usart_index+0x4c>)
  401238:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  40123a:	2300      	movs	r3, #0
  40123c:	b143      	cbz	r3, 401250 <_get_usart_index+0x30>
		if (_usarts[i].number == usart_offset) {
			return i;
		}
	}

	ASSERT(false);
  40123e:	f240 22be 	movw	r2, #702	; 0x2be
  401242:	4908      	ldr	r1, [pc, #32]	; (401264 <_get_usart_index+0x44>)
  401244:	2000      	movs	r0, #0
  401246:	4b08      	ldr	r3, [pc, #32]	; (401268 <_get_usart_index+0x48>)
  401248:	4798      	blx	r3
	return 0;
  40124a:	2300      	movs	r3, #0
}
  40124c:	4618      	mov	r0, r3
  40124e:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == usart_offset) {
  401250:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  401254:	008a      	lsls	r2, r1, #2
  401256:	4906      	ldr	r1, [pc, #24]	; (401270 <_get_usart_index+0x50>)
  401258:	5c8a      	ldrb	r2, [r1, r2]
  40125a:	4290      	cmp	r0, r2
  40125c:	d0f6      	beq.n	40124c <_get_usart_index+0x2c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
  40125e:	3301      	adds	r3, #1
  401260:	b2db      	uxtb	r3, r3
  401262:	e7eb      	b.n	40123c <_get_usart_index+0x1c>
  401264:	004019bc 	.word	0x004019bc
  401268:	00400bdd 	.word	0x00400bdd
  40126c:	004011f5 	.word	0x004011f5
  401270:	004019b0 	.word	0x004019b0

00401274 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
  401274:	b510      	push	{r4, lr}
	ASSERT(hw);
  401276:	4604      	mov	r4, r0
  401278:	f240 22cb 	movw	r2, #715	; 0x2cb
  40127c:	4911      	ldr	r1, [pc, #68]	; (4012c4 <_usart_init+0x50>)
  40127e:	3000      	adds	r0, #0
  401280:	bf18      	it	ne
  401282:	2001      	movne	r0, #1
  401284:	4b10      	ldr	r3, [pc, #64]	; (4012c8 <_usart_init+0x54>)
  401286:	4798      	blx	r3
	uint8_t i = _get_usart_index(hw);
  401288:	4620      	mov	r0, r4
  40128a:	4b10      	ldr	r3, [pc, #64]	; (4012cc <_usart_init+0x58>)
  40128c:	4798      	blx	r3
}

static inline void hri_usart_write_US_WPMR_reg(const void *const hw, hri_usart_us_wpmr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_WPMR = data;
  40128e:	4b10      	ldr	r3, [pc, #64]	; (4012d0 <_usart_init+0x5c>)
  401290:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
	((Usart *)hw)->US_MR = data;
  401294:	2300      	movs	r3, #0
  401296:	6063      	str	r3, [r4, #4]
	((Usart *)hw)->US_RTOR = data;
  401298:	6263      	str	r3, [r4, #36]	; 0x24
	((Usart *)hw)->US_TTGR = data;
  40129a:	62a3      	str	r3, [r4, #40]	; 0x28
}

static inline void hri_usart_write_US_CR_reg(const void *const hw, hri_usart_us_cr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_CR = data;
  40129c:	22ac      	movs	r2, #172	; 0xac
  40129e:	6022      	str	r2, [r4, #0]
  4012a0:	f44f 7280 	mov.w	r2, #256	; 0x100
  4012a4:	6022      	str	r2, [r4, #0]
  4012a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4012aa:	6022      	str	r2, [r4, #0]
	/* Reset status bits. */
	hri_usart_write_US_CR_reg(hw, US_CR_RSTSTA);
	/* Turn off RTS and DTR if exist. */
	hri_usart_write_US_CR_reg(hw, US_CR_USART_RTSDIS);

	hri_usart_write_US_MR_reg(hw, _usarts[i].us_mr);
  4012ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4012b0:	0081      	lsls	r1, r0, #2
  4012b2:	4a08      	ldr	r2, [pc, #32]	; (4012d4 <_usart_init+0x60>)
  4012b4:	440a      	add	r2, r1
  4012b6:	6852      	ldr	r2, [r2, #4]
	((Usart *)hw)->US_MR = data;
  4012b8:	6062      	str	r2, [r4, #4]
	((Usart *)hw)->US_BRGR = data;
  4012ba:	4a07      	ldr	r2, [pc, #28]	; (4012d8 <_usart_init+0x64>)
  4012bc:	6222      	str	r2, [r4, #32]
	hri_usart_write_US_BRGR_reg(hw, _usarts[i].us_brgr);

	return ERR_NONE;
}
  4012be:	4618      	mov	r0, r3
  4012c0:	bd10      	pop	{r4, pc}
  4012c2:	bf00      	nop
  4012c4:	004019bc 	.word	0x004019bc
  4012c8:	00400bdd 	.word	0x00400bdd
  4012cc:	00401221 	.word	0x00401221
  4012d0:	55534100 	.word	0x55534100
  4012d4:	004019b0 	.word	0x004019b0
  4012d8:	00030051 	.word	0x00030051

004012dc <_usart_get_irq_num>:
{
  4012dc:	b510      	push	{r4, lr}
	ASSERT(hw);
  4012de:	4604      	mov	r4, r0
  4012e0:	22ae      	movs	r2, #174	; 0xae
  4012e2:	4906      	ldr	r1, [pc, #24]	; (4012fc <_usart_get_irq_num+0x20>)
  4012e4:	3000      	adds	r0, #0
  4012e6:	bf18      	it	ne
  4012e8:	2001      	movne	r0, #1
  4012ea:	4b05      	ldr	r3, [pc, #20]	; (401300 <_usart_get_irq_num+0x24>)
  4012ec:	4798      	blx	r3
	return USART0_IRQn + _usart_get_hardware_index(hw);
  4012ee:	4620      	mov	r0, r4
  4012f0:	4b04      	ldr	r3, [pc, #16]	; (401304 <_usart_get_irq_num+0x28>)
  4012f2:	4798      	blx	r3
  4012f4:	300d      	adds	r0, #13
}
  4012f6:	b2c0      	uxtb	r0, r0
  4012f8:	bd10      	pop	{r4, pc}
  4012fa:	bf00      	nop
  4012fc:	004019bc 	.word	0x004019bc
  401300:	00400bdd 	.word	0x00400bdd
  401304:	004011f5 	.word	0x004011f5

00401308 <_usart_interrupt_handler>:
{
  401308:	b510      	push	{r4, lr}
	ASSERT(device);
  40130a:	4604      	mov	r4, r0
  40130c:	f240 2289 	movw	r2, #649	; 0x289
  401310:	4923      	ldr	r1, [pc, #140]	; (4013a0 <_usart_interrupt_handler+0x98>)
  401312:	3000      	adds	r0, #0
  401314:	bf18      	it	ne
  401316:	2001      	movne	r0, #1
  401318:	4b22      	ldr	r3, [pc, #136]	; (4013a4 <_usart_interrupt_handler+0x9c>)
  40131a:	4798      	blx	r3
	void *hw = device->hw;
  40131c:	69a3      	ldr	r3, [r4, #24]
	return (((Usart *)hw)->US_CSR & US_CSR_TXRDY) > 0;
  40131e:	695a      	ldr	r2, [r3, #20]
	if (hri_usart_get_US_CSR_TXRDY_bit(hw) && hri_usart_get_US_IMR_TXRDY_bit(hw)) {
  401320:	f012 0f02 	tst.w	r2, #2
  401324:	d003      	beq.n	40132e <_usart_interrupt_handler+0x26>
	return (((Usart *)hw)->US_IMR & US_IMR_TXRDY) >> US_IMR_TXRDY_Pos;
  401326:	691a      	ldr	r2, [r3, #16]
  401328:	f012 0f02 	tst.w	r2, #2
  40132c:	d118      	bne.n	401360 <_usart_interrupt_handler+0x58>
	return (((Usart *)hw)->US_CSR & US_CSR_TXEMPTY) > 0;
  40132e:	695a      	ldr	r2, [r3, #20]
	} else if (hri_usart_get_US_CSR_TXEMPTY_bit(hw) && hri_usart_get_US_IMR_TXEMPTY_bit(hw)) {
  401330:	f412 7f00 	tst.w	r2, #512	; 0x200
  401334:	d003      	beq.n	40133e <_usart_interrupt_handler+0x36>
	return (((Usart *)hw)->US_IMR & US_IMR_TXEMPTY) >> US_IMR_TXEMPTY_Pos;
  401336:	691a      	ldr	r2, [r3, #16]
  401338:	f412 7f00 	tst.w	r2, #512	; 0x200
  40133c:	d116      	bne.n	40136c <_usart_interrupt_handler+0x64>
	return (((Usart *)hw)->US_CSR & US_CSR_RXRDY) > 0;
  40133e:	695a      	ldr	r2, [r3, #20]
	} else if (hri_usart_get_US_CSR_RXRDY_bit(hw) && hri_usart_get_US_IMR_RXRDY_bit(hw)) {
  401340:	f012 0f01 	tst.w	r2, #1
  401344:	d01f      	beq.n	401386 <_usart_interrupt_handler+0x7e>
	return (((Usart *)hw)->US_IMR & US_IMR_RXRDY) >> US_IMR_RXRDY_Pos;
  401346:	691a      	ldr	r2, [r3, #16]
  401348:	f012 0f01 	tst.w	r2, #1
  40134c:	d01b      	beq.n	401386 <_usart_interrupt_handler+0x7e>
	return ((Usart *)hw)->US_CSR;
  40134e:	6959      	ldr	r1, [r3, #20]
		if (hri_usart_read_US_CSR_reg(hw) &
  401350:	4a15      	ldr	r2, [pc, #84]	; (4013a8 <_usart_interrupt_handler+0xa0>)
  401352:	4211      	tst	r1, r2
  401354:	d011      	beq.n	40137a <_usart_interrupt_handler+0x72>
	return ((Usart *)hw)->US_RHR;
  401356:	699a      	ldr	r2, [r3, #24]
	((Usart *)hw)->US_CR = data;
  401358:	f44f 7280 	mov.w	r2, #256	; 0x100
  40135c:	601a      	str	r2, [r3, #0]
  40135e:	bd10      	pop	{r4, pc}
	((Usart *)hw)->US_IDR = US_IMR_TXRDY;
  401360:	2202      	movs	r2, #2
  401362:	60da      	str	r2, [r3, #12]
		device->usart_cb.tx_byte_sent(device);
  401364:	6823      	ldr	r3, [r4, #0]
  401366:	4620      	mov	r0, r4
  401368:	4798      	blx	r3
  40136a:	bd10      	pop	{r4, pc}
	((Usart *)hw)->US_IDR = US_IMR_TXEMPTY;
  40136c:	f44f 7200 	mov.w	r2, #512	; 0x200
  401370:	60da      	str	r2, [r3, #12]
		device->usart_cb.tx_done_cb(device);
  401372:	68a3      	ldr	r3, [r4, #8]
  401374:	4620      	mov	r0, r4
  401376:	4798      	blx	r3
  401378:	bd10      	pop	{r4, pc}
		device->usart_cb.rx_done_cb(device, (uint8_t)hri_usart_read_US_RHR_reg(hw));
  40137a:	6862      	ldr	r2, [r4, #4]
	return ((Usart *)hw)->US_RHR;
  40137c:	6999      	ldr	r1, [r3, #24]
  40137e:	b2c9      	uxtb	r1, r1
  401380:	4620      	mov	r0, r4
  401382:	4790      	blx	r2
  401384:	bd10      	pop	{r4, pc}
	return ((Usart *)hw)->US_CSR;
  401386:	6959      	ldr	r1, [r3, #20]
	} else if (hri_usart_read_US_CSR_reg(hw) &
  401388:	4a07      	ldr	r2, [pc, #28]	; (4013a8 <_usart_interrupt_handler+0xa0>)
  40138a:	4211      	tst	r1, r2
  40138c:	d100      	bne.n	401390 <_usart_interrupt_handler+0x88>
  40138e:	bd10      	pop	{r4, pc}
	((Usart *)hw)->US_CR = data;
  401390:	f44f 7280 	mov.w	r2, #256	; 0x100
  401394:	601a      	str	r2, [r3, #0]
		device->usart_cb.error_cb(device);
  401396:	68e3      	ldr	r3, [r4, #12]
  401398:	4620      	mov	r0, r4
  40139a:	4798      	blx	r3
  40139c:	e7f7      	b.n	40138e <_usart_interrupt_handler+0x86>
  40139e:	bf00      	nop
  4013a0:	004019bc 	.word	0x004019bc
  4013a4:	00400bdd 	.word	0x00400bdd
  4013a8:	010000e0 	.word	0x010000e0

004013ac <_usart_async_init>:
{
  4013ac:	b570      	push	{r4, r5, r6, lr}
  4013ae:	460c      	mov	r4, r1
	ASSERT(device);
  4013b0:	4606      	mov	r6, r0
  4013b2:	22d1      	movs	r2, #209	; 0xd1
  4013b4:	4922      	ldr	r1, [pc, #136]	; (401440 <_usart_async_init+0x94>)
  4013b6:	3000      	adds	r0, #0
  4013b8:	bf18      	it	ne
  4013ba:	2001      	movne	r0, #1
  4013bc:	4b21      	ldr	r3, [pc, #132]	; (401444 <_usart_async_init+0x98>)
  4013be:	4798      	blx	r3
	init_status = _usart_init(hw);
  4013c0:	4620      	mov	r0, r4
  4013c2:	4b21      	ldr	r3, [pc, #132]	; (401448 <_usart_async_init+0x9c>)
  4013c4:	4798      	blx	r3
	if (init_status) {
  4013c6:	4605      	mov	r5, r0
  4013c8:	b108      	cbz	r0, 4013ce <_usart_async_init+0x22>
}
  4013ca:	4628      	mov	r0, r5
  4013cc:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
  4013ce:	61b4      	str	r4, [r6, #24]
	_usart_init_irq_param(hw, device);
  4013d0:	4631      	mov	r1, r6
  4013d2:	4620      	mov	r0, r4
  4013d4:	4b1d      	ldr	r3, [pc, #116]	; (40144c <_usart_async_init+0xa0>)
  4013d6:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_usart_get_irq_num(hw));
  4013d8:	4620      	mov	r0, r4
  4013da:	4b1d      	ldr	r3, [pc, #116]	; (401450 <_usart_async_init+0xa4>)
  4013dc:	4798      	blx	r3
  4013de:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
  4013e0:	2b00      	cmp	r3, #0
  4013e2:	db0d      	blt.n	401400 <_usart_async_init+0x54>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4013e4:	095b      	lsrs	r3, r3, #5
  4013e6:	f000 001f 	and.w	r0, r0, #31
  4013ea:	2201      	movs	r2, #1
  4013ec:	fa02 f000 	lsl.w	r0, r2, r0
  4013f0:	3320      	adds	r3, #32
  4013f2:	4a18      	ldr	r2, [pc, #96]	; (401454 <_usart_async_init+0xa8>)
  4013f4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
  4013f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4013fc:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ((IRQn_Type)_usart_get_irq_num(hw));
  401400:	4620      	mov	r0, r4
  401402:	4b13      	ldr	r3, [pc, #76]	; (401450 <_usart_async_init+0xa4>)
  401404:	4798      	blx	r3
  401406:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
  401408:	2b00      	cmp	r3, #0
  40140a:	db09      	blt.n	401420 <_usart_async_init+0x74>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40140c:	095b      	lsrs	r3, r3, #5
  40140e:	f000 001f 	and.w	r0, r0, #31
  401412:	2201      	movs	r2, #1
  401414:	fa02 f000 	lsl.w	r0, r2, r0
  401418:	3360      	adds	r3, #96	; 0x60
  40141a:	4a0e      	ldr	r2, [pc, #56]	; (401454 <_usart_async_init+0xa8>)
  40141c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	NVIC_EnableIRQ((IRQn_Type)_usart_get_irq_num(hw));
  401420:	4620      	mov	r0, r4
  401422:	4b0b      	ldr	r3, [pc, #44]	; (401450 <_usart_async_init+0xa4>)
  401424:	4798      	blx	r3
  401426:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
  401428:	2b00      	cmp	r3, #0
  40142a:	dbce      	blt.n	4013ca <_usart_async_init+0x1e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40142c:	095b      	lsrs	r3, r3, #5
  40142e:	f000 001f 	and.w	r0, r0, #31
  401432:	2201      	movs	r2, #1
  401434:	fa02 f000 	lsl.w	r0, r2, r0
  401438:	4a06      	ldr	r2, [pc, #24]	; (401454 <_usart_async_init+0xa8>)
  40143a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  40143e:	e7c4      	b.n	4013ca <_usart_async_init+0x1e>
  401440:	004019bc 	.word	0x004019bc
  401444:	00400bdd 	.word	0x00400bdd
  401448:	00401275 	.word	0x00401275
  40144c:	004011dd 	.word	0x004011dd
  401450:	004012dd 	.word	0x004012dd
  401454:	e000e100 	.word	0xe000e100

00401458 <_usart_async_enable>:
{
  401458:	b570      	push	{r4, r5, r6, lr}
	ASSERT(device);
  40145a:	4e0a      	ldr	r6, [pc, #40]	; (401484 <_usart_async_enable+0x2c>)
  40145c:	4604      	mov	r4, r0
  40145e:	f240 1213 	movw	r2, #275	; 0x113
  401462:	4631      	mov	r1, r6
  401464:	3000      	adds	r0, #0
  401466:	bf18      	it	ne
  401468:	2001      	movne	r0, #1
  40146a:	4d07      	ldr	r5, [pc, #28]	; (401488 <_usart_async_enable+0x30>)
  40146c:	47a8      	blx	r5
	_usart_enable(device->hw);
  40146e:	69a4      	ldr	r4, [r4, #24]
 *
 * \param[in] hw The pointer to hardware instance
 */
static inline void _usart_enable(void *const hw)
{
	ASSERT(hw);
  401470:	f44f 723d 	mov.w	r2, #756	; 0x2f4
  401474:	4631      	mov	r1, r6
  401476:	1c20      	adds	r0, r4, #0
  401478:	bf18      	it	ne
  40147a:	2001      	movne	r0, #1
  40147c:	47a8      	blx	r5
  40147e:	2350      	movs	r3, #80	; 0x50
  401480:	6023      	str	r3, [r4, #0]
  401482:	bd70      	pop	{r4, r5, r6, pc}
  401484:	004019bc 	.word	0x004019bc
  401488:	00400bdd 	.word	0x00400bdd

0040148c <_usart_async_write_byte>:
{
  40148c:	b538      	push	{r3, r4, r5, lr}
  40148e:	460c      	mov	r4, r1
	ASSERT(device);
  401490:	4605      	mov	r5, r0
  401492:	f240 12b5 	movw	r2, #437	; 0x1b5
  401496:	4904      	ldr	r1, [pc, #16]	; (4014a8 <_usart_async_write_byte+0x1c>)
  401498:	3000      	adds	r0, #0
  40149a:	bf18      	it	ne
  40149c:	2001      	movne	r0, #1
  40149e:	4b03      	ldr	r3, [pc, #12]	; (4014ac <_usart_async_write_byte+0x20>)
  4014a0:	4798      	blx	r3
	hri_usart_write_US_THR_reg(device->hw, (hri_usart_us_thr_reg_t)data);
  4014a2:	69ab      	ldr	r3, [r5, #24]
}

static inline void hri_usart_write_US_THR_reg(const void *const hw, hri_usart_us_thr_reg_t data)
{
	USART_CRITICAL_SECTION_ENTER();
	((Usart *)hw)->US_THR = data;
  4014a4:	61dc      	str	r4, [r3, #28]
  4014a6:	bd38      	pop	{r3, r4, r5, pc}
  4014a8:	004019bc 	.word	0x004019bc
  4014ac:	00400bdd 	.word	0x00400bdd

004014b0 <_usart_async_enable_byte_sent_irq>:
{
  4014b0:	b510      	push	{r4, lr}
	ASSERT(device);
  4014b2:	4604      	mov	r4, r0
  4014b4:	f240 221d 	movw	r2, #541	; 0x21d
  4014b8:	4904      	ldr	r1, [pc, #16]	; (4014cc <_usart_async_enable_byte_sent_irq+0x1c>)
  4014ba:	3000      	adds	r0, #0
  4014bc:	bf18      	it	ne
  4014be:	2001      	movne	r0, #1
  4014c0:	4b03      	ldr	r3, [pc, #12]	; (4014d0 <_usart_async_enable_byte_sent_irq+0x20>)
  4014c2:	4798      	blx	r3
	hri_usart_set_US_IMR_TXRDY_bit(device->hw);
  4014c4:	69a3      	ldr	r3, [r4, #24]
	((Usart *)hw)->US_IER = US_IMR_TXRDY;
  4014c6:	2202      	movs	r2, #2
  4014c8:	609a      	str	r2, [r3, #8]
  4014ca:	bd10      	pop	{r4, pc}
  4014cc:	004019bc 	.word	0x004019bc
  4014d0:	00400bdd 	.word	0x00400bdd

004014d4 <_usart_async_enable_tx_done_irq>:
{
  4014d4:	b510      	push	{r4, lr}
	ASSERT(device);
  4014d6:	4604      	mov	r4, r0
  4014d8:	f240 2226 	movw	r2, #550	; 0x226
  4014dc:	4905      	ldr	r1, [pc, #20]	; (4014f4 <_usart_async_enable_tx_done_irq+0x20>)
  4014de:	3000      	adds	r0, #0
  4014e0:	bf18      	it	ne
  4014e2:	2001      	movne	r0, #1
  4014e4:	4b04      	ldr	r3, [pc, #16]	; (4014f8 <_usart_async_enable_tx_done_irq+0x24>)
  4014e6:	4798      	blx	r3
	hri_usart_set_US_IMR_TXEMPTY_bit(device->hw);
  4014e8:	69a3      	ldr	r3, [r4, #24]
	((Usart *)hw)->US_IER = US_IMR_TXEMPTY;
  4014ea:	f44f 7200 	mov.w	r2, #512	; 0x200
  4014ee:	609a      	str	r2, [r3, #8]
  4014f0:	bd10      	pop	{r4, pc}
  4014f2:	bf00      	nop
  4014f4:	004019bc 	.word	0x004019bc
  4014f8:	00400bdd 	.word	0x00400bdd

004014fc <_usart_async_set_irq_state>:
{
  4014fc:	b570      	push	{r4, r5, r6, lr}
  4014fe:	460c      	mov	r4, r1
  401500:	4616      	mov	r6, r2
	ASSERT(device);
  401502:	4605      	mov	r5, r0
  401504:	f44f 7214 	mov.w	r2, #592	; 0x250
  401508:	491b      	ldr	r1, [pc, #108]	; (401578 <_usart_async_set_irq_state+0x7c>)
  40150a:	3000      	adds	r0, #0
  40150c:	bf18      	it	ne
  40150e:	2001      	movne	r0, #1
  401510:	4b1a      	ldr	r3, [pc, #104]	; (40157c <_usart_async_set_irq_state+0x80>)
  401512:	4798      	blx	r3
	if (state) {
  401514:	b1c6      	cbz	r6, 401548 <_usart_async_set_irq_state+0x4c>
		if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
  401516:	2c02      	cmp	r4, #2
  401518:	bf18      	it	ne
  40151a:	2c00      	cmpne	r4, #0
  40151c:	d004      	beq.n	401528 <_usart_async_set_irq_state+0x2c>
		} else if (USART_ASYNC_RX_DONE == type) {
  40151e:	2c01      	cmp	r4, #1
  401520:	d00a      	beq.n	401538 <_usart_async_set_irq_state+0x3c>
		} else if (USART_ASYNC_ERROR == type) {
  401522:	2c03      	cmp	r4, #3
  401524:	d00c      	beq.n	401540 <_usart_async_set_irq_state+0x44>
  401526:	bd70      	pop	{r4, r5, r6, pc}
			hri_usart_set_US_IMR_TXRDY_bit(device->hw);
  401528:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IER = US_IMR_TXRDY;
  40152a:	2202      	movs	r2, #2
  40152c:	609a      	str	r2, [r3, #8]
			hri_usart_set_US_IMR_TXEMPTY_bit(device->hw);
  40152e:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IER = US_IMR_TXEMPTY;
  401530:	f44f 7200 	mov.w	r2, #512	; 0x200
  401534:	609a      	str	r2, [r3, #8]
  401536:	bd70      	pop	{r4, r5, r6, pc}
			hri_usart_set_US_IMR_RXRDY_bit(device->hw);
  401538:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IER = US_IMR_RXRDY;
  40153a:	2201      	movs	r2, #1
  40153c:	609a      	str	r2, [r3, #8]
  40153e:	bd70      	pop	{r4, r5, r6, pc}
			    device->hw, US_CSR_OVRE | US_CSR_USART_LIN_FRAME | US_CSR_USART_LIN_PARE | US_CSR_USART_MANERR);
  401540:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IER = mask;
  401542:	4a0f      	ldr	r2, [pc, #60]	; (401580 <_usart_async_set_irq_state+0x84>)
  401544:	609a      	str	r2, [r3, #8]
  401546:	bd70      	pop	{r4, r5, r6, pc}
		if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
  401548:	2c02      	cmp	r4, #2
  40154a:	bf18      	it	ne
  40154c:	2c00      	cmpne	r4, #0
  40154e:	d007      	beq.n	401560 <_usart_async_set_irq_state+0x64>
		} else if (USART_ASYNC_RX_DONE == type) {
  401550:	2c01      	cmp	r4, #1
  401552:	d00d      	beq.n	401570 <_usart_async_set_irq_state+0x74>
		} else if (USART_ASYNC_ERROR == type) {
  401554:	2c03      	cmp	r4, #3
  401556:	d1e6      	bne.n	401526 <_usart_async_set_irq_state+0x2a>
			    device->hw, US_CSR_OVRE | US_CSR_USART_LIN_FRAME | US_CSR_USART_LIN_PARE | US_CSR_USART_MANERR);
  401558:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IDR = mask;
  40155a:	4a09      	ldr	r2, [pc, #36]	; (401580 <_usart_async_set_irq_state+0x84>)
  40155c:	60da      	str	r2, [r3, #12]
}
  40155e:	e7e2      	b.n	401526 <_usart_async_set_irq_state+0x2a>
			hri_usart_clear_US_IMR_TXRDY_bit(device->hw);
  401560:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IDR = US_IMR_TXRDY;
  401562:	2202      	movs	r2, #2
  401564:	60da      	str	r2, [r3, #12]
			hri_usart_clear_US_IMR_TXEMPTY_bit(device->hw);
  401566:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IDR = US_IMR_TXEMPTY;
  401568:	f44f 7200 	mov.w	r2, #512	; 0x200
  40156c:	60da      	str	r2, [r3, #12]
  40156e:	bd70      	pop	{r4, r5, r6, pc}
			hri_usart_clear_US_IMR_RXRDY_bit(device->hw);
  401570:	69ab      	ldr	r3, [r5, #24]
	((Usart *)hw)->US_IDR = US_IMR_RXRDY;
  401572:	2201      	movs	r2, #1
  401574:	60da      	str	r2, [r3, #12]
  401576:	bd70      	pop	{r4, r5, r6, pc}
  401578:	004019bc 	.word	0x004019bc
  40157c:	00400bdd 	.word	0x00400bdd
  401580:	010000e0 	.word	0x010000e0

00401584 <_usart_get_usart_async>:
}
  401584:	2000      	movs	r0, #0
  401586:	4770      	bx	lr

00401588 <USART1_Handler>:
{
  401588:	b508      	push	{r3, lr}
	_usart_interrupt_handler(_usart1_dev);
  40158a:	4b02      	ldr	r3, [pc, #8]	; (401594 <USART1_Handler+0xc>)
  40158c:	6818      	ldr	r0, [r3, #0]
  40158e:	4b02      	ldr	r3, [pc, #8]	; (401598 <USART1_Handler+0x10>)
  401590:	4798      	blx	r3
  401592:	bd08      	pop	{r3, pc}
  401594:	2040013c 	.word	0x2040013c
  401598:	00401309 	.word	0x00401309

0040159c <timer_task_cb>:
 *
 */
static void timer_task_cb(const struct timer_task *const timer_task)
{
	// Toggle LED
	milliCounter++;
  40159c:	490d      	ldr	r1, [pc, #52]	; (4015d4 <timer_task_cb+0x38>)
  40159e:	880b      	ldrh	r3, [r1, #0]
  4015a0:	3301      	adds	r3, #1
  4015a2:	b29b      	uxth	r3, r3
  4015a4:	800b      	strh	r3, [r1, #0]
	
	messageCounter++;
  4015a6:	684a      	ldr	r2, [r1, #4]
  4015a8:	3201      	adds	r2, #1
  4015aa:	604a      	str	r2, [r1, #4]

	// Check if it's time to send a message
	if (messageCounter >= message_interval_ms) {
  4015ac:	490a      	ldr	r1, [pc, #40]	; (4015d8 <timer_task_cb+0x3c>)
  4015ae:	7809      	ldrb	r1, [r1, #0]
  4015b0:	b2c9      	uxtb	r1, r1
  4015b2:	428a      	cmp	r2, r1
  4015b4:	d304      	bcc.n	4015c0 <timer_task_cb+0x24>
		// Send serial message
		send_data_flag = 1;
  4015b6:	4a07      	ldr	r2, [pc, #28]	; (4015d4 <timer_task_cb+0x38>)
  4015b8:	2101      	movs	r1, #1
  4015ba:	7211      	strb	r1, [r2, #8]
		// Reset message counter
		messageCounter = 0;
  4015bc:	2100      	movs	r1, #0
  4015be:	6051      	str	r1, [r2, #4]
	}

	// Reset millisecond counter every second
	if (milliCounter >= 1000) {
  4015c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  4015c4:	d305      	bcc.n	4015d2 <timer_task_cb+0x36>
		milliCounter = 0;
  4015c6:	4b03      	ldr	r3, [pc, #12]	; (4015d4 <timer_task_cb+0x38>)
  4015c8:	2200      	movs	r2, #0
  4015ca:	801a      	strh	r2, [r3, #0]
		secondCounter++;
  4015cc:	68da      	ldr	r2, [r3, #12]
  4015ce:	3201      	adds	r2, #1
  4015d0:	60da      	str	r2, [r3, #12]
  4015d2:	4770      	bx	lr
  4015d4:	20400140 	.word	0x20400140
  4015d8:	20400024 	.word	0x20400024

004015dc <serial_tx_cb>:
	return entry;
}

// USART functions
// Virtual COM port transmit callback function
static void serial_tx_cb(const struct usart_async_descriptor *const io_descr) {
  4015dc:	4770      	bx	lr
	...

004015e0 <serial_rx_cb>:
	// Do nothing so far
}


// When serial reads a data
static void serial_rx_cb(const struct usart_async_descriptor *const io_descr, const uint16_t usart_data) {
  4015e0:	b500      	push	{lr}
  4015e2:	b083      	sub	sp, #12
		uint8_t received_byte[2], count;
		
		count = io_read(&USART_0.io, &received_byte, 2); // now reading 2 bytes
  4015e4:	2202      	movs	r2, #2
  4015e6:	a901      	add	r1, sp, #4
  4015e8:	4806      	ldr	r0, [pc, #24]	; (401604 <serial_rx_cb+0x24>)
  4015ea:	4b07      	ldr	r3, [pc, #28]	; (401608 <serial_rx_cb+0x28>)
  4015ec:	4798      	blx	r3
		
		if (received_byte[0] == 'S' && QUEUE_SIZE > 0) {
  4015ee:	f89d 3004 	ldrb.w	r3, [sp, #4]
  4015f2:	2b53      	cmp	r3, #83	; 0x53
  4015f4:	d002      	beq.n	4015fc <serial_rx_cb+0x1c>
			startSend = 1;	
			//message_interval_ms = received_byte[1]; // Update the message_interval_ms variable
		}
		
	
}
  4015f6:	b003      	add	sp, #12
  4015f8:	f85d fb04 	ldr.w	pc, [sp], #4
			startSend = 1;	
  4015fc:	2201      	movs	r2, #1
  4015fe:	4b03      	ldr	r3, [pc, #12]	; (40160c <serial_rx_cb+0x2c>)
  401600:	741a      	strb	r2, [r3, #16]
}
  401602:	e7f8      	b.n	4015f6 <serial_rx_cb+0x16>
  401604:	204002d4 	.word	0x204002d4
  401608:	004005a5 	.word	0x004005a5
  40160c:	20400140 	.word	0x20400140

00401610 <add_to_buffer>:
void add_to_buffer(uint8_t new_entry, uint8_t detector_id) {
  401610:	b430      	push	{r4, r5}
	detector_data[detector_id][end_index] = new_entry;
  401612:	4c16      	ldr	r4, [pc, #88]	; (40166c <add_to_buffer+0x5c>)
  401614:	6962      	ldr	r2, [r4, #20]
  401616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  40161a:	4d15      	ldr	r5, [pc, #84]	; (401670 <add_to_buffer+0x60>)
  40161c:	fb03 5101 	mla	r1, r3, r1, r5
  401620:	5488      	strb	r0, [r1, r2]
	end_index = (end_index + 1) % DATA_LENGTH;
  401622:	3201      	adds	r2, #1
  401624:	4913      	ldr	r1, [pc, #76]	; (401674 <add_to_buffer+0x64>)
  401626:	fb81 3102 	smull	r3, r1, r1, r2
  40162a:	17d3      	asrs	r3, r2, #31
  40162c:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
  401630:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401634:	0059      	lsls	r1, r3, #1
  401636:	1a53      	subs	r3, r2, r1
  401638:	2264      	movs	r2, #100	; 0x64
  40163a:	fb02 f303 	mul.w	r3, r2, r3
  40163e:	6163      	str	r3, [r4, #20]
	if (end_index == start_index) {
  401640:	69a2      	ldr	r2, [r4, #24]
  401642:	4293      	cmp	r3, r2
  401644:	d001      	beq.n	40164a <add_to_buffer+0x3a>
}
  401646:	bc30      	pop	{r4, r5}
  401648:	4770      	bx	lr
		start_index = (start_index + 1) % DATA_LENGTH;
  40164a:	3201      	adds	r2, #1
  40164c:	4909      	ldr	r1, [pc, #36]	; (401674 <add_to_buffer+0x64>)
  40164e:	fb81 3102 	smull	r3, r1, r1, r2
  401652:	17d3      	asrs	r3, r2, #31
  401654:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
  401658:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40165c:	0059      	lsls	r1, r3, #1
  40165e:	1a53      	subs	r3, r2, r1
  401660:	2264      	movs	r2, #100	; 0x64
  401662:	fb02 f303 	mul.w	r3, r2, r3
  401666:	61a3      	str	r3, [r4, #24]
	return;
  401668:	e7ed      	b.n	401646 <add_to_buffer+0x36>
  40166a:	bf00      	nop
  40166c:	20400140 	.word	0x20400140
  401670:	20400340 	.word	0x20400340
  401674:	66666667 	.word	0x66666667

00401678 <read_SPI_data>:
{
  401678:	b570      	push	{r4, r5, r6, lr}
  40167a:	b084      	sub	sp, #16
	spi_m_sync_get_io_descriptor(&SPI_0, &io);
  40167c:	a903      	add	r1, sp, #12
  40167e:	4813      	ldr	r0, [pc, #76]	; (4016cc <read_SPI_data+0x54>)
  401680:	4b13      	ldr	r3, [pc, #76]	; (4016d0 <read_SPI_data+0x58>)
  401682:	4798      	blx	r3
	uint8_t cs_pins[4] = {CS_PIN_DEVICE1, CS_PIN_DEVICE2, CS_PIN_DEVICE3, CS_PIN_DEVICE4};
  401684:	4b13      	ldr	r3, [pc, #76]	; (4016d4 <read_SPI_data+0x5c>)
  401686:	681b      	ldr	r3, [r3, #0]
  401688:	9301      	str	r3, [sp, #4]
	for (int i = 0; i < 4; i++) {
  40168a:	2500      	movs	r5, #0
  40168c:	e019      	b.n	4016c2 <read_SPI_data+0x4a>
		gpio_set_pin_level(cs_pins[i], false); // set the pin low (select the device)
  40168e:	ab04      	add	r3, sp, #16
  401690:	442b      	add	r3, r5
  401692:	f813 4c0c 	ldrb.w	r4, [r3, #-12]
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
  401696:	0963      	lsrs	r3, r4, #5
  401698:	f004 041f 	and.w	r4, r4, #31
  40169c:	2201      	movs	r2, #1
  40169e:	fa02 f404 	lsl.w	r4, r2, r4
 * \brief Transfer gpio_port to hardware address
 */
static inline void *port_to_reg(const enum gpio_port port)
{
	/* PIO instance offset is 0x200 */
	return (void *)((uint32_t)PIOA + port * 0x200);
  4016a2:	4e0d      	ldr	r6, [pc, #52]	; (4016d8 <read_SPI_data+0x60>)
  4016a4:	eb06 2643 	add.w	r6, r6, r3, lsl #9
	((Pio *)hw)->PIO_CODR = mask;
  4016a8:	6374      	str	r4, [r6, #52]	; 0x34
		io_read(io, &read_data, 1); // Read 1 bytes of data
  4016aa:	f10d 010b 	add.w	r1, sp, #11
  4016ae:	9803      	ldr	r0, [sp, #12]
  4016b0:	4b0a      	ldr	r3, [pc, #40]	; (4016dc <read_SPI_data+0x64>)
  4016b2:	4798      	blx	r3
	((Pio *)hw)->PIO_SODR = mask;
  4016b4:	6334      	str	r4, [r6, #48]	; 0x30
		add_to_buffer(read_data, i);
  4016b6:	4629      	mov	r1, r5
  4016b8:	f89d 000b 	ldrb.w	r0, [sp, #11]
  4016bc:	4b08      	ldr	r3, [pc, #32]	; (4016e0 <read_SPI_data+0x68>)
  4016be:	4798      	blx	r3
	for (int i = 0; i < 4; i++) {
  4016c0:	3501      	adds	r5, #1
  4016c2:	2d03      	cmp	r5, #3
  4016c4:	dde3      	ble.n	40168e <read_SPI_data+0x16>
}
  4016c6:	b004      	add	sp, #16
  4016c8:	bd70      	pop	{r4, r5, r6, pc}
  4016ca:	bf00      	nop
  4016cc:	204002bc 	.word	0x204002bc
  4016d0:	00400751 	.word	0x00400751
  4016d4:	004019d8 	.word	0x004019d8
  4016d8:	400e0e00 	.word	0x400e0e00
  4016dc:	004005a5 	.word	0x004005a5
  4016e0:	00401611 	.word	0x00401611

004016e4 <get_from_buffer>:
	if (start_index == end_index) {
  4016e4:	4a0f      	ldr	r2, [pc, #60]	; (401724 <get_from_buffer+0x40>)
  4016e6:	6993      	ldr	r3, [r2, #24]
  4016e8:	6952      	ldr	r2, [r2, #20]
  4016ea:	4293      	cmp	r3, r2
  4016ec:	d017      	beq.n	40171e <get_from_buffer+0x3a>
	uint8_t entry = detector_data[detector_id][start_index];
  4016ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  4016f2:	4a0d      	ldr	r2, [pc, #52]	; (401728 <get_from_buffer+0x44>)
  4016f4:	fb01 2000 	mla	r0, r1, r0, r2
  4016f8:	5cc0      	ldrb	r0, [r0, r3]
  4016fa:	b2c0      	uxtb	r0, r0
	start_index = (start_index + 1) % DATA_LENGTH;
  4016fc:	1c5a      	adds	r2, r3, #1
  4016fe:	490b      	ldr	r1, [pc, #44]	; (40172c <get_from_buffer+0x48>)
  401700:	fb81 3102 	smull	r3, r1, r1, r2
  401704:	17d3      	asrs	r3, r2, #31
  401706:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
  40170a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40170e:	0059      	lsls	r1, r3, #1
  401710:	1a53      	subs	r3, r2, r1
  401712:	2264      	movs	r2, #100	; 0x64
  401714:	fb02 f303 	mul.w	r3, r2, r3
  401718:	4a02      	ldr	r2, [pc, #8]	; (401724 <get_from_buffer+0x40>)
  40171a:	6193      	str	r3, [r2, #24]
	return entry;
  40171c:	4770      	bx	lr
		return 0xFF;
  40171e:	20ff      	movs	r0, #255	; 0xff
}
  401720:	4770      	bx	lr
  401722:	bf00      	nop
  401724:	20400140 	.word	0x20400140
  401728:	20400340 	.word	0x20400340
  40172c:	66666667 	.word	0x66666667

00401730 <main>:
void serial_send_data() {
}


int main(void)
{
  401730:	b530      	push	{r4, r5, lr}
  401732:	b087      	sub	sp, #28
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  401734:	4b30      	ldr	r3, [pc, #192]	; (4017f8 <main+0xc8>)
  401736:	4798      	blx	r3

	
	// Set up Timer Function
	task.interval = 1;
  401738:	4930      	ldr	r1, [pc, #192]	; (4017fc <main+0xcc>)
  40173a:	2501      	movs	r5, #1
  40173c:	624d      	str	r5, [r1, #36]	; 0x24
	task.cb = timer_task_cb;
  40173e:	4b30      	ldr	r3, [pc, #192]	; (401800 <main+0xd0>)
  401740:	628b      	str	r3, [r1, #40]	; 0x28
	task.mode = TIMER_TASK_REPEAT;
  401742:	f881 502c 	strb.w	r5, [r1, #44]	; 0x2c
	
	// Add timer task
	timer_add_task(&TIMER_0, &task);
  401746:	4c2f      	ldr	r4, [pc, #188]	; (401804 <main+0xd4>)
  401748:	311c      	adds	r1, #28
  40174a:	4620      	mov	r0, r4
  40174c:	4b2e      	ldr	r3, [pc, #184]	; (401808 <main+0xd8>)
  40174e:	4798      	blx	r3
	timer_start(&TIMER_0);
  401750:	4620      	mov	r0, r4
  401752:	4b2e      	ldr	r3, [pc, #184]	; (40180c <main+0xdc>)
  401754:	4798      	blx	r3
	((Pio *)hw)->PIO_OER = mask;
  401756:	4b2e      	ldr	r3, [pc, #184]	; (401810 <main+0xe0>)
  401758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40175c:	611a      	str	r2, [r3, #16]
  40175e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401762:	611a      	str	r2, [r3, #16]
  401764:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401768:	611a      	str	r2, [r3, #16]
  40176a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40176e:	611a      	str	r2, [r3, #16]
	gpio_set_pin_direction(CS_PIN_DEVICE2, GPIO_DIRECTION_OUT);
	gpio_set_pin_direction(CS_PIN_DEVICE3, GPIO_DIRECTION_OUT);
	gpio_set_pin_direction(CS_PIN_DEVICE4, GPIO_DIRECTION_OUT);
	
	// Enable SPI
	spi_m_sync_enable(&SPI_0);
  401770:	4828      	ldr	r0, [pc, #160]	; (401814 <main+0xe4>)
  401772:	4b29      	ldr	r3, [pc, #164]	; (401818 <main+0xe8>)
  401774:	4798      	blx	r3
	
	
	usart_async_register_callback(&USART_0, USART_ASYNC_TXC_CB, serial_tx_cb);
  401776:	4c29      	ldr	r4, [pc, #164]	; (40181c <main+0xec>)
  401778:	4a29      	ldr	r2, [pc, #164]	; (401820 <main+0xf0>)
  40177a:	4629      	mov	r1, r5
  40177c:	4620      	mov	r0, r4
  40177e:	4d29      	ldr	r5, [pc, #164]	; (401824 <main+0xf4>)
  401780:	47a8      	blx	r5
	usart_async_register_callback(&USART_0, USART_ASYNC_RXC_CB, serial_rx_cb);
  401782:	4a29      	ldr	r2, [pc, #164]	; (401828 <main+0xf8>)
  401784:	2100      	movs	r1, #0
  401786:	4620      	mov	r0, r4
  401788:	47a8      	blx	r5
	int32_t result = usart_async_enable(&USART_0);
  40178a:	4620      	mov	r0, r4
  40178c:	4b27      	ldr	r3, [pc, #156]	; (40182c <main+0xfc>)
  40178e:	4798      	blx	r3
  401790:	e015      	b.n	4017be <main+0x8e>
				// add milliCounter to the buffer
				memcpy(&item.buffer[1 + sizeof(secondCounter)], &milliCounter, sizeof(milliCounter));

				// add detector data to the buffer
				for (int i = 0; i < NUM_OF_DETECTOR; i++) {
					uint8_t detector = get_from_buffer(i);
  401792:	b2e0      	uxtb	r0, r4
  401794:	4b26      	ldr	r3, [pc, #152]	; (401830 <main+0x100>)
  401796:	4798      	blx	r3
					item.buffer[1 + sizeof(secondCounter) + sizeof(milliCounter) + i] = detector;
  401798:	1de3      	adds	r3, r4, #7
  40179a:	aa06      	add	r2, sp, #24
  40179c:	4413      	add	r3, r2
  40179e:	f803 0c18 	strb.w	r0, [r3, #-24]
				for (int i = 0; i < NUM_OF_DETECTOR; i++) {
  4017a2:	3401      	adds	r4, #1
  4017a4:	2c03      	cmp	r4, #3
  4017a6:	ddf4      	ble.n	401792 <main+0x62>
				}

				// enqueue the buffer
	
				enqueue(item);
  4017a8:	e89d 0007 	ldmia.w	sp, {r0, r1, r2}
  4017ac:	4b21      	ldr	r3, [pc, #132]	; (401834 <main+0x104>)
  4017ae:	4798      	blx	r3
				
				if (startSend == 1) {
  4017b0:	4b12      	ldr	r3, [pc, #72]	; (4017fc <main+0xcc>)
  4017b2:	7c1b      	ldrb	r3, [r3, #16]
  4017b4:	2b01      	cmp	r3, #1
  4017b6:	d015      	beq.n	4017e4 <main+0xb4>
					BufferItem dequeueItem = dequeue();
					int result = io_write(&USART_0.io, &dequeueItem.buffer, sizeof(dequeueItem.buffer));
				}

				send_data_flag = 0;
  4017b8:	2200      	movs	r2, #0
  4017ba:	4b10      	ldr	r3, [pc, #64]	; (4017fc <main+0xcc>)
  4017bc:	721a      	strb	r2, [r3, #8]
		read_SPI_data();
  4017be:	4b1e      	ldr	r3, [pc, #120]	; (401838 <main+0x108>)
  4017c0:	4798      	blx	r3
		if (send_data_flag) {
  4017c2:	4b0e      	ldr	r3, [pc, #56]	; (4017fc <main+0xcc>)
  4017c4:	7a1b      	ldrb	r3, [r3, #8]
  4017c6:	2b00      	cmp	r3, #0
  4017c8:	d0f9      	beq.n	4017be <main+0x8e>
				item.buffer[0] = data_mode;
  4017ca:	4b1c      	ldr	r3, [pc, #112]	; (40183c <main+0x10c>)
  4017cc:	785b      	ldrb	r3, [r3, #1]
  4017ce:	f88d 3000 	strb.w	r3, [sp]
				memcpy(&item.buffer[1], &secondCounter, sizeof(secondCounter));
  4017d2:	4b0a      	ldr	r3, [pc, #40]	; (4017fc <main+0xcc>)
  4017d4:	68da      	ldr	r2, [r3, #12]
  4017d6:	f8cd 2001 	str.w	r2, [sp, #1]
				memcpy(&item.buffer[1 + sizeof(secondCounter)], &milliCounter, sizeof(milliCounter));
  4017da:	881b      	ldrh	r3, [r3, #0]
  4017dc:	f8ad 3005 	strh.w	r3, [sp, #5]
				for (int i = 0; i < NUM_OF_DETECTOR; i++) {
  4017e0:	2400      	movs	r4, #0
  4017e2:	e7df      	b.n	4017a4 <main+0x74>
					BufferItem dequeueItem = dequeue();
  4017e4:	a803      	add	r0, sp, #12
  4017e6:	4b16      	ldr	r3, [pc, #88]	; (401840 <main+0x110>)
  4017e8:	4798      	blx	r3
					int result = io_write(&USART_0.io, &dequeueItem.buffer, sizeof(dequeueItem.buffer));
  4017ea:	220b      	movs	r2, #11
  4017ec:	a903      	add	r1, sp, #12
  4017ee:	480b      	ldr	r0, [pc, #44]	; (40181c <main+0xec>)
  4017f0:	4b14      	ldr	r3, [pc, #80]	; (401844 <main+0x114>)
  4017f2:	4798      	blx	r3
  4017f4:	e7e0      	b.n	4017b8 <main+0x88>
  4017f6:	bf00      	nop
  4017f8:	004001d5 	.word	0x004001d5
  4017fc:	20400140 	.word	0x20400140
  401800:	0040159d 	.word	0x0040159d
  401804:	20400324 	.word	0x20400324
  401808:	004008ad 	.word	0x004008ad
  40180c:	00400871 	.word	0x00400871
  401810:	400e0e00 	.word	0x400e0e00
  401814:	204002bc 	.word	0x204002bc
  401818:	00400671 	.word	0x00400671
  40181c:	204002d4 	.word	0x204002d4
  401820:	004015dd 	.word	0x004015dd
  401824:	00400b69 	.word	0x00400b69
  401828:	004015e1 	.word	0x004015e1
  40182c:	00400b3d 	.word	0x00400b3d
  401830:	004016e5 	.word	0x004016e5
  401834:	00400279 	.word	0x00400279
  401838:	00401679 	.word	0x00401679
  40183c:	20400024 	.word	0x20400024
  401840:	004001e1 	.word	0x004001e1
  401844:	00400575 	.word	0x00400575

00401848 <__libc_init_array>:
  401848:	b570      	push	{r4, r5, r6, lr}
  40184a:	4e0d      	ldr	r6, [pc, #52]	; (401880 <__libc_init_array+0x38>)
  40184c:	4c0d      	ldr	r4, [pc, #52]	; (401884 <__libc_init_array+0x3c>)
  40184e:	1ba4      	subs	r4, r4, r6
  401850:	10a4      	asrs	r4, r4, #2
  401852:	2500      	movs	r5, #0
  401854:	42a5      	cmp	r5, r4
  401856:	d109      	bne.n	40186c <__libc_init_array+0x24>
  401858:	4e0b      	ldr	r6, [pc, #44]	; (401888 <__libc_init_array+0x40>)
  40185a:	4c0c      	ldr	r4, [pc, #48]	; (40188c <__libc_init_array+0x44>)
  40185c:	f000 f8be 	bl	4019dc <_init>
  401860:	1ba4      	subs	r4, r4, r6
  401862:	10a4      	asrs	r4, r4, #2
  401864:	2500      	movs	r5, #0
  401866:	42a5      	cmp	r5, r4
  401868:	d105      	bne.n	401876 <__libc_init_array+0x2e>
  40186a:	bd70      	pop	{r4, r5, r6, pc}
  40186c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  401870:	4798      	blx	r3
  401872:	3501      	adds	r5, #1
  401874:	e7ee      	b.n	401854 <__libc_init_array+0xc>
  401876:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
  40187a:	4798      	blx	r3
  40187c:	3501      	adds	r5, #1
  40187e:	e7f2      	b.n	401866 <__libc_init_array+0x1e>
  401880:	004019e8 	.word	0x004019e8
  401884:	004019e8 	.word	0x004019e8
  401888:	004019e8 	.word	0x004019e8
  40188c:	004019ec 	.word	0x004019ec
  401890:	682f2e2e 	.word	0x682f2e2e
  401894:	732f6c61 	.word	0x732f6c61
  401898:	682f6372 	.word	0x682f6372
  40189c:	695f6c61 	.word	0x695f6c61
  4018a0:	00632e6f 	.word	0x00632e6f
  4018a4:	682f2e2e 	.word	0x682f2e2e
  4018a8:	732f6c61 	.word	0x732f6c61
  4018ac:	682f6372 	.word	0x682f6372
  4018b0:	725f6c61 	.word	0x725f6c61
  4018b4:	5f646e61 	.word	0x5f646e61
  4018b8:	636e7973 	.word	0x636e7973
  4018bc:	0000632e 	.word	0x0000632e
  4018c0:	682f2e2e 	.word	0x682f2e2e
  4018c4:	732f6c61 	.word	0x732f6c61
  4018c8:	682f6372 	.word	0x682f6372
  4018cc:	735f6c61 	.word	0x735f6c61
  4018d0:	6d5f6970 	.word	0x6d5f6970
  4018d4:	6e79735f 	.word	0x6e79735f
  4018d8:	00632e63 	.word	0x00632e63
  4018dc:	682f2e2e 	.word	0x682f2e2e
  4018e0:	732f6c61 	.word	0x732f6c61
  4018e4:	682f6372 	.word	0x682f6372
  4018e8:	745f6c61 	.word	0x745f6c61
  4018ec:	72656d69 	.word	0x72656d69
  4018f0:	0000632e 	.word	0x0000632e
  4018f4:	682f2e2e 	.word	0x682f2e2e
  4018f8:	732f6c61 	.word	0x732f6c61
  4018fc:	682f6372 	.word	0x682f6372
  401900:	755f6c61 	.word	0x755f6c61
  401904:	74726173 	.word	0x74726173
  401908:	7973615f 	.word	0x7973615f
  40190c:	632e636e 	.word	0x632e636e
  401910:	00000000 	.word	0x00000000
  401914:	682f2e2e 	.word	0x682f2e2e
  401918:	752f6c61 	.word	0x752f6c61
  40191c:	736c6974 	.word	0x736c6974
  401920:	6372732f 	.word	0x6372732f
  401924:	6974752f 	.word	0x6974752f
  401928:	6c5f736c 	.word	0x6c5f736c
  40192c:	2e747369 	.word	0x2e747369
  401930:	00000063 	.word	0x00000063
  401934:	682f2e2e 	.word	0x682f2e2e
  401938:	752f6c61 	.word	0x752f6c61
  40193c:	736c6974 	.word	0x736c6974
  401940:	6372732f 	.word	0x6372732f
  401944:	6974752f 	.word	0x6974752f
  401948:	725f736c 	.word	0x725f736c
  40194c:	62676e69 	.word	0x62676e69
  401950:	65666675 	.word	0x65666675
  401954:	00632e72 	.word	0x00632e72

00401958 <spi_regs>:
  401958:	00000000 80000000 00000001 0496dc02     ................
  401968:	0000ffff 682f2e2e 732f6c70 682f6970     ....../hpl/spi/h
  401978:	735f6c70 632e6970 00000000 682f2e2e     pl_spi.c....../h
  401988:	742f6c70 70682f63 63745f6c 0000632e     pl/tc/hpl_tc.c..
  401998:	682f2e2e 742f6c70 2f676e72 5f6c7068     ../hpl/trng/hpl_
  4019a8:	676e7274 0000632e                       trng.c..

004019b0 <_usarts>:
  4019b0:	00000001 001008c0 00030051 682f2e2e     ........Q...../h
  4019c0:	752f6c70 74726173 6c70682f 6173755f     pl/usart/hpl_usa
  4019d0:	632e7472 00000000 1f1e1d1c              rt.c........

004019dc <_init>:
  4019dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4019de:	bf00      	nop
  4019e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4019e2:	bc08      	pop	{r3}
  4019e4:	469e      	mov	lr, r3
  4019e6:	4770      	bx	lr

004019e8 <__init_array_start>:
  4019e8:	0040018d 	.word	0x0040018d

004019ec <_fini>:
  4019ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4019ee:	bf00      	nop
  4019f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4019f2:	bc08      	pop	{r3}
  4019f4:	469e      	mov	lr, r3
  4019f6:	4770      	bx	lr

004019f8 <__fini_array_start>:
  4019f8:	00400169 	.word	0x00400169
